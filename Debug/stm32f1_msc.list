
stm32f1_msc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  0800e5c0  0800e5c0  0001e5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec28  0800ec28  00020138  2**0
                  CONTENTS
  4 .ARM          00000000  0800ec28  0800ec28  00020138  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ec28  0800ec28  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec28  0800ec28  0001ec28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec2c  0800ec2c  0001ec2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  0800ec30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d44  20000138  0800ed68  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e7c  0800ed68  00022e7c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001566c  00000000  00000000  00020161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000404a  00000000  00000000  000357cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  00039818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  0003a9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c137  00000000  00000000  0003b998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001990e  00000000  00000000  00057acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088c94  00000000  00000000  000713dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa071  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004704  00000000  00000000  000fa0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000138 	.word	0x20000138
 8000128:	00000000 	.word	0x00000000
 800012c:	0800e5a8 	.word	0x0800e5a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000013c 	.word	0x2000013c
 8000148:	0800e5a8 	.word	0x0800e5a8

0800014c <__aeabi_dmul>:
 800014c:	b570      	push	{r4, r5, r6, lr}
 800014e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000152:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000156:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015a:	bf1d      	ittte	ne
 800015c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000160:	ea94 0f0c 	teqne	r4, ip
 8000164:	ea95 0f0c 	teqne	r5, ip
 8000168:	f000 f8de 	bleq	8000328 <__aeabi_dmul+0x1dc>
 800016c:	442c      	add	r4, r5
 800016e:	ea81 0603 	eor.w	r6, r1, r3
 8000172:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000176:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800017e:	bf18      	it	ne
 8000180:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000184:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000188:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800018c:	d038      	beq.n	8000200 <__aeabi_dmul+0xb4>
 800018e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000192:	f04f 0500 	mov.w	r5, #0
 8000196:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800019e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a2:	f04f 0600 	mov.w	r6, #0
 80001a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001aa:	f09c 0f00 	teq	ip, #0
 80001ae:	bf18      	it	ne
 80001b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c0:	d204      	bcs.n	80001cc <__aeabi_dmul+0x80>
 80001c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001c6:	416d      	adcs	r5, r5
 80001c8:	eb46 0606 	adc.w	r6, r6, r6
 80001cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e4:	bf88      	it	hi
 80001e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ea:	d81e      	bhi.n	800022a <__aeabi_dmul+0xde>
 80001ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f0:	bf08      	it	eq
 80001f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001f6:	f150 0000 	adcs.w	r0, r0, #0
 80001fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80001fe:	bd70      	pop	{r4, r5, r6, pc}
 8000200:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000204:	ea46 0101 	orr.w	r1, r6, r1
 8000208:	ea40 0002 	orr.w	r0, r0, r2
 800020c:	ea81 0103 	eor.w	r1, r1, r3
 8000210:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000214:	bfc2      	ittt	gt
 8000216:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800021e:	bd70      	popgt	{r4, r5, r6, pc}
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f04f 0e00 	mov.w	lr, #0
 8000228:	3c01      	subs	r4, #1
 800022a:	f300 80ab 	bgt.w	8000384 <__aeabi_dmul+0x238>
 800022e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000232:	bfde      	ittt	le
 8000234:	2000      	movle	r0, #0
 8000236:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023a:	bd70      	pople	{r4, r5, r6, pc}
 800023c:	f1c4 0400 	rsb	r4, r4, #0
 8000240:	3c20      	subs	r4, #32
 8000242:	da35      	bge.n	80002b0 <__aeabi_dmul+0x164>
 8000244:	340c      	adds	r4, #12
 8000246:	dc1b      	bgt.n	8000280 <__aeabi_dmul+0x134>
 8000248:	f104 0414 	add.w	r4, r4, #20
 800024c:	f1c4 0520 	rsb	r5, r4, #32
 8000250:	fa00 f305 	lsl.w	r3, r0, r5
 8000254:	fa20 f004 	lsr.w	r0, r0, r4
 8000258:	fa01 f205 	lsl.w	r2, r1, r5
 800025c:	ea40 0002 	orr.w	r0, r0, r2
 8000260:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000264:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000268:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800026c:	fa21 f604 	lsr.w	r6, r1, r4
 8000270:	eb42 0106 	adc.w	r1, r2, r6
 8000274:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000278:	bf08      	it	eq
 800027a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	f1c4 040c 	rsb	r4, r4, #12
 8000284:	f1c4 0520 	rsb	r5, r4, #32
 8000288:	fa00 f304 	lsl.w	r3, r0, r4
 800028c:	fa20 f005 	lsr.w	r0, r0, r5
 8000290:	fa01 f204 	lsl.w	r2, r1, r4
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800029c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a0:	f141 0100 	adc.w	r1, r1, #0
 80002a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002a8:	bf08      	it	eq
 80002aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	f1c4 0520 	rsb	r5, r4, #32
 80002b4:	fa00 f205 	lsl.w	r2, r0, r5
 80002b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002bc:	fa20 f304 	lsr.w	r3, r0, r4
 80002c0:	fa01 f205 	lsl.w	r2, r1, r5
 80002c4:	ea43 0302 	orr.w	r3, r3, r2
 80002c8:	fa21 f004 	lsr.w	r0, r1, r4
 80002cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d0:	fa21 f204 	lsr.w	r2, r1, r4
 80002d4:	ea20 0002 	bic.w	r0, r0, r2
 80002d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e0:	bf08      	it	eq
 80002e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002e6:	bd70      	pop	{r4, r5, r6, pc}
 80002e8:	f094 0f00 	teq	r4, #0
 80002ec:	d10f      	bne.n	800030e <__aeabi_dmul+0x1c2>
 80002ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f2:	0040      	lsls	r0, r0, #1
 80002f4:	eb41 0101 	adc.w	r1, r1, r1
 80002f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002fc:	bf08      	it	eq
 80002fe:	3c01      	subeq	r4, #1
 8000300:	d0f7      	beq.n	80002f2 <__aeabi_dmul+0x1a6>
 8000302:	ea41 0106 	orr.w	r1, r1, r6
 8000306:	f095 0f00 	teq	r5, #0
 800030a:	bf18      	it	ne
 800030c:	4770      	bxne	lr
 800030e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000312:	0052      	lsls	r2, r2, #1
 8000314:	eb43 0303 	adc.w	r3, r3, r3
 8000318:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800031c:	bf08      	it	eq
 800031e:	3d01      	subeq	r5, #1
 8000320:	d0f7      	beq.n	8000312 <__aeabi_dmul+0x1c6>
 8000322:	ea43 0306 	orr.w	r3, r3, r6
 8000326:	4770      	bx	lr
 8000328:	ea94 0f0c 	teq	r4, ip
 800032c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000330:	bf18      	it	ne
 8000332:	ea95 0f0c 	teqne	r5, ip
 8000336:	d00c      	beq.n	8000352 <__aeabi_dmul+0x206>
 8000338:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800033c:	bf18      	it	ne
 800033e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000342:	d1d1      	bne.n	80002e8 <__aeabi_dmul+0x19c>
 8000344:	ea81 0103 	eor.w	r1, r1, r3
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	f04f 0000 	mov.w	r0, #0
 8000350:	bd70      	pop	{r4, r5, r6, pc}
 8000352:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000356:	bf06      	itte	eq
 8000358:	4610      	moveq	r0, r2
 800035a:	4619      	moveq	r1, r3
 800035c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000360:	d019      	beq.n	8000396 <__aeabi_dmul+0x24a>
 8000362:	ea94 0f0c 	teq	r4, ip
 8000366:	d102      	bne.n	800036e <__aeabi_dmul+0x222>
 8000368:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800036c:	d113      	bne.n	8000396 <__aeabi_dmul+0x24a>
 800036e:	ea95 0f0c 	teq	r5, ip
 8000372:	d105      	bne.n	8000380 <__aeabi_dmul+0x234>
 8000374:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000378:	bf1c      	itt	ne
 800037a:	4610      	movne	r0, r2
 800037c:	4619      	movne	r1, r3
 800037e:	d10a      	bne.n	8000396 <__aeabi_dmul+0x24a>
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000388:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800038c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000390:	f04f 0000 	mov.w	r0, #0
 8000394:	bd70      	pop	{r4, r5, r6, pc}
 8000396:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800039e:	bd70      	pop	{r4, r5, r6, pc}

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_d2uiz>:
 8000718:	004a      	lsls	r2, r1, #1
 800071a:	d211      	bcs.n	8000740 <__aeabi_d2uiz+0x28>
 800071c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000720:	d211      	bcs.n	8000746 <__aeabi_d2uiz+0x2e>
 8000722:	d50d      	bpl.n	8000740 <__aeabi_d2uiz+0x28>
 8000724:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000728:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800072c:	d40e      	bmi.n	800074c <__aeabi_d2uiz+0x34>
 800072e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000732:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000736:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073a:	fa23 f002 	lsr.w	r0, r3, r2
 800073e:	4770      	bx	lr
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	4770      	bx	lr
 8000746:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074a:	d102      	bne.n	8000752 <__aeabi_d2uiz+0x3a>
 800074c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000750:	4770      	bx	lr
 8000752:	f04f 0000 	mov.w	r0, #0
 8000756:	4770      	bx	lr

08000758 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2110      	movs	r1, #16
 8000760:	4803      	ldr	r0, [pc, #12]	; (8000770 <SELECT+0x18>)
 8000762:	f001 facb 	bl	8001cfc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000766:	2001      	movs	r0, #1
 8000768:	f000 ff9c 	bl	80016a4 <HAL_Delay>
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40010800 	.word	0x40010800

08000774 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	2110      	movs	r1, #16
 800077c:	4803      	ldr	r0, [pc, #12]	; (800078c <DESELECT+0x18>)
 800077e:	f001 fabd 	bl	8001cfc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000782:	2001      	movs	r0, #1
 8000784:	f000 ff8e 	bl	80016a4 <HAL_Delay>
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40010800 	.word	0x40010800

08000790 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800079a:	bf00      	nop
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <SPI_TxByte+0x30>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	2b02      	cmp	r3, #2
 80007a8:	d1f8      	bne.n	800079c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80007aa:	1df9      	adds	r1, r7, #7
 80007ac:	2364      	movs	r3, #100	; 0x64
 80007ae:	2201      	movs	r2, #1
 80007b0:	4803      	ldr	r0, [pc, #12]	; (80007c0 <SPI_TxByte+0x30>)
 80007b2:	f003 fce7 	bl	8004184 <HAL_SPI_Transmit>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	2000016c 	.word	0x2000016c

080007c4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80007d0:	bf00      	nop
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <SPI_TxBuffer+0x30>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	f003 0302 	and.w	r3, r3, #2
 80007dc:	2b02      	cmp	r3, #2
 80007de:	d1f8      	bne.n	80007d2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80007e0:	887a      	ldrh	r2, [r7, #2]
 80007e2:	2364      	movs	r3, #100	; 0x64
 80007e4:	6879      	ldr	r1, [r7, #4]
 80007e6:	4803      	ldr	r0, [pc, #12]	; (80007f4 <SPI_TxBuffer+0x30>)
 80007e8:	f003 fccc 	bl	8004184 <HAL_SPI_Transmit>
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	2000016c 	.word	0x2000016c

080007f8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80007fe:	23ff      	movs	r3, #255	; 0xff
 8000800:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000802:	bf00      	nop
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <SPI_RxByte+0x34>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	2b02      	cmp	r3, #2
 8000810:	d1f8      	bne.n	8000804 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000812:	1dba      	adds	r2, r7, #6
 8000814:	1df9      	adds	r1, r7, #7
 8000816:	2364      	movs	r3, #100	; 0x64
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	2301      	movs	r3, #1
 800081c:	4803      	ldr	r0, [pc, #12]	; (800082c <SPI_RxByte+0x34>)
 800081e:	f003 fded 	bl	80043fc <HAL_SPI_TransmitReceive>

	return data;
 8000822:	79bb      	ldrb	r3, [r7, #6]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	2000016c 	.word	0x2000016c

08000830 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000838:	f7ff ffde 	bl	80007f8 <SPI_RxByte>
 800083c:	4603      	mov	r3, r0
 800083e:	461a      	mov	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	701a      	strb	r2, [r3, #0]
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <SD_ReadyWait+0x30>)
 8000854:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000858:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800085a:	f7ff ffcd 	bl	80007f8 <SPI_RxByte>
 800085e:	4603      	mov	r3, r0
 8000860:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2bff      	cmp	r3, #255	; 0xff
 8000866:	d003      	beq.n	8000870 <SD_ReadyWait+0x24>
 8000868:	4b04      	ldr	r3, [pc, #16]	; (800087c <SD_ReadyWait+0x30>)
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d1f4      	bne.n	800085a <SD_ReadyWait+0xe>

	return res;
 8000870:	79fb      	ldrb	r3, [r7, #7]
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000156 	.word	0x20000156

08000880 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000886:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800088a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800088c:	f7ff ff72 	bl	8000774 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	e005      	b.n	80008a2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000896:	20ff      	movs	r0, #255	; 0xff
 8000898:	f7ff ff7a 	bl	8000790 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	3301      	adds	r3, #1
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	2b09      	cmp	r3, #9
 80008a6:	ddf6      	ble.n	8000896 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80008a8:	f7ff ff56 	bl	8000758 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80008ac:	2340      	movs	r3, #64	; 0x40
 80008ae:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80008c0:	2395      	movs	r3, #149	; 0x95
 80008c2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80008c4:	463b      	mov	r3, r7
 80008c6:	2106      	movs	r1, #6
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff ff7b 	bl	80007c4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80008ce:	e002      	b.n	80008d6 <SD_PowerOn+0x56>
	{
		cnt--;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80008d6:	f7ff ff8f 	bl	80007f8 <SPI_RxByte>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d002      	beq.n	80008e6 <SD_PowerOn+0x66>
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d1f4      	bne.n	80008d0 <SD_PowerOn+0x50>
	}

	DESELECT();
 80008e6:	f7ff ff45 	bl	8000774 <DESELECT>
	SPI_TxByte(0XFF);
 80008ea:	20ff      	movs	r0, #255	; 0xff
 80008ec:	f7ff ff50 	bl	8000790 <SPI_TxByte>

	PowerFlag = 1;
 80008f0:	4b03      	ldr	r3, [pc, #12]	; (8000900 <SD_PowerOn+0x80>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	701a      	strb	r2, [r3, #0]
}
 80008f6:	bf00      	nop
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000159 	.word	0x20000159

08000904 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000908:	4b03      	ldr	r3, [pc, #12]	; (8000918 <SD_PowerOff+0x14>)
 800090a:	2200      	movs	r2, #0
 800090c:	701a      	strb	r2, [r3, #0]
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	20000159 	.word	0x20000159

0800091c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000920:	4b02      	ldr	r3, [pc, #8]	; (800092c <SD_CheckPower+0x10>)
 8000922:	781b      	ldrb	r3, [r3, #0]
}
 8000924:	4618      	mov	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	20000159 	.word	0x20000159

08000930 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <SD_RxDataBlock+0x58>)
 800093c:	22c8      	movs	r2, #200	; 0xc8
 800093e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000940:	f7ff ff5a 	bl	80007f8 <SPI_RxByte>
 8000944:	4603      	mov	r3, r0
 8000946:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	2bff      	cmp	r3, #255	; 0xff
 800094c:	d103      	bne.n	8000956 <SD_RxDataBlock+0x26>
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <SD_RxDataBlock+0x58>)
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1f4      	bne.n	8000940 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000956:	7bfb      	ldrb	r3, [r7, #15]
 8000958:	2bfe      	cmp	r3, #254	; 0xfe
 800095a:	d001      	beq.n	8000960 <SD_RxDataBlock+0x30>
 800095c:	2300      	movs	r3, #0
 800095e:	e00f      	b.n	8000980 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	1c5a      	adds	r2, r3, #1
 8000964:	607a      	str	r2, [r7, #4]
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff ff62 	bl	8000830 <SPI_RxBytePtr>
	} while(len--);
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	1e5a      	subs	r2, r3, #1
 8000970:	603a      	str	r2, [r7, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1f4      	bne.n	8000960 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000976:	f7ff ff3f 	bl	80007f8 <SPI_RxByte>
	SPI_RxByte();
 800097a:	f7ff ff3d 	bl	80007f8 <SPI_RxByte>

	return TRUE;
 800097e:	2301      	movs	r3, #1
}
 8000980:	4618      	mov	r0, r3
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000154 	.word	0x20000154

0800098c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	460b      	mov	r3, r1
 8000996:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800099c:	f7ff ff56 	bl	800084c <SD_ReadyWait>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2bff      	cmp	r3, #255	; 0xff
 80009a4:	d001      	beq.n	80009aa <SD_TxDataBlock+0x1e>
 80009a6:	2300      	movs	r3, #0
 80009a8:	e02f      	b.n	8000a0a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80009aa:	78fb      	ldrb	r3, [r7, #3]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff feef 	bl	8000790 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80009b2:	78fb      	ldrb	r3, [r7, #3]
 80009b4:	2bfd      	cmp	r3, #253	; 0xfd
 80009b6:	d020      	beq.n	80009fa <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80009b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff ff01 	bl	80007c4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80009c2:	f7ff ff19 	bl	80007f8 <SPI_RxByte>
		SPI_RxByte();
 80009c6:	f7ff ff17 	bl	80007f8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80009ca:	e00b      	b.n	80009e4 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80009cc:	f7ff ff14 	bl	80007f8 <SPI_RxByte>
 80009d0:	4603      	mov	r3, r0
 80009d2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	f003 031f 	and.w	r3, r3, #31
 80009da:	2b05      	cmp	r3, #5
 80009dc:	d006      	beq.n	80009ec <SD_TxDataBlock+0x60>
			i++;
 80009de:	7bbb      	ldrb	r3, [r7, #14]
 80009e0:	3301      	adds	r3, #1
 80009e2:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80009e4:	7bbb      	ldrb	r3, [r7, #14]
 80009e6:	2b40      	cmp	r3, #64	; 0x40
 80009e8:	d9f0      	bls.n	80009cc <SD_TxDataBlock+0x40>
 80009ea:	e000      	b.n	80009ee <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80009ec:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80009ee:	bf00      	nop
 80009f0:	f7ff ff02 	bl	80007f8 <SPI_RxByte>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d0fa      	beq.n	80009f0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	f003 031f 	and.w	r3, r3, #31
 8000a00:	2b05      	cmp	r3, #5
 8000a02:	d101      	bne.n	8000a08 <SD_TxDataBlock+0x7c>
 8000a04:	2301      	movs	r3, #1
 8000a06:	e000      	b.n	8000a0a <SD_TxDataBlock+0x7e>

	return FALSE;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b084      	sub	sp, #16
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	4603      	mov	r3, r0
 8000a1a:	6039      	str	r1, [r7, #0]
 8000a1c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000a1e:	f7ff ff15 	bl	800084c <SD_ReadyWait>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2bff      	cmp	r3, #255	; 0xff
 8000a26:	d001      	beq.n	8000a2c <SD_SendCmd+0x1a>
 8000a28:	23ff      	movs	r3, #255	; 0xff
 8000a2a:	e042      	b.n	8000ab2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff feae 	bl	8000790 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	0e1b      	lsrs	r3, r3, #24
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fea8 	bl	8000790 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	0c1b      	lsrs	r3, r3, #16
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fea2 	bl	8000790 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	0a1b      	lsrs	r3, r3, #8
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fe9c 	bl	8000790 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fe97 	bl	8000790 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	2b40      	cmp	r3, #64	; 0x40
 8000a66:	d102      	bne.n	8000a6e <SD_SendCmd+0x5c>
 8000a68:	2395      	movs	r3, #149	; 0x95
 8000a6a:	73fb      	strb	r3, [r7, #15]
 8000a6c:	e007      	b.n	8000a7e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2b48      	cmp	r3, #72	; 0x48
 8000a72:	d102      	bne.n	8000a7a <SD_SendCmd+0x68>
 8000a74:	2387      	movs	r3, #135	; 0x87
 8000a76:	73fb      	strb	r3, [r7, #15]
 8000a78:	e001      	b.n	8000a7e <SD_SendCmd+0x6c>
	else crc = 1;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fe85 	bl	8000790 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b4c      	cmp	r3, #76	; 0x4c
 8000a8a:	d101      	bne.n	8000a90 <SD_SendCmd+0x7e>
 8000a8c:	f7ff feb4 	bl	80007f8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000a90:	230a      	movs	r3, #10
 8000a92:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000a94:	f7ff feb0 	bl	80007f8 <SPI_RxByte>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000a9c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	da05      	bge.n	8000ab0 <SD_SendCmd+0x9e>
 8000aa4:	7bbb      	ldrb	r3, [r7, #14]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	73bb      	strb	r3, [r7, #14]
 8000aaa:	7bbb      	ldrb	r3, [r7, #14]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1f1      	bne.n	8000a94 <SD_SendCmd+0x82>

	return res;
 8000ab0:	7b7b      	ldrb	r3, [r7, #13]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <SD_disk_initialize+0x14>
 8000acc:	2301      	movs	r3, #1
 8000ace:	e0d1      	b.n	8000c74 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000ad0:	4b6a      	ldr	r3, [pc, #424]	; (8000c7c <SD_disk_initialize+0x1c0>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <SD_disk_initialize+0x2a>
 8000ade:	4b67      	ldr	r3, [pc, #412]	; (8000c7c <SD_disk_initialize+0x1c0>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	e0c6      	b.n	8000c74 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000ae6:	f7ff fecb 	bl	8000880 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000aea:	f7ff fe35 	bl	8000758 <SELECT>

	/* check disk type */
	type = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000af2:	2100      	movs	r1, #0
 8000af4:	2040      	movs	r0, #64	; 0x40
 8000af6:	f7ff ff8c 	bl	8000a12 <SD_SendCmd>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	f040 80a1 	bne.w	8000c44 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000b02:	4b5f      	ldr	r3, [pc, #380]	; (8000c80 <SD_disk_initialize+0x1c4>)
 8000b04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b08:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000b0a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000b0e:	2048      	movs	r0, #72	; 0x48
 8000b10:	f7ff ff7f 	bl	8000a12 <SD_SendCmd>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d155      	bne.n	8000bc6 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	73fb      	strb	r3, [r7, #15]
 8000b1e:	e00c      	b.n	8000b3a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000b20:	7bfc      	ldrb	r4, [r7, #15]
 8000b22:	f7ff fe69 	bl	80007f8 <SPI_RxByte>
 8000b26:	4603      	mov	r3, r0
 8000b28:	461a      	mov	r2, r3
 8000b2a:	f104 0310 	add.w	r3, r4, #16
 8000b2e:	443b      	add	r3, r7
 8000b30:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
 8000b36:	3301      	adds	r3, #1
 8000b38:	73fb      	strb	r3, [r7, #15]
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	2b03      	cmp	r3, #3
 8000b3e:	d9ef      	bls.n	8000b20 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000b40:	7abb      	ldrb	r3, [r7, #10]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d17e      	bne.n	8000c44 <SD_disk_initialize+0x188>
 8000b46:	7afb      	ldrb	r3, [r7, #11]
 8000b48:	2baa      	cmp	r3, #170	; 0xaa
 8000b4a:	d17b      	bne.n	8000c44 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2077      	movs	r0, #119	; 0x77
 8000b50:	f7ff ff5f 	bl	8000a12 <SD_SendCmd>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d807      	bhi.n	8000b6a <SD_disk_initialize+0xae>
 8000b5a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000b5e:	2069      	movs	r0, #105	; 0x69
 8000b60:	f7ff ff57 	bl	8000a12 <SD_SendCmd>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d004      	beq.n	8000b74 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000b6a:	4b45      	ldr	r3, [pc, #276]	; (8000c80 <SD_disk_initialize+0x1c4>)
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d1ec      	bne.n	8000b4c <SD_disk_initialize+0x90>
 8000b72:	e000      	b.n	8000b76 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000b74:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000b76:	4b42      	ldr	r3, [pc, #264]	; (8000c80 <SD_disk_initialize+0x1c4>)
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d062      	beq.n	8000c44 <SD_disk_initialize+0x188>
 8000b7e:	2100      	movs	r1, #0
 8000b80:	207a      	movs	r0, #122	; 0x7a
 8000b82:	f7ff ff46 	bl	8000a12 <SD_SendCmd>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d15b      	bne.n	8000c44 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	73fb      	strb	r3, [r7, #15]
 8000b90:	e00c      	b.n	8000bac <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000b92:	7bfc      	ldrb	r4, [r7, #15]
 8000b94:	f7ff fe30 	bl	80007f8 <SPI_RxByte>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	f104 0310 	add.w	r3, r4, #16
 8000ba0:	443b      	add	r3, r7
 8000ba2:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	73fb      	strb	r3, [r7, #15]
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	2b03      	cmp	r3, #3
 8000bb0:	d9ef      	bls.n	8000b92 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000bb2:	7a3b      	ldrb	r3, [r7, #8]
 8000bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <SD_disk_initialize+0x104>
 8000bbc:	230c      	movs	r3, #12
 8000bbe:	e000      	b.n	8000bc2 <SD_disk_initialize+0x106>
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	73bb      	strb	r3, [r7, #14]
 8000bc4:	e03e      	b.n	8000c44 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	2077      	movs	r0, #119	; 0x77
 8000bca:	f7ff ff22 	bl	8000a12 <SD_SendCmd>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d808      	bhi.n	8000be6 <SD_disk_initialize+0x12a>
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2069      	movs	r0, #105	; 0x69
 8000bd8:	f7ff ff1b 	bl	8000a12 <SD_SendCmd>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d801      	bhi.n	8000be6 <SD_disk_initialize+0x12a>
 8000be2:	2302      	movs	r3, #2
 8000be4:	e000      	b.n	8000be8 <SD_disk_initialize+0x12c>
 8000be6:	2301      	movs	r3, #1
 8000be8:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000bea:	7bbb      	ldrb	r3, [r7, #14]
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d10e      	bne.n	8000c0e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2077      	movs	r0, #119	; 0x77
 8000bf4:	f7ff ff0d 	bl	8000a12 <SD_SendCmd>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d80e      	bhi.n	8000c1c <SD_disk_initialize+0x160>
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2069      	movs	r0, #105	; 0x69
 8000c02:	f7ff ff06 	bl	8000a12 <SD_SendCmd>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d107      	bne.n	8000c1c <SD_disk_initialize+0x160>
 8000c0c:	e00c      	b.n	8000c28 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000c0e:	2100      	movs	r1, #0
 8000c10:	2041      	movs	r0, #65	; 0x41
 8000c12:	f7ff fefe 	bl	8000a12 <SD_SendCmd>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d004      	beq.n	8000c26 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000c1c:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <SD_disk_initialize+0x1c4>)
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d1e2      	bne.n	8000bea <SD_disk_initialize+0x12e>
 8000c24:	e000      	b.n	8000c28 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000c26:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000c28:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <SD_disk_initialize+0x1c4>)
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d007      	beq.n	8000c40 <SD_disk_initialize+0x184>
 8000c30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c34:	2050      	movs	r0, #80	; 0x50
 8000c36:	f7ff feec 	bl	8000a12 <SD_SendCmd>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SD_disk_initialize+0x188>
 8000c40:	2300      	movs	r3, #0
 8000c42:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000c44:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <SD_disk_initialize+0x1c8>)
 8000c46:	7bbb      	ldrb	r3, [r7, #14]
 8000c48:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000c4a:	f7ff fd93 	bl	8000774 <DESELECT>
	SPI_RxByte();
 8000c4e:	f7ff fdd3 	bl	80007f8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000c52:	7bbb      	ldrb	r3, [r7, #14]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d008      	beq.n	8000c6a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <SD_disk_initialize+0x1c0>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	f023 0301 	bic.w	r3, r3, #1
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <SD_disk_initialize+0x1c0>)
 8000c66:	701a      	strb	r2, [r3, #0]
 8000c68:	e001      	b.n	8000c6e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000c6a:	f7ff fe4b 	bl	8000904 <SD_PowerOff>
	}

	return Stat;
 8000c6e:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <SD_disk_initialize+0x1c0>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	b2db      	uxtb	r3, r3
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd90      	pop	{r4, r7, pc}
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	20000154 	.word	0x20000154
 8000c84:	20000158 	.word	0x20000158

08000c88 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <SD_disk_status+0x14>
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e002      	b.n	8000ca2 <SD_disk_status+0x1a>
	return Stat;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <SD_disk_status+0x24>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b2db      	uxtb	r3, r3
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr
 8000cac:	20000000 	.word	0x20000000

08000cb0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d102      	bne.n	8000ccc <SD_disk_read+0x1c>
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d101      	bne.n	8000cd0 <SD_disk_read+0x20>
 8000ccc:	2304      	movs	r3, #4
 8000cce:	e051      	b.n	8000d74 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000cd0:	4b2a      	ldr	r3, [pc, #168]	; (8000d7c <SD_disk_read+0xcc>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SD_disk_read+0x32>
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e048      	b.n	8000d74 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000ce2:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <SD_disk_read+0xd0>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	f003 0304 	and.w	r3, r3, #4
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d102      	bne.n	8000cf4 <SD_disk_read+0x44>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	025b      	lsls	r3, r3, #9
 8000cf2:	607b      	str	r3, [r7, #4]

	SELECT();
 8000cf4:	f7ff fd30 	bl	8000758 <SELECT>

	if (count == 1)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d111      	bne.n	8000d22 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	2051      	movs	r0, #81	; 0x51
 8000d02:	f7ff fe86 	bl	8000a12 <SD_SendCmd>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d129      	bne.n	8000d60 <SD_disk_read+0xb0>
 8000d0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d10:	68b8      	ldr	r0, [r7, #8]
 8000d12:	f7ff fe0d 	bl	8000930 <SD_RxDataBlock>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d021      	beq.n	8000d60 <SD_disk_read+0xb0>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	e01e      	b.n	8000d60 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	2052      	movs	r0, #82	; 0x52
 8000d26:	f7ff fe74 	bl	8000a12 <SD_SendCmd>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d117      	bne.n	8000d60 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000d30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d34:	68b8      	ldr	r0, [r7, #8]
 8000d36:	f7ff fdfb 	bl	8000930 <SD_RxDataBlock>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d00a      	beq.n	8000d56 <SD_disk_read+0xa6>
				buff += 512;
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000d46:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	603b      	str	r3, [r7, #0]
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d1ed      	bne.n	8000d30 <SD_disk_read+0x80>
 8000d54:	e000      	b.n	8000d58 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000d56:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000d58:	2100      	movs	r1, #0
 8000d5a:	204c      	movs	r0, #76	; 0x4c
 8000d5c:	f7ff fe59 	bl	8000a12 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000d60:	f7ff fd08 	bl	8000774 <DESELECT>
	SPI_RxByte();
 8000d64:	f7ff fd48 	bl	80007f8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	bf14      	ite	ne
 8000d6e:	2301      	movne	r3, #1
 8000d70:	2300      	moveq	r3, #0
 8000d72:	b2db      	uxtb	r3, r3
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	20000158 	.word	0x20000158

08000d84 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	4603      	mov	r3, r0
 8000d92:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d102      	bne.n	8000da0 <SD_disk_write+0x1c>
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d101      	bne.n	8000da4 <SD_disk_write+0x20>
 8000da0:	2304      	movs	r3, #4
 8000da2:	e06b      	b.n	8000e7c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000da4:	4b37      	ldr	r3, [pc, #220]	; (8000e84 <SD_disk_write+0x100>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <SD_disk_write+0x32>
 8000db2:	2303      	movs	r3, #3
 8000db4:	e062      	b.n	8000e7c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000db6:	4b33      	ldr	r3, [pc, #204]	; (8000e84 <SD_disk_write+0x100>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	f003 0304 	and.w	r3, r3, #4
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <SD_disk_write+0x44>
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	e059      	b.n	8000e7c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000dc8:	4b2f      	ldr	r3, [pc, #188]	; (8000e88 <SD_disk_write+0x104>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d102      	bne.n	8000dda <SD_disk_write+0x56>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	025b      	lsls	r3, r3, #9
 8000dd8:	607b      	str	r3, [r7, #4]

	SELECT();
 8000dda:	f7ff fcbd 	bl	8000758 <SELECT>

	if (count == 1)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d110      	bne.n	8000e06 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000de4:	6879      	ldr	r1, [r7, #4]
 8000de6:	2058      	movs	r0, #88	; 0x58
 8000de8:	f7ff fe13 	bl	8000a12 <SD_SendCmd>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d13a      	bne.n	8000e68 <SD_disk_write+0xe4>
 8000df2:	21fe      	movs	r1, #254	; 0xfe
 8000df4:	68b8      	ldr	r0, [r7, #8]
 8000df6:	f7ff fdc9 	bl	800098c <SD_TxDataBlock>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d033      	beq.n	8000e68 <SD_disk_write+0xe4>
			count = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	e030      	b.n	8000e68 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <SD_disk_write+0x104>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d007      	beq.n	8000e22 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000e12:	2100      	movs	r1, #0
 8000e14:	2077      	movs	r0, #119	; 0x77
 8000e16:	f7ff fdfc 	bl	8000a12 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000e1a:	6839      	ldr	r1, [r7, #0]
 8000e1c:	2057      	movs	r0, #87	; 0x57
 8000e1e:	f7ff fdf8 	bl	8000a12 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	2059      	movs	r0, #89	; 0x59
 8000e26:	f7ff fdf4 	bl	8000a12 <SD_SendCmd>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d11b      	bne.n	8000e68 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000e30:	21fc      	movs	r1, #252	; 0xfc
 8000e32:	68b8      	ldr	r0, [r7, #8]
 8000e34:	f7ff fdaa 	bl	800098c <SD_TxDataBlock>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d00a      	beq.n	8000e54 <SD_disk_write+0xd0>
				buff += 512;
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e44:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1ee      	bne.n	8000e30 <SD_disk_write+0xac>
 8000e52:	e000      	b.n	8000e56 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000e54:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000e56:	21fd      	movs	r1, #253	; 0xfd
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f7ff fd97 	bl	800098c <SD_TxDataBlock>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d101      	bne.n	8000e68 <SD_disk_write+0xe4>
			{
				count = 1;
 8000e64:	2301      	movs	r3, #1
 8000e66:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000e68:	f7ff fc84 	bl	8000774 <DESELECT>
	SPI_RxByte();
 8000e6c:	f7ff fcc4 	bl	80007f8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	bf14      	ite	ne
 8000e76:	2301      	movne	r3, #1
 8000e78:	2300      	moveq	r3, #0
 8000e7a:	b2db      	uxtb	r3, r3
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000158 	.word	0x20000158

08000e8c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b08b      	sub	sp, #44	; 0x2c
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	603a      	str	r2, [r7, #0]
 8000e96:	71fb      	strb	r3, [r7, #7]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <SD_disk_ioctl+0x1e>
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	e115      	b.n	80010d6 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000eb0:	79bb      	ldrb	r3, [r7, #6]
 8000eb2:	2b05      	cmp	r3, #5
 8000eb4:	d124      	bne.n	8000f00 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000eb6:	6a3b      	ldr	r3, [r7, #32]
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d012      	beq.n	8000ee4 <SD_disk_ioctl+0x58>
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	dc1a      	bgt.n	8000ef8 <SD_disk_ioctl+0x6c>
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d002      	beq.n	8000ecc <SD_disk_ioctl+0x40>
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d006      	beq.n	8000ed8 <SD_disk_ioctl+0x4c>
 8000eca:	e015      	b.n	8000ef8 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000ecc:	f7ff fd1a 	bl	8000904 <SD_PowerOff>
			res = RES_OK;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000ed6:	e0fc      	b.n	80010d2 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000ed8:	f7ff fcd2 	bl	8000880 <SD_PowerOn>
			res = RES_OK;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000ee2:	e0f6      	b.n	80010d2 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000ee4:	6a3b      	ldr	r3, [r7, #32]
 8000ee6:	1c5c      	adds	r4, r3, #1
 8000ee8:	f7ff fd18 	bl	800091c <SD_CheckPower>
 8000eec:	4603      	mov	r3, r0
 8000eee:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000ef6:	e0ec      	b.n	80010d2 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000ef8:	2304      	movs	r3, #4
 8000efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000efe:	e0e8      	b.n	80010d2 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000f00:	4b77      	ldr	r3, [pc, #476]	; (80010e0 <SD_disk_ioctl+0x254>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <SD_disk_ioctl+0x86>
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e0e1      	b.n	80010d6 <SD_disk_ioctl+0x24a>

		SELECT();
 8000f12:	f7ff fc21 	bl	8000758 <SELECT>

		switch (ctrl)
 8000f16:	79bb      	ldrb	r3, [r7, #6]
 8000f18:	2b0d      	cmp	r3, #13
 8000f1a:	f200 80cb 	bhi.w	80010b4 <SD_disk_ioctl+0x228>
 8000f1e:	a201      	add	r2, pc, #4	; (adr r2, 8000f24 <SD_disk_ioctl+0x98>)
 8000f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f24:	0800101f 	.word	0x0800101f
 8000f28:	08000f5d 	.word	0x08000f5d
 8000f2c:	0800100f 	.word	0x0800100f
 8000f30:	080010b5 	.word	0x080010b5
 8000f34:	080010b5 	.word	0x080010b5
 8000f38:	080010b5 	.word	0x080010b5
 8000f3c:	080010b5 	.word	0x080010b5
 8000f40:	080010b5 	.word	0x080010b5
 8000f44:	080010b5 	.word	0x080010b5
 8000f48:	080010b5 	.word	0x080010b5
 8000f4c:	080010b5 	.word	0x080010b5
 8000f50:	08001031 	.word	0x08001031
 8000f54:	08001055 	.word	0x08001055
 8000f58:	08001079 	.word	0x08001079
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2049      	movs	r0, #73	; 0x49
 8000f60:	f7ff fd57 	bl	8000a12 <SD_SendCmd>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f040 80a8 	bne.w	80010bc <SD_disk_ioctl+0x230>
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	2110      	movs	r1, #16
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fcdc 	bl	8000930 <SD_RxDataBlock>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 809e 	beq.w	80010bc <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000f80:	7b3b      	ldrb	r3, [r7, #12]
 8000f82:	099b      	lsrs	r3, r3, #6
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d10e      	bne.n	8000fa8 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000f8a:	7d7b      	ldrb	r3, [r7, #21]
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	7d3b      	ldrb	r3, [r7, #20]
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	4413      	add	r3, r2
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000f9e:	8bfb      	ldrh	r3, [r7, #30]
 8000fa0:	029a      	lsls	r2, r3, #10
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	e02e      	b.n	8001006 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000fa8:	7c7b      	ldrb	r3, [r7, #17]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	7dbb      	ldrb	r3, [r7, #22]
 8000fb2:	09db      	lsrs	r3, r3, #7
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	7d7b      	ldrb	r3, [r7, #21]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	f003 0306 	and.w	r3, r3, #6
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	4413      	add	r3, r2
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	3302      	adds	r3, #2
 8000fcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000fd0:	7d3b      	ldrb	r3, [r7, #20]
 8000fd2:	099b      	lsrs	r3, r3, #6
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	7cfb      	ldrb	r3, [r7, #19]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	4413      	add	r3, r2
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	7cbb      	ldrb	r3, [r7, #18]
 8000fe6:	029b      	lsls	r3, r3, #10
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	4413      	add	r3, r2
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000ff8:	8bfa      	ldrh	r2, [r7, #30]
 8000ffa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ffe:	3b09      	subs	r3, #9
 8001000:	409a      	lsls	r2, r3
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800100c:	e056      	b.n	80010bc <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001014:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800101c:	e055      	b.n	80010ca <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800101e:	f7ff fc15 	bl	800084c <SD_ReadyWait>
 8001022:	4603      	mov	r3, r0
 8001024:	2bff      	cmp	r3, #255	; 0xff
 8001026:	d14b      	bne.n	80010c0 <SD_disk_ioctl+0x234>
 8001028:	2300      	movs	r3, #0
 800102a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800102e:	e047      	b.n	80010c0 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001030:	2100      	movs	r1, #0
 8001032:	2049      	movs	r0, #73	; 0x49
 8001034:	f7ff fced 	bl	8000a12 <SD_SendCmd>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d142      	bne.n	80010c4 <SD_disk_ioctl+0x238>
 800103e:	2110      	movs	r1, #16
 8001040:	6a38      	ldr	r0, [r7, #32]
 8001042:	f7ff fc75 	bl	8000930 <SD_RxDataBlock>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d03b      	beq.n	80010c4 <SD_disk_ioctl+0x238>
 800104c:	2300      	movs	r3, #0
 800104e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001052:	e037      	b.n	80010c4 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001054:	2100      	movs	r1, #0
 8001056:	204a      	movs	r0, #74	; 0x4a
 8001058:	f7ff fcdb 	bl	8000a12 <SD_SendCmd>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d132      	bne.n	80010c8 <SD_disk_ioctl+0x23c>
 8001062:	2110      	movs	r1, #16
 8001064:	6a38      	ldr	r0, [r7, #32]
 8001066:	f7ff fc63 	bl	8000930 <SD_RxDataBlock>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d02b      	beq.n	80010c8 <SD_disk_ioctl+0x23c>
 8001070:	2300      	movs	r3, #0
 8001072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001076:	e027      	b.n	80010c8 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001078:	2100      	movs	r1, #0
 800107a:	207a      	movs	r0, #122	; 0x7a
 800107c:	f7ff fcc9 	bl	8000a12 <SD_SendCmd>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d116      	bne.n	80010b4 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001086:	2300      	movs	r3, #0
 8001088:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800108c:	e00b      	b.n	80010a6 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800108e:	6a3c      	ldr	r4, [r7, #32]
 8001090:	1c63      	adds	r3, r4, #1
 8001092:	623b      	str	r3, [r7, #32]
 8001094:	f7ff fbb0 	bl	80007f8 <SPI_RxByte>
 8001098:	4603      	mov	r3, r0
 800109a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800109c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010a0:	3301      	adds	r3, #1
 80010a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80010a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	d9ef      	bls.n	800108e <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80010b4:	2304      	movs	r3, #4
 80010b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010ba:	e006      	b.n	80010ca <SD_disk_ioctl+0x23e>
			break;
 80010bc:	bf00      	nop
 80010be:	e004      	b.n	80010ca <SD_disk_ioctl+0x23e>
			break;
 80010c0:	bf00      	nop
 80010c2:	e002      	b.n	80010ca <SD_disk_ioctl+0x23e>
			break;
 80010c4:	bf00      	nop
 80010c6:	e000      	b.n	80010ca <SD_disk_ioctl+0x23e>
			break;
 80010c8:	bf00      	nop
		}

		DESELECT();
 80010ca:	f7ff fb53 	bl	8000774 <DESELECT>
		SPI_RxByte();
 80010ce:	f7ff fb93 	bl	80007f8 <SPI_RxByte>
	}

	return res;
 80010d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	372c      	adds	r7, #44	; 0x2c
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd90      	pop	{r4, r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000000 	.word	0x20000000

080010e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e8:	f000 fa7a 	bl	80015e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ec:	f000 f884 	bl	80011f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f0:	f000 f912 	bl	8001318 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80010f4:	f00c fdc6 	bl	800dc84 <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 80010f8:	f006 faae 	bl	8007658 <MX_FATFS_Init>
  MX_SPI1_Init();
 80010fc:	f000 f8d6 	bl	80012ac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 8001100:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001104:	f000 face 	bl	80016a4 <HAL_Delay>
	f_mount(&fs, "", 0);
 8001108:	2200      	movs	r2, #0
 800110a:	4930      	ldr	r1, [pc, #192]	; (80011cc <main+0xe8>)
 800110c:	4830      	ldr	r0, [pc, #192]	; (80011d0 <main+0xec>)
 800110e:	f00b fa21 	bl	800c554 <f_mount>
	f_open(&fil, "write.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8001112:	2213      	movs	r2, #19
 8001114:	492f      	ldr	r1, [pc, #188]	; (80011d4 <main+0xf0>)
 8001116:	4830      	ldr	r0, [pc, #192]	; (80011d8 <main+0xf4>)
 8001118:	f00b fa66 	bl	800c5e8 <f_open>
	f_lseek(&fil, fil.fsize);
 800111c:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <main+0xf4>)
 800111e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	4619      	mov	r1, r3
 8001126:	482c      	ldr	r0, [pc, #176]	; (80011d8 <main+0xf4>)
 8001128:	f00c f8a8 	bl	800d27c <f_lseek>
	f_puts("Hello world\n", &fil);
 800112c:	492a      	ldr	r1, [pc, #168]	; (80011d8 <main+0xf4>)
 800112e:	482b      	ldr	r0, [pc, #172]	; (80011dc <main+0xf8>)
 8001130:	f00c fcac 	bl	800da8c <f_puts>
	f_close(&fil);
 8001134:	4828      	ldr	r0, [pc, #160]	; (80011d8 <main+0xf4>)
 8001136:	f00c f876 	bl	800d226 <f_close>

	f_getfree("", &fre_clust, &pfs);
 800113a:	4a29      	ldr	r2, [pc, #164]	; (80011e0 <main+0xfc>)
 800113c:	4929      	ldr	r1, [pc, #164]	; (80011e4 <main+0x100>)
 800113e:	4823      	ldr	r0, [pc, #140]	; (80011cc <main+0xe8>)
 8001140:	f00c fb8d 	bl	800d85e <f_getfree>
  totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001144:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <main+0xfc>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	3b02      	subs	r3, #2
 8001150:	4a23      	ldr	r2, [pc, #140]	; (80011e0 <main+0xfc>)
 8001152:	6812      	ldr	r2, [r2, #0]
 8001154:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001158:	7892      	ldrb	r2, [r2, #2]
 800115a:	fb02 f303 	mul.w	r3, r2, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fa60 	bl	8000624 <__aeabi_ui2d>
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <main+0x104>)
 800116a:	f7fe ffef 	bl	800014c <__aeabi_dmul>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	f7ff facf 	bl	8000718 <__aeabi_d2uiz>
 800117a:	4603      	mov	r3, r0
 800117c:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <main+0x108>)
 800117e:	6013      	str	r3, [r2, #0]
  freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <main+0xfc>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001188:	789b      	ldrb	r3, [r3, #2]
 800118a:	461a      	mov	r2, r3
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <main+0x100>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	fb02 f303 	mul.w	r3, r2, r3
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fa45 	bl	8000624 <__aeabi_ui2d>
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <main+0x104>)
 80011a0:	f7fe ffd4 	bl	800014c <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f7ff fab4 	bl	8000718 <__aeabi_d2uiz>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <main+0x10c>)
 80011b4:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80011b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ba:	480e      	ldr	r0, [pc, #56]	; (80011f4 <main+0x110>)
 80011bc:	f000 fdb6 	bl	8001d2c <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80011c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011c4:	f000 fa6e 	bl	80016a4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80011c8:	e7f5      	b.n	80011b6 <main+0xd2>
 80011ca:	bf00      	nop
 80011cc:	0800e5c0 	.word	0x0800e5c0
 80011d0:	200001c4 	.word	0x200001c4
 80011d4:	0800e5c4 	.word	0x0800e5c4
 80011d8:	200011f4 	.word	0x200011f4
 80011dc:	0800e5d0 	.word	0x0800e5d0
 80011e0:	2000015c 	.word	0x2000015c
 80011e4:	20000160 	.word	0x20000160
 80011e8:	3fe00000 	.word	0x3fe00000
 80011ec:	20000164 	.word	0x20000164
 80011f0:	20000168 	.word	0x20000168
 80011f4:	40011000 	.word	0x40011000

080011f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b094      	sub	sp, #80	; 0x50
 80011fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001202:	2228      	movs	r2, #40	; 0x28
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f00d f9c6 	bl	800e598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001228:	2301      	movs	r3, #1
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800122c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001236:	2301      	movs	r3, #1
 8001238:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123a:	2302      	movs	r3, #2
 800123c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800123e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001242:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001244:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001248:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800124e:	4618      	mov	r0, r3
 8001250:	f002 fa76 	bl	8003740 <HAL_RCC_OscConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800125a:	f000 f8bd 	bl	80013d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125e:	230f      	movs	r3, #15
 8001260:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001262:	2302      	movs	r3, #2
 8001264:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800126a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800126e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2102      	movs	r1, #2
 800127a:	4618      	mov	r0, r3
 800127c:	f002 fce2 	bl	8003c44 <HAL_RCC_ClockConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001286:	f000 f8a7 	bl	80013d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800128a:	2310      	movs	r3, #16
 800128c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	4618      	mov	r0, r3
 8001296:	f002 fe3b 	bl	8003f10 <HAL_RCCEx_PeriphCLKConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80012a0:	f000 f89a 	bl	80013d8 <Error_Handler>
  }
}
 80012a4:	bf00      	nop
 80012a6:	3750      	adds	r7, #80	; 0x50
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012b0:	4b17      	ldr	r3, [pc, #92]	; (8001310 <MX_SPI1_Init+0x64>)
 80012b2:	4a18      	ldr	r2, [pc, #96]	; (8001314 <MX_SPI1_Init+0x68>)
 80012b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <MX_SPI1_Init+0x64>)
 80012b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012be:	4b14      	ldr	r3, [pc, #80]	; (8001310 <MX_SPI1_Init+0x64>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <MX_SPI1_Init+0x64>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MX_SPI1_Init+0x64>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <MX_SPI1_Init+0x64>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <MX_SPI1_Init+0x64>)
 80012d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <MX_SPI1_Init+0x64>)
 80012e0:	2220      	movs	r2, #32
 80012e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012e4:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <MX_SPI1_Init+0x64>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <MX_SPI1_Init+0x64>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012f0:	4b07      	ldr	r3, [pc, #28]	; (8001310 <MX_SPI1_Init+0x64>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <MX_SPI1_Init+0x64>)
 80012f8:	220a      	movs	r2, #10
 80012fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <MX_SPI1_Init+0x64>)
 80012fe:	f002 febd 	bl	800407c <HAL_SPI_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001308:	f000 f866 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	2000016c 	.word	0x2000016c
 8001314:	40013000 	.word	0x40013000

08001318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131e:	f107 0310 	add.w	r3, r7, #16
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <MX_GPIO_Init+0xb4>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	4a26      	ldr	r2, [pc, #152]	; (80013cc <MX_GPIO_Init+0xb4>)
 8001332:	f043 0310 	orr.w	r3, r3, #16
 8001336:	6193      	str	r3, [r2, #24]
 8001338:	4b24      	ldr	r3, [pc, #144]	; (80013cc <MX_GPIO_Init+0xb4>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f003 0310 	and.w	r3, r3, #16
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001344:	4b21      	ldr	r3, [pc, #132]	; (80013cc <MX_GPIO_Init+0xb4>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	4a20      	ldr	r2, [pc, #128]	; (80013cc <MX_GPIO_Init+0xb4>)
 800134a:	f043 0320 	orr.w	r3, r3, #32
 800134e:	6193      	str	r3, [r2, #24]
 8001350:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <MX_GPIO_Init+0xb4>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f003 0320 	and.w	r3, r3, #32
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <MX_GPIO_Init+0xb4>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a1a      	ldr	r2, [pc, #104]	; (80013cc <MX_GPIO_Init+0xb4>)
 8001362:	f043 0304 	orr.w	r3, r3, #4
 8001366:	6193      	str	r3, [r2, #24]
 8001368:	4b18      	ldr	r3, [pc, #96]	; (80013cc <MX_GPIO_Init+0xb4>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800137a:	4815      	ldr	r0, [pc, #84]	; (80013d0 <MX_GPIO_Init+0xb8>)
 800137c:	f000 fcbe 	bl	8001cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2110      	movs	r1, #16
 8001384:	4813      	ldr	r0, [pc, #76]	; (80013d4 <MX_GPIO_Init+0xbc>)
 8001386:	f000 fcb9 	bl	8001cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800138a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	2301      	movs	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2302      	movs	r3, #2
 800139a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4619      	mov	r1, r3
 80013a2:	480b      	ldr	r0, [pc, #44]	; (80013d0 <MX_GPIO_Init+0xb8>)
 80013a4:	f000 fb26 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013a8:	2310      	movs	r3, #16
 80013aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2302      	movs	r3, #2
 80013b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	4619      	mov	r1, r3
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_GPIO_Init+0xbc>)
 80013c0:	f000 fb18 	bl	80019f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013c4:	bf00      	nop
 80013c6:	3720      	adds	r7, #32
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40011000 	.word	0x40011000
 80013d4:	40010800 	.word	0x40010800

080013d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013dc:	b672      	cpsid	i
}
 80013de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <Error_Handler+0x8>
	...

080013e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <HAL_MspInit+0x40>)
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	4a0d      	ldr	r2, [pc, #52]	; (8001424 <HAL_MspInit+0x40>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6193      	str	r3, [r2, #24]
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <HAL_MspInit+0x40>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <HAL_MspInit+0x40>)
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	4a07      	ldr	r2, [pc, #28]	; (8001424 <HAL_MspInit+0x40>)
 8001408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140c:	61d3      	str	r3, [r2, #28]
 800140e:	4b05      	ldr	r3, [pc, #20]	; (8001424 <HAL_MspInit+0x40>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	40021000 	.word	0x40021000

08001428 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a1f      	ldr	r2, [pc, #124]	; (80014c0 <HAL_SPI_MspInit+0x98>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d137      	bne.n	80014b8 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001448:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <HAL_SPI_MspInit+0x9c>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a1d      	ldr	r2, [pc, #116]	; (80014c4 <HAL_SPI_MspInit+0x9c>)
 800144e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <HAL_SPI_MspInit+0x9c>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <HAL_SPI_MspInit+0x9c>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a17      	ldr	r2, [pc, #92]	; (80014c4 <HAL_SPI_MspInit+0x9c>)
 8001466:	f043 0304 	orr.w	r3, r3, #4
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <HAL_SPI_MspInit+0x9c>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001478:	23a0      	movs	r3, #160	; 0xa0
 800147a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001480:	2303      	movs	r3, #3
 8001482:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	4619      	mov	r1, r3
 800148a:	480f      	ldr	r0, [pc, #60]	; (80014c8 <HAL_SPI_MspInit+0xa0>)
 800148c:	f000 fab2 	bl	80019f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001490:	2340      	movs	r3, #64	; 0x40
 8001492:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	4619      	mov	r1, r3
 80014a2:	4809      	ldr	r0, [pc, #36]	; (80014c8 <HAL_SPI_MspInit+0xa0>)
 80014a4:	f000 faa6 	bl	80019f4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2100      	movs	r1, #0
 80014ac:	2023      	movs	r0, #35	; 0x23
 80014ae:	f000 f9f4 	bl	800189a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80014b2:	2023      	movs	r0, #35	; 0x23
 80014b4:	f000 fa0d 	bl	80018d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014b8:	bf00      	nop
 80014ba:	3720      	adds	r7, #32
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40013000 	.word	0x40013000
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40010800 	.word	0x40010800

080014cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <NMI_Handler+0x4>

080014d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <HardFault_Handler+0x4>

080014d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <MemManage_Handler+0x4>

080014de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <BusFault_Handler+0x4>

080014e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <UsageFault_Handler+0x4>

080014ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr

080014f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr

08001502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
	...

08001510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
if(Timer1 > 0)
 8001514:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <SysTick_Handler+0x34>)
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <SysTick_Handler+0x18>
	Timer1--;
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <SysTick_Handler+0x34>)
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	3b01      	subs	r3, #1
 8001522:	b29a      	uxth	r2, r3
 8001524:	4b07      	ldr	r3, [pc, #28]	; (8001544 <SysTick_Handler+0x34>)
 8001526:	801a      	strh	r2, [r3, #0]
if(Timer2 > 0)
 8001528:	4b07      	ldr	r3, [pc, #28]	; (8001548 <SysTick_Handler+0x38>)
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d005      	beq.n	800153c <SysTick_Handler+0x2c>
	Timer2--;
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <SysTick_Handler+0x38>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	3b01      	subs	r3, #1
 8001536:	b29a      	uxth	r2, r3
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <SysTick_Handler+0x38>)
 800153a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153c:	f000 f896 	bl	800166c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000154 	.word	0x20000154
 8001548:	20000156 	.word	0x20000156

0800154c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001552:	f000 fd35 	bl	8001fc0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20002920 	.word	0x20002920

08001560 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001566:	f000 fd2b 	bl	8001fc0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20002920 	.word	0x20002920

08001574 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001578:	4802      	ldr	r0, [pc, #8]	; (8001584 <SPI1_IRQHandler+0x10>)
 800157a:	f003 f8e1 	bl	8004740 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2000016c 	.word	0x2000016c

08001588 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001594:	480c      	ldr	r0, [pc, #48]	; (80015c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001596:	490d      	ldr	r1, [pc, #52]	; (80015cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001598:	4a0d      	ldr	r2, [pc, #52]	; (80015d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800159c:	e002      	b.n	80015a4 <LoopCopyDataInit>

0800159e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a2:	3304      	adds	r3, #4

080015a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a8:	d3f9      	bcc.n	800159e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015ac:	4c0a      	ldr	r4, [pc, #40]	; (80015d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b0:	e001      	b.n	80015b6 <LoopFillZerobss>

080015b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b4:	3204      	adds	r2, #4

080015b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b8:	d3fb      	bcc.n	80015b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015ba:	f7ff ffe5 	bl	8001588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015be:	f00c ffc7 	bl	800e550 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015c2:	f7ff fd8f 	bl	80010e4 <main>
  bx lr
 80015c6:	4770      	bx	lr
  ldr r0, =_sdata
 80015c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015cc:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 80015d0:	0800ec30 	.word	0x0800ec30
  ldr r2, =_sbss
 80015d4:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 80015d8:	20002e7c 	.word	0x20002e7c

080015dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015dc:	e7fe      	b.n	80015dc <ADC1_2_IRQHandler>
	...

080015e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <HAL_Init+0x28>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a07      	ldr	r2, [pc, #28]	; (8001608 <HAL_Init+0x28>)
 80015ea:	f043 0310 	orr.w	r3, r3, #16
 80015ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f0:	2003      	movs	r0, #3
 80015f2:	f000 f947 	bl	8001884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f6:	2000      	movs	r0, #0
 80015f8:	f000 f808 	bl	800160c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015fc:	f7ff fef2 	bl	80013e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40022000 	.word	0x40022000

0800160c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_InitTick+0x54>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_InitTick+0x58>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001622:	fbb3 f3f1 	udiv	r3, r3, r1
 8001626:	fbb2 f3f3 	udiv	r3, r2, r3
 800162a:	4618      	mov	r0, r3
 800162c:	f000 f95f 	bl	80018ee <HAL_SYSTICK_Config>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e00e      	b.n	8001658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b0f      	cmp	r3, #15
 800163e:	d80a      	bhi.n	8001656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001640:	2200      	movs	r2, #0
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001648:	f000 f927 	bl	800189a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800164c:	4a06      	ldr	r2, [pc, #24]	; (8001668 <HAL_InitTick+0x5c>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	e000      	b.n	8001658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
}
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000004 	.word	0x20000004
 8001664:	2000000c 	.word	0x2000000c
 8001668:	20000008 	.word	0x20000008

0800166c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <HAL_IncTick+0x1c>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	4b05      	ldr	r3, [pc, #20]	; (800168c <HAL_IncTick+0x20>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4413      	add	r3, r2
 800167c:	4a03      	ldr	r2, [pc, #12]	; (800168c <HAL_IncTick+0x20>)
 800167e:	6013      	str	r3, [r2, #0]
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	2000000c 	.word	0x2000000c
 800168c:	20002220 	.word	0x20002220

08001690 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return uwTick;
 8001694:	4b02      	ldr	r3, [pc, #8]	; (80016a0 <HAL_GetTick+0x10>)
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	20002220 	.word	0x20002220

080016a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016ac:	f7ff fff0 	bl	8001690 <HAL_GetTick>
 80016b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016bc:	d005      	beq.n	80016ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016be:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <HAL_Delay+0x44>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	461a      	mov	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4413      	add	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ca:	bf00      	nop
 80016cc:	f7ff ffe0 	bl	8001690 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d8f7      	bhi.n	80016cc <HAL_Delay+0x28>
  {
  }
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	2000000c 	.word	0x2000000c

080016ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001708:	4013      	ands	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800171c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171e:	4a04      	ldr	r2, [pc, #16]	; (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	60d3      	str	r3, [r2, #12]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <__NVIC_GetPriorityGrouping+0x18>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	f003 0307 	and.w	r3, r3, #7
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	db0b      	blt.n	800177a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	f003 021f 	and.w	r2, r3, #31
 8001768:	4906      	ldr	r1, [pc, #24]	; (8001784 <__NVIC_EnableIRQ+0x34>)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	2001      	movs	r0, #1
 8001772:	fa00 f202 	lsl.w	r2, r0, r2
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	e000e100 	.word	0xe000e100

08001788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	2b00      	cmp	r3, #0
 800179a:	db0a      	blt.n	80017b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	490c      	ldr	r1, [pc, #48]	; (80017d4 <__NVIC_SetPriority+0x4c>)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	0112      	lsls	r2, r2, #4
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	440b      	add	r3, r1
 80017ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b0:	e00a      	b.n	80017c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4908      	ldr	r1, [pc, #32]	; (80017d8 <__NVIC_SetPriority+0x50>)
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	3b04      	subs	r3, #4
 80017c0:	0112      	lsls	r2, r2, #4
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	440b      	add	r3, r1
 80017c6:	761a      	strb	r2, [r3, #24]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000e100 	.word	0xe000e100
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b089      	sub	sp, #36	; 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f1c3 0307 	rsb	r3, r3, #7
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	bf28      	it	cs
 80017fa:	2304      	movcs	r3, #4
 80017fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3304      	adds	r3, #4
 8001802:	2b06      	cmp	r3, #6
 8001804:	d902      	bls.n	800180c <NVIC_EncodePriority+0x30>
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3b03      	subs	r3, #3
 800180a:	e000      	b.n	800180e <NVIC_EncodePriority+0x32>
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43da      	mvns	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	401a      	ands	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001824:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	43d9      	mvns	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	4313      	orrs	r3, r2
         );
}
 8001836:	4618      	mov	r0, r3
 8001838:	3724      	adds	r7, #36	; 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001850:	d301      	bcc.n	8001856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001852:	2301      	movs	r3, #1
 8001854:	e00f      	b.n	8001876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001856:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <SysTick_Config+0x40>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185e:	210f      	movs	r1, #15
 8001860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001864:	f7ff ff90 	bl	8001788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <SysTick_Config+0x40>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186e:	4b04      	ldr	r3, [pc, #16]	; (8001880 <SysTick_Config+0x40>)
 8001870:	2207      	movs	r2, #7
 8001872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	e000e010 	.word	0xe000e010

08001884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff2d 	bl	80016ec <__NVIC_SetPriorityGrouping>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4603      	mov	r3, r0
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
 80018a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ac:	f7ff ff42 	bl	8001734 <__NVIC_GetPriorityGrouping>
 80018b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	6978      	ldr	r0, [r7, #20]
 80018b8:	f7ff ff90 	bl	80017dc <NVIC_EncodePriority>
 80018bc:	4602      	mov	r2, r0
 80018be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff5f 	bl	8001788 <__NVIC_SetPriority>
}
 80018ca:	bf00      	nop
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff35 	bl	8001750 <__NVIC_EnableIRQ>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffa2 	bl	8001840 <SysTick_Config>
 80018fc:	4603      	mov	r3, r0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800191a:	2b02      	cmp	r3, #2
 800191c:	d005      	beq.n	800192a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2204      	movs	r2, #4
 8001922:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
 8001928:	e051      	b.n	80019ce <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 020e 	bic.w	r2, r2, #14
 8001938:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 0201 	bic.w	r2, r2, #1
 8001948:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a22      	ldr	r2, [pc, #136]	; (80019d8 <HAL_DMA_Abort_IT+0xd0>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d029      	beq.n	80019a8 <HAL_DMA_Abort_IT+0xa0>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a20      	ldr	r2, [pc, #128]	; (80019dc <HAL_DMA_Abort_IT+0xd4>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d022      	beq.n	80019a4 <HAL_DMA_Abort_IT+0x9c>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a1f      	ldr	r2, [pc, #124]	; (80019e0 <HAL_DMA_Abort_IT+0xd8>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d01a      	beq.n	800199e <HAL_DMA_Abort_IT+0x96>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a1d      	ldr	r2, [pc, #116]	; (80019e4 <HAL_DMA_Abort_IT+0xdc>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d012      	beq.n	8001998 <HAL_DMA_Abort_IT+0x90>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a1c      	ldr	r2, [pc, #112]	; (80019e8 <HAL_DMA_Abort_IT+0xe0>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d00a      	beq.n	8001992 <HAL_DMA_Abort_IT+0x8a>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a1a      	ldr	r2, [pc, #104]	; (80019ec <HAL_DMA_Abort_IT+0xe4>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d102      	bne.n	800198c <HAL_DMA_Abort_IT+0x84>
 8001986:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800198a:	e00e      	b.n	80019aa <HAL_DMA_Abort_IT+0xa2>
 800198c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001990:	e00b      	b.n	80019aa <HAL_DMA_Abort_IT+0xa2>
 8001992:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001996:	e008      	b.n	80019aa <HAL_DMA_Abort_IT+0xa2>
 8001998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800199c:	e005      	b.n	80019aa <HAL_DMA_Abort_IT+0xa2>
 800199e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019a2:	e002      	b.n	80019aa <HAL_DMA_Abort_IT+0xa2>
 80019a4:	2310      	movs	r3, #16
 80019a6:	e000      	b.n	80019aa <HAL_DMA_Abort_IT+0xa2>
 80019a8:	2301      	movs	r3, #1
 80019aa:	4a11      	ldr	r2, [pc, #68]	; (80019f0 <HAL_DMA_Abort_IT+0xe8>)
 80019ac:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	4798      	blx	r3
    } 
  }
  return status;
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40020008 	.word	0x40020008
 80019dc:	4002001c 	.word	0x4002001c
 80019e0:	40020030 	.word	0x40020030
 80019e4:	40020044 	.word	0x40020044
 80019e8:	40020058 	.word	0x40020058
 80019ec:	4002006c 	.word	0x4002006c
 80019f0:	40020000 	.word	0x40020000

080019f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b08b      	sub	sp, #44	; 0x2c
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019fe:	2300      	movs	r3, #0
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a02:	2300      	movs	r3, #0
 8001a04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a06:	e169      	b.n	8001cdc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	f040 8158 	bne.w	8001cd6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	4a9a      	ldr	r2, [pc, #616]	; (8001c94 <HAL_GPIO_Init+0x2a0>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d05e      	beq.n	8001aee <HAL_GPIO_Init+0xfa>
 8001a30:	4a98      	ldr	r2, [pc, #608]	; (8001c94 <HAL_GPIO_Init+0x2a0>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d875      	bhi.n	8001b22 <HAL_GPIO_Init+0x12e>
 8001a36:	4a98      	ldr	r2, [pc, #608]	; (8001c98 <HAL_GPIO_Init+0x2a4>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d058      	beq.n	8001aee <HAL_GPIO_Init+0xfa>
 8001a3c:	4a96      	ldr	r2, [pc, #600]	; (8001c98 <HAL_GPIO_Init+0x2a4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d86f      	bhi.n	8001b22 <HAL_GPIO_Init+0x12e>
 8001a42:	4a96      	ldr	r2, [pc, #600]	; (8001c9c <HAL_GPIO_Init+0x2a8>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d052      	beq.n	8001aee <HAL_GPIO_Init+0xfa>
 8001a48:	4a94      	ldr	r2, [pc, #592]	; (8001c9c <HAL_GPIO_Init+0x2a8>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d869      	bhi.n	8001b22 <HAL_GPIO_Init+0x12e>
 8001a4e:	4a94      	ldr	r2, [pc, #592]	; (8001ca0 <HAL_GPIO_Init+0x2ac>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d04c      	beq.n	8001aee <HAL_GPIO_Init+0xfa>
 8001a54:	4a92      	ldr	r2, [pc, #584]	; (8001ca0 <HAL_GPIO_Init+0x2ac>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d863      	bhi.n	8001b22 <HAL_GPIO_Init+0x12e>
 8001a5a:	4a92      	ldr	r2, [pc, #584]	; (8001ca4 <HAL_GPIO_Init+0x2b0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d046      	beq.n	8001aee <HAL_GPIO_Init+0xfa>
 8001a60:	4a90      	ldr	r2, [pc, #576]	; (8001ca4 <HAL_GPIO_Init+0x2b0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d85d      	bhi.n	8001b22 <HAL_GPIO_Init+0x12e>
 8001a66:	2b12      	cmp	r3, #18
 8001a68:	d82a      	bhi.n	8001ac0 <HAL_GPIO_Init+0xcc>
 8001a6a:	2b12      	cmp	r3, #18
 8001a6c:	d859      	bhi.n	8001b22 <HAL_GPIO_Init+0x12e>
 8001a6e:	a201      	add	r2, pc, #4	; (adr r2, 8001a74 <HAL_GPIO_Init+0x80>)
 8001a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a74:	08001aef 	.word	0x08001aef
 8001a78:	08001ac9 	.word	0x08001ac9
 8001a7c:	08001adb 	.word	0x08001adb
 8001a80:	08001b1d 	.word	0x08001b1d
 8001a84:	08001b23 	.word	0x08001b23
 8001a88:	08001b23 	.word	0x08001b23
 8001a8c:	08001b23 	.word	0x08001b23
 8001a90:	08001b23 	.word	0x08001b23
 8001a94:	08001b23 	.word	0x08001b23
 8001a98:	08001b23 	.word	0x08001b23
 8001a9c:	08001b23 	.word	0x08001b23
 8001aa0:	08001b23 	.word	0x08001b23
 8001aa4:	08001b23 	.word	0x08001b23
 8001aa8:	08001b23 	.word	0x08001b23
 8001aac:	08001b23 	.word	0x08001b23
 8001ab0:	08001b23 	.word	0x08001b23
 8001ab4:	08001b23 	.word	0x08001b23
 8001ab8:	08001ad1 	.word	0x08001ad1
 8001abc:	08001ae5 	.word	0x08001ae5
 8001ac0:	4a79      	ldr	r2, [pc, #484]	; (8001ca8 <HAL_GPIO_Init+0x2b4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d013      	beq.n	8001aee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ac6:	e02c      	b.n	8001b22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	623b      	str	r3, [r7, #32]
          break;
 8001ace:	e029      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	623b      	str	r3, [r7, #32]
          break;
 8001ad8:	e024      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	3308      	adds	r3, #8
 8001ae0:	623b      	str	r3, [r7, #32]
          break;
 8001ae2:	e01f      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	330c      	adds	r3, #12
 8001aea:	623b      	str	r3, [r7, #32]
          break;
 8001aec:	e01a      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d102      	bne.n	8001afc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001af6:	2304      	movs	r3, #4
 8001af8:	623b      	str	r3, [r7, #32]
          break;
 8001afa:	e013      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d105      	bne.n	8001b10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b04:	2308      	movs	r3, #8
 8001b06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69fa      	ldr	r2, [r7, #28]
 8001b0c:	611a      	str	r2, [r3, #16]
          break;
 8001b0e:	e009      	b.n	8001b24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b10:	2308      	movs	r3, #8
 8001b12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69fa      	ldr	r2, [r7, #28]
 8001b18:	615a      	str	r2, [r3, #20]
          break;
 8001b1a:	e003      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	623b      	str	r3, [r7, #32]
          break;
 8001b20:	e000      	b.n	8001b24 <HAL_GPIO_Init+0x130>
          break;
 8001b22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	2bff      	cmp	r3, #255	; 0xff
 8001b28:	d801      	bhi.n	8001b2e <HAL_GPIO_Init+0x13a>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	e001      	b.n	8001b32 <HAL_GPIO_Init+0x13e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3304      	adds	r3, #4
 8001b32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	2bff      	cmp	r3, #255	; 0xff
 8001b38:	d802      	bhi.n	8001b40 <HAL_GPIO_Init+0x14c>
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	e002      	b.n	8001b46 <HAL_GPIO_Init+0x152>
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	3b08      	subs	r3, #8
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	210f      	movs	r1, #15
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	fa01 f303 	lsl.w	r3, r1, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	401a      	ands	r2, r3
 8001b58:	6a39      	ldr	r1, [r7, #32]
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b60:	431a      	orrs	r2, r3
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 80b1 	beq.w	8001cd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b74:	4b4d      	ldr	r3, [pc, #308]	; (8001cac <HAL_GPIO_Init+0x2b8>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	4a4c      	ldr	r2, [pc, #304]	; (8001cac <HAL_GPIO_Init+0x2b8>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6193      	str	r3, [r2, #24]
 8001b80:	4b4a      	ldr	r3, [pc, #296]	; (8001cac <HAL_GPIO_Init+0x2b8>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b8c:	4a48      	ldr	r2, [pc, #288]	; (8001cb0 <HAL_GPIO_Init+0x2bc>)
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	089b      	lsrs	r3, r3, #2
 8001b92:	3302      	adds	r3, #2
 8001b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	220f      	movs	r2, #15
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	4013      	ands	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a40      	ldr	r2, [pc, #256]	; (8001cb4 <HAL_GPIO_Init+0x2c0>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d013      	beq.n	8001be0 <HAL_GPIO_Init+0x1ec>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a3f      	ldr	r2, [pc, #252]	; (8001cb8 <HAL_GPIO_Init+0x2c4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d00d      	beq.n	8001bdc <HAL_GPIO_Init+0x1e8>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a3e      	ldr	r2, [pc, #248]	; (8001cbc <HAL_GPIO_Init+0x2c8>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d007      	beq.n	8001bd8 <HAL_GPIO_Init+0x1e4>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a3d      	ldr	r2, [pc, #244]	; (8001cc0 <HAL_GPIO_Init+0x2cc>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d101      	bne.n	8001bd4 <HAL_GPIO_Init+0x1e0>
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e006      	b.n	8001be2 <HAL_GPIO_Init+0x1ee>
 8001bd4:	2304      	movs	r3, #4
 8001bd6:	e004      	b.n	8001be2 <HAL_GPIO_Init+0x1ee>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	e002      	b.n	8001be2 <HAL_GPIO_Init+0x1ee>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <HAL_GPIO_Init+0x1ee>
 8001be0:	2300      	movs	r3, #0
 8001be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be4:	f002 0203 	and.w	r2, r2, #3
 8001be8:	0092      	lsls	r2, r2, #2
 8001bea:	4093      	lsls	r3, r2
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bf2:	492f      	ldr	r1, [pc, #188]	; (8001cb0 <HAL_GPIO_Init+0x2bc>)
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	089b      	lsrs	r3, r3, #2
 8001bf8:	3302      	adds	r3, #2
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d006      	beq.n	8001c1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c0c:	4b2d      	ldr	r3, [pc, #180]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	492c      	ldr	r1, [pc, #176]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
 8001c18:	e006      	b.n	8001c28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c1a:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	4928      	ldr	r1, [pc, #160]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d006      	beq.n	8001c42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c34:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	4922      	ldr	r1, [pc, #136]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
 8001c40:	e006      	b.n	8001c50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c42:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	491e      	ldr	r1, [pc, #120]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d006      	beq.n	8001c6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c5c:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	4918      	ldr	r1, [pc, #96]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	608b      	str	r3, [r1, #8]
 8001c68:	e006      	b.n	8001c78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c6a:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	4914      	ldr	r1, [pc, #80]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d021      	beq.n	8001cc8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	490e      	ldr	r1, [pc, #56]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	60cb      	str	r3, [r1, #12]
 8001c90:	e021      	b.n	8001cd6 <HAL_GPIO_Init+0x2e2>
 8001c92:	bf00      	nop
 8001c94:	10320000 	.word	0x10320000
 8001c98:	10310000 	.word	0x10310000
 8001c9c:	10220000 	.word	0x10220000
 8001ca0:	10210000 	.word	0x10210000
 8001ca4:	10120000 	.word	0x10120000
 8001ca8:	10110000 	.word	0x10110000
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40010000 	.word	0x40010000
 8001cb4:	40010800 	.word	0x40010800
 8001cb8:	40010c00 	.word	0x40010c00
 8001cbc:	40011000 	.word	0x40011000
 8001cc0:	40011400 	.word	0x40011400
 8001cc4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_GPIO_Init+0x304>)
 8001cca:	68da      	ldr	r2, [r3, #12]
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	4909      	ldr	r1, [pc, #36]	; (8001cf8 <HAL_GPIO_Init+0x304>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	3301      	adds	r3, #1
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f47f ae8e 	bne.w	8001a08 <HAL_GPIO_Init+0x14>
  }
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	372c      	adds	r7, #44	; 0x2c
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	40010400 	.word	0x40010400

08001cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	807b      	strh	r3, [r7, #2]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d0c:	787b      	ldrb	r3, [r7, #1]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d12:	887a      	ldrh	r2, [r7, #2]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d18:	e003      	b.n	8001d22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d1a:	887b      	ldrh	r3, [r7, #2]
 8001d1c:	041a      	lsls	r2, r3, #16
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	611a      	str	r2, [r3, #16]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d3e:	887a      	ldrh	r2, [r7, #2]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4013      	ands	r3, r2
 8001d44:	041a      	lsls	r2, r3, #16
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	43d9      	mvns	r1, r3
 8001d4a:	887b      	ldrh	r3, [r7, #2]
 8001d4c:	400b      	ands	r3, r1
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	611a      	str	r2, [r3, #16]
}
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr

08001d5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d60:	b08b      	sub	sp, #44	; 0x2c
 8001d62:	af06      	add	r7, sp, #24
 8001d64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e0fd      	b.n	8001f6c <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d106      	bne.n	8001d8a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f00c f91b 	bl	800dfc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f002 fea2 	bl	8004ae0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	603b      	str	r3, [r7, #0]
 8001da2:	687e      	ldr	r6, [r7, #4]
 8001da4:	466d      	mov	r5, sp
 8001da6:	f106 0410 	add.w	r4, r6, #16
 8001daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dae:	6823      	ldr	r3, [r4, #0]
 8001db0:	602b      	str	r3, [r5, #0]
 8001db2:	1d33      	adds	r3, r6, #4
 8001db4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001db6:	6838      	ldr	r0, [r7, #0]
 8001db8:	f002 fe6c 	bl	8004a94 <USB_CoreInit>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d005      	beq.n	8001dce <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e0ce      	b.n	8001f6c <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f002 fe9d 	bl	8004b14 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	73fb      	strb	r3, [r7, #15]
 8001dde:	e04c      	b.n	8001e7a <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	440b      	add	r3, r1
 8001df0:	3301      	adds	r3, #1
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	440b      	add	r3, r1
 8001e06:	7bfa      	ldrb	r2, [r7, #15]
 8001e08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e0a:	7bfa      	ldrb	r2, [r7, #15]
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	b298      	uxth	r0, r3
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	440b      	add	r3, r1
 8001e1c:	3336      	adds	r3, #54	; 0x36
 8001e1e:	4602      	mov	r2, r0
 8001e20:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	440b      	add	r3, r1
 8001e32:	3303      	adds	r3, #3
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e38:	7bfa      	ldrb	r2, [r7, #15]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	440b      	add	r3, r1
 8001e46:	3338      	adds	r3, #56	; 0x38
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e4c:	7bfa      	ldrb	r2, [r7, #15]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	440b      	add	r3, r1
 8001e5a:	333c      	adds	r3, #60	; 0x3c
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	440b      	add	r3, r1
 8001e6e:	3340      	adds	r3, #64	; 0x40
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	3301      	adds	r3, #1
 8001e78:	73fb      	strb	r3, [r7, #15]
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d3ad      	bcc.n	8001de0 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e84:	2300      	movs	r3, #0
 8001e86:	73fb      	strb	r3, [r7, #15]
 8001e88:	e044      	b.n	8001f14 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e8a:	7bfa      	ldrb	r2, [r7, #15]
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	440b      	add	r3, r1
 8001e98:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ea0:	7bfa      	ldrb	r2, [r7, #15]
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	440b      	add	r3, r1
 8001eae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eb2:	7bfa      	ldrb	r2, [r7, #15]
 8001eb4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001eb6:	7bfa      	ldrb	r2, [r7, #15]
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	440b      	add	r3, r1
 8001ec4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ecc:	7bfa      	ldrb	r2, [r7, #15]
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	440b      	add	r3, r1
 8001eda:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ee2:	7bfa      	ldrb	r2, [r7, #15]
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	440b      	add	r3, r1
 8001ef0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ef8:	7bfa      	ldrb	r2, [r7, #15]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	440b      	add	r3, r1
 8001f06:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	3301      	adds	r3, #1
 8001f12:	73fb      	strb	r3, [r7, #15]
 8001f14:	7bfa      	ldrb	r2, [r7, #15]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d3b5      	bcc.n	8001e8a <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	687e      	ldr	r6, [r7, #4]
 8001f26:	466d      	mov	r5, sp
 8001f28:	f106 0410 	add.w	r4, r6, #16
 8001f2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f30:	6823      	ldr	r3, [r4, #0]
 8001f32:	602b      	str	r3, [r5, #0]
 8001f34:	1d33      	adds	r3, r6, #4
 8001f36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f38:	6838      	ldr	r0, [r7, #0]
 8001f3a:	f002 fdf7 	bl	8004b2c <USB_DevInit>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2202      	movs	r2, #2
 8001f48:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e00d      	b.n	8001f6c <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f005 fabf 	bl	80074e8 <USB_DevDisconnect>

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f74 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d101      	bne.n	8001f8a <HAL_PCD_Start+0x16>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e016      	b.n	8001fb8 <HAL_PCD_Start+0x44>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f002 fd8c 	bl	8004ab4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f00c fa9f 	bl	800e4e2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f005 fa93 	bl	80074d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f005 fa95 	bl	80074fc <USB_ReadInterrupts>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fdc:	d102      	bne.n	8001fe4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 fb8c 	bl	80026fc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f005 fa87 	bl	80074fc <USB_ReadInterrupts>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff8:	d112      	bne.n	8002020 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002002:	b29a      	uxth	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800200c:	b292      	uxth	r2, r2
 800200e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f00c f857 	bl	800e0c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002018:	2100      	movs	r1, #0
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f923 	bl	8002266 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f005 fa69 	bl	80074fc <USB_ReadInterrupts>
 800202a:	4603      	mov	r3, r0
 800202c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002030:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002034:	d10b      	bne.n	800204e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800203e:	b29a      	uxth	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002048:	b292      	uxth	r2, r2
 800204a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f005 fa52 	bl	80074fc <USB_ReadInterrupts>
 8002058:	4603      	mov	r3, r0
 800205a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800205e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002062:	d10b      	bne.n	800207c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800206c:	b29a      	uxth	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002076:	b292      	uxth	r2, r2
 8002078:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f005 fa3b 	bl	80074fc <USB_ReadInterrupts>
 8002086:	4603      	mov	r3, r0
 8002088:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800208c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002090:	d126      	bne.n	80020e0 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800209a:	b29a      	uxth	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0204 	bic.w	r2, r2, #4
 80020a4:	b292      	uxth	r2, r2
 80020a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0208 	bic.w	r2, r2, #8
 80020bc:	b292      	uxth	r2, r2
 80020be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f00c f838 	bl	800e138 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020da:	b292      	uxth	r2, r2
 80020dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f005 fa09 	bl	80074fc <USB_ReadInterrupts>
 80020ea:	4603      	mov	r3, r0
 80020ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020f4:	f040 8082 	bne.w	80021fc <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80020f8:	2300      	movs	r3, #0
 80020fa:	77fb      	strb	r3, [r7, #31]
 80020fc:	e010      	b.n	8002120 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	7ffb      	ldrb	r3, [r7, #31]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	441a      	add	r2, r3
 800210a:	7ffb      	ldrb	r3, [r7, #31]
 800210c:	8812      	ldrh	r2, [r2, #0]
 800210e:	b292      	uxth	r2, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	3320      	adds	r3, #32
 8002114:	443b      	add	r3, r7
 8002116:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800211a:	7ffb      	ldrb	r3, [r7, #31]
 800211c:	3301      	adds	r3, #1
 800211e:	77fb      	strb	r3, [r7, #31]
 8002120:	7ffb      	ldrb	r3, [r7, #31]
 8002122:	2b07      	cmp	r3, #7
 8002124:	d9eb      	bls.n	80020fe <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800212e:	b29a      	uxth	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 0201 	orr.w	r2, r2, #1
 8002138:	b292      	uxth	r2, r2
 800213a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002146:	b29a      	uxth	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0201 	bic.w	r2, r2, #1
 8002150:	b292      	uxth	r2, r2
 8002152:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002156:	bf00      	nop
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002160:	b29b      	uxth	r3, r3
 8002162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f6      	beq.n	8002158 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002172:	b29a      	uxth	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800217c:	b292      	uxth	r2, r2
 800217e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002182:	2300      	movs	r3, #0
 8002184:	77fb      	strb	r3, [r7, #31]
 8002186:	e00f      	b.n	80021a8 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002188:	7ffb      	ldrb	r3, [r7, #31]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	4611      	mov	r1, r2
 8002190:	7ffa      	ldrb	r2, [r7, #31]
 8002192:	0092      	lsls	r2, r2, #2
 8002194:	440a      	add	r2, r1
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	3320      	adds	r3, #32
 800219a:	443b      	add	r3, r7
 800219c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80021a0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80021a2:	7ffb      	ldrb	r3, [r7, #31]
 80021a4:	3301      	adds	r3, #1
 80021a6:	77fb      	strb	r3, [r7, #31]
 80021a8:	7ffb      	ldrb	r3, [r7, #31]
 80021aa:	2b07      	cmp	r3, #7
 80021ac:	d9ec      	bls.n	8002188 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f042 0208 	orr.w	r2, r2, #8
 80021c0:	b292      	uxth	r2, r2
 80021c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021d8:	b292      	uxth	r2, r2
 80021da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f042 0204 	orr.w	r2, r2, #4
 80021f0:	b292      	uxth	r2, r2
 80021f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f00b ff84 	bl	800e104 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f005 f97b 	bl	80074fc <USB_ReadInterrupts>
 8002206:	4603      	mov	r3, r0
 8002208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800220c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002210:	d10e      	bne.n	8002230 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800221a:	b29a      	uxth	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002224:	b292      	uxth	r2, r2
 8002226:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f00b ff3d 	bl	800e0aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f005 f961 	bl	80074fc <USB_ReadInterrupts>
 800223a:	4603      	mov	r3, r0
 800223c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002244:	d10b      	bne.n	800225e <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800224e:	b29a      	uxth	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002258:	b292      	uxth	r2, r2
 800225a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800225e:	bf00      	nop
 8002260:	3720      	adds	r7, #32
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	460b      	mov	r3, r1
 8002270:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_PCD_SetAddress+0x1a>
 800227c:	2302      	movs	r3, #2
 800227e:	e013      	b.n	80022a8 <HAL_PCD_SetAddress+0x42>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	78fa      	ldrb	r2, [r7, #3]
 800228c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	78fa      	ldrb	r2, [r7, #3]
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f005 f908 	bl	80074ae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	4608      	mov	r0, r1
 80022ba:	4611      	mov	r1, r2
 80022bc:	461a      	mov	r2, r3
 80022be:	4603      	mov	r3, r0
 80022c0:	70fb      	strb	r3, [r7, #3]
 80022c2:	460b      	mov	r3, r1
 80022c4:	803b      	strh	r3, [r7, #0]
 80022c6:	4613      	mov	r3, r2
 80022c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	da0e      	bge.n	80022f4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2201      	movs	r2, #1
 80022f0:	705a      	strb	r2, [r3, #1]
 80022f2:	e00e      	b.n	8002312 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	f003 0207 	and.w	r2, r3, #7
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	b2da      	uxtb	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800231e:	883a      	ldrh	r2, [r7, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	78ba      	ldrb	r2, [r7, #2]
 8002328:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	785b      	ldrb	r3, [r3, #1]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d004      	beq.n	800233c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800233c:	78bb      	ldrb	r3, [r7, #2]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d102      	bne.n	8002348 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_PCD_EP_Open+0xa6>
 8002352:	2302      	movs	r3, #2
 8002354:	e00e      	b.n	8002374 <HAL_PCD_EP_Open+0xc4>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68f9      	ldr	r1, [r7, #12]
 8002364:	4618      	mov	r0, r3
 8002366:	f002 fc17 	bl	8004b98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002372:	7afb      	ldrb	r3, [r7, #11]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002388:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800238c:	2b00      	cmp	r3, #0
 800238e:	da0e      	bge.n	80023ae <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002390:	78fb      	ldrb	r3, [r7, #3]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	4413      	add	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2201      	movs	r2, #1
 80023aa:	705a      	strb	r2, [r3, #1]
 80023ac:	e00e      	b.n	80023cc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	f003 0207 	and.w	r2, r3, #7
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	4413      	add	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_PCD_EP_Close+0x6a>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e00e      	b.n	8002404 <HAL_PCD_EP_Close+0x88>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68f9      	ldr	r1, [r7, #12]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f002 ff39 	bl	800526c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	460b      	mov	r3, r1
 800241a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800241c:	7afb      	ldrb	r3, [r7, #11]
 800241e:	f003 0207 	and.w	r2, r3, #7
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4413      	add	r3, r2
 8002432:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2200      	movs	r2, #0
 8002444:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2200      	movs	r2, #0
 800244a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800244c:	7afb      	ldrb	r3, [r7, #11]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	b2da      	uxtb	r2, r3
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002458:	7afb      	ldrb	r3, [r7, #11]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	2b00      	cmp	r3, #0
 8002460:	d106      	bne.n	8002470 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6979      	ldr	r1, [r7, #20]
 8002468:	4618      	mov	r0, r3
 800246a:	f003 f8eb 	bl	8005644 <USB_EPStartXfer>
 800246e:	e005      	b.n	800247c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6979      	ldr	r1, [r7, #20]
 8002476:	4618      	mov	r0, r3
 8002478:	f003 f8e4 	bl	8005644 <USB_EPStartXfer>
  }

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	460b      	mov	r3, r1
 8002490:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002492:	78fb      	ldrb	r3, [r7, #3]
 8002494:	f003 0207 	and.w	r2, r3, #7
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	440b      	add	r3, r1
 80024a4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80024a8:	681b      	ldr	r3, [r3, #0]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr

080024b4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	603b      	str	r3, [r7, #0]
 80024c0:	460b      	mov	r3, r1
 80024c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024c4:	7afb      	ldrb	r3, [r7, #11]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	4613      	mov	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4413      	add	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	2200      	movs	r2, #0
 80024f8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2201      	movs	r2, #1
 80024fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002500:	7afb      	ldrb	r3, [r7, #11]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	b2da      	uxtb	r2, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800250c:	7afb      	ldrb	r3, [r7, #11]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	2b00      	cmp	r3, #0
 8002514:	d106      	bne.n	8002524 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6979      	ldr	r1, [r7, #20]
 800251c:	4618      	mov	r0, r3
 800251e:	f003 f891 	bl	8005644 <USB_EPStartXfer>
 8002522:	e005      	b.n	8002530 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6979      	ldr	r1, [r7, #20]
 800252a:	4618      	mov	r0, r3
 800252c:	f003 f88a 	bl	8005644 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b084      	sub	sp, #16
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	460b      	mov	r3, r1
 8002544:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002546:	78fb      	ldrb	r3, [r7, #3]
 8002548:	f003 0207 	and.w	r2, r3, #7
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	429a      	cmp	r2, r3
 8002552:	d901      	bls.n	8002558 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e04c      	b.n	80025f2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002558:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800255c:	2b00      	cmp	r3, #0
 800255e:	da0e      	bge.n	800257e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	4413      	add	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2201      	movs	r2, #1
 800257a:	705a      	strb	r2, [r3, #1]
 800257c:	e00c      	b.n	8002598 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	4413      	add	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2201      	movs	r2, #1
 800259c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800259e:	78fb      	ldrb	r3, [r7, #3]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_PCD_EP_SetStall+0x7e>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e01c      	b.n	80025f2 <HAL_PCD_EP_SetStall+0xb8>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68f9      	ldr	r1, [r7, #12]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f004 fe74 	bl	80072b4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025cc:	78fb      	ldrb	r3, [r7, #3]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d108      	bne.n	80025e8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80025e0:	4619      	mov	r1, r3
 80025e2:	4610      	mov	r0, r2
 80025e4:	f004 ff99 	bl	800751a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b084      	sub	sp, #16
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	460b      	mov	r3, r1
 8002604:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	f003 020f 	and.w	r2, r3, #15
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	429a      	cmp	r2, r3
 8002612:	d901      	bls.n	8002618 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e040      	b.n	800269a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002618:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800261c:	2b00      	cmp	r3, #0
 800261e:	da0e      	bge.n	800263e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	4413      	add	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2201      	movs	r2, #1
 800263a:	705a      	strb	r2, [r3, #1]
 800263c:	e00e      	b.n	800265c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800263e:	78fb      	ldrb	r3, [r7, #3]
 8002640:	f003 0207 	and.w	r2, r3, #7
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	4413      	add	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002662:	78fb      	ldrb	r3, [r7, #3]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	b2da      	uxtb	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_PCD_EP_ClrStall+0x82>
 8002678:	2302      	movs	r3, #2
 800267a:	e00e      	b.n	800269a <HAL_PCD_EP_ClrStall+0xa0>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68f9      	ldr	r1, [r7, #12]
 800268a:	4618      	mov	r0, r3
 800268c:	f004 fe62 	bl	8007354 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	460b      	mov	r3, r1
 80026ac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_PCD_EP_Flush+0x1a>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e01b      	b.n	80026f4 <HAL_PCD_EP_Flush+0x52>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 80026c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	da09      	bge.n	80026e0 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	78fb      	ldrb	r3, [r7, #3]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	4619      	mov	r1, r3
 80026d8:	4610      	mov	r0, r2
 80026da:	f002 fa47 	bl	8004b6c <USB_FlushTxFifo>
 80026de:	e004      	b.n	80026ea <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f002 fa4c 	bl	8004b82 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08e      	sub	sp, #56	; 0x38
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002704:	e2ec      	b.n	8002ce0 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800270e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002710:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002712:	b2db      	uxtb	r3, r3
 8002714:	f003 030f 	and.w	r3, r3, #15
 8002718:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800271c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002720:	2b00      	cmp	r3, #0
 8002722:	f040 8161 	bne.w	80029e8 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002726:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002728:	f003 0310 	and.w	r3, r3, #16
 800272c:	2b00      	cmp	r3, #0
 800272e:	d152      	bne.n	80027d6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	b29b      	uxth	r3, r3
 8002738:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800273c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002740:	81fb      	strh	r3, [r7, #14]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	89fb      	ldrh	r3, [r7, #14]
 8002748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800274c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002750:	b29b      	uxth	r3, r3
 8002752:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3328      	adds	r3, #40	; 0x28
 8002758:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002762:	b29b      	uxth	r3, r3
 8002764:	461a      	mov	r2, r3
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4413      	add	r3, r2
 800276e:	3302      	adds	r3, #2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6812      	ldr	r2, [r2, #0]
 8002776:	4413      	add	r3, r2
 8002778:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	695a      	ldr	r2, [r3, #20]
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	441a      	add	r2, r3
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002794:	2100      	movs	r1, #0
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f00b fc6d 	bl	800e076 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 829b 	beq.w	8002ce0 <PCD_EP_ISR_Handler+0x5e4>
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f040 8296 	bne.w	8002ce0 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	b292      	uxth	r2, r2
 80027c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027d4:	e284      	b.n	8002ce0 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80027e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d034      	beq.n	800285a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4413      	add	r3, r2
 8002804:	3306      	adds	r3, #6
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	4413      	add	r3, r2
 800280e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800282e:	b29b      	uxth	r3, r3
 8002830:	f004 fec3 	bl	80075ba <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	b29a      	uxth	r2, r3
 800283c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002840:	4013      	ands	r3, r2
 8002842:	823b      	strh	r3, [r7, #16]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	8a3a      	ldrh	r2, [r7, #16]
 800284a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800284e:	b292      	uxth	r2, r2
 8002850:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f00b fbe2 	bl	800e01c <HAL_PCD_SetupStageCallback>
 8002858:	e242      	b.n	8002ce0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800285a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800285e:	2b00      	cmp	r3, #0
 8002860:	f280 823e 	bge.w	8002ce0 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	b29a      	uxth	r2, r3
 800286c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002870:	4013      	ands	r3, r2
 8002872:	83bb      	strh	r3, [r7, #28]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	8bba      	ldrh	r2, [r7, #28]
 800287a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800287e:	b292      	uxth	r2, r2
 8002880:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800288a:	b29b      	uxth	r3, r3
 800288c:	461a      	mov	r2, r3
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	4413      	add	r3, r2
 8002896:	3306      	adds	r3, #6
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d019      	beq.n	80028ea <PCD_EP_ISR_Handler+0x1ee>
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d015      	beq.n	80028ea <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	6959      	ldr	r1, [r3, #20]
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	f004 fe73 	bl	80075ba <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	695a      	ldr	r2, [r3, #20]
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	441a      	add	r2, r3
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80028e2:	2100      	movs	r1, #0
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f00b fbab 	bl	800e040 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f040 81f2 	bne.w	8002ce0 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800290a:	b29b      	uxth	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	4413      	add	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d112      	bne.n	800294a <PCD_EP_ISR_Handler+0x24e>
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	b29b      	uxth	r3, r3
 800292a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800292e:	b29a      	uxth	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	801a      	strh	r2, [r3, #0]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	b29b      	uxth	r3, r3
 800293a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800293e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002942:	b29a      	uxth	r2, r3
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	801a      	strh	r2, [r3, #0]
 8002948:	e02f      	b.n	80029aa <PCD_EP_ISR_Handler+0x2ae>
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	2b3e      	cmp	r3, #62	; 0x3e
 8002950:	d813      	bhi.n	800297a <PCD_EP_ISR_Handler+0x27e>
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	085b      	lsrs	r3, r3, #1
 8002958:	633b      	str	r3, [r7, #48]	; 0x30
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d002      	beq.n	800296c <PCD_EP_ISR_Handler+0x270>
 8002966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002968:	3301      	adds	r3, #1
 800296a:	633b      	str	r3, [r7, #48]	; 0x30
 800296c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296e:	b29b      	uxth	r3, r3
 8002970:	029b      	lsls	r3, r3, #10
 8002972:	b29a      	uxth	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	801a      	strh	r2, [r3, #0]
 8002978:	e017      	b.n	80029aa <PCD_EP_ISR_Handler+0x2ae>
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	095b      	lsrs	r3, r3, #5
 8002980:	633b      	str	r3, [r7, #48]	; 0x30
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	2b00      	cmp	r3, #0
 800298c:	d102      	bne.n	8002994 <PCD_EP_ISR_Handler+0x298>
 800298e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002990:	3b01      	subs	r3, #1
 8002992:	633b      	str	r3, [r7, #48]	; 0x30
 8002994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002996:	b29b      	uxth	r3, r3
 8002998:	029b      	lsls	r3, r3, #10
 800299a:	b29b      	uxth	r3, r3
 800299c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	881b      	ldrh	r3, [r3, #0]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ba:	827b      	strh	r3, [r7, #18]
 80029bc:	8a7b      	ldrh	r3, [r7, #18]
 80029be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80029c2:	827b      	strh	r3, [r7, #18]
 80029c4:	8a7b      	ldrh	r3, [r7, #18]
 80029c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80029ca:	827b      	strh	r3, [r7, #18]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	8a7b      	ldrh	r3, [r7, #18]
 80029d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	8013      	strh	r3, [r2, #0]
 80029e6:	e17b      	b.n	8002ce0 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	461a      	mov	r2, r3
 80029ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029fa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f280 80ea 	bge.w	8002bd8 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	853b      	strh	r3, [r7, #40]	; 0x28
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002a2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a32:	b292      	uxth	r2, r2
 8002a34:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002a36:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	4413      	add	r3, r2
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	7b1b      	ldrb	r3, [r3, #12]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d122      	bne.n	8002a9a <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	461a      	mov	r2, r3
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4413      	add	r3, r2
 8002a68:	3306      	adds	r3, #6
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a7c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002a7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 8087 	beq.w	8002b94 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	6959      	ldr	r1, [r3, #20]
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	88da      	ldrh	r2, [r3, #6]
 8002a92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a94:	f004 fd91 	bl	80075ba <USB_ReadPMA>
 8002a98:	e07c      	b.n	8002b94 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	78db      	ldrb	r3, [r3, #3]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d108      	bne.n	8002ab4 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002aa2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f927 	bl	8002cfc <HAL_PCD_EP_DB_Receive>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002ab2:	e06f      	b.n	8002b94 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ace:	847b      	strh	r3, [r7, #34]	; 0x22
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	441a      	add	r2, r3
 8002ade:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002ae0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ae4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	461a      	mov	r2, r3
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d021      	beq.n	8002b52 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	461a      	mov	r2, r3
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4413      	add	r3, r2
 8002b22:	3302      	adds	r3, #2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6812      	ldr	r2, [r2, #0]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b36:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002b38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d02a      	beq.n	8002b94 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	6959      	ldr	r1, [r3, #20]
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	891a      	ldrh	r2, [r3, #8]
 8002b4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b4c:	f004 fd35 	bl	80075ba <USB_ReadPMA>
 8002b50:	e020      	b.n	8002b94 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4413      	add	r3, r2
 8002b66:	3306      	adds	r3, #6
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6812      	ldr	r2, [r2, #0]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b7a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002b7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	6959      	ldr	r1, [r3, #20]
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	895a      	ldrh	r2, [r3, #10]
 8002b8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b90:	f004 fd13 	bl	80075ba <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	69da      	ldr	r2, [r3, #28]
 8002b98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b9a:	441a      	add	r2, r3
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	695a      	ldr	r2, [r3, #20]
 8002ba4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ba6:	441a      	add	r2, r3
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d004      	beq.n	8002bbe <PCD_EP_ISR_Handler+0x4c2>
 8002bb4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d206      	bcs.n	8002bcc <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f00b fa3b 	bl	800e040 <HAL_PCD_DataOutStageCallback>
 8002bca:	e005      	b.n	8002bd8 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f002 fd36 	bl	8005644 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002bd8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d07e      	beq.n	8002ce0 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002be2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c10:	843b      	strh	r3, [r7, #32]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	461a      	mov	r2, r3
 8002c18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	441a      	add	r2, r3
 8002c20:	8c3b      	ldrh	r3, [r7, #32]
 8002c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	78db      	ldrb	r3, [r3, #3]
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d00c      	beq.n	8002c50 <PCD_EP_ISR_Handler+0x554>
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	78db      	ldrb	r3, [r3, #3]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d008      	beq.n	8002c50 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d146      	bne.n	8002cd4 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002c46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d141      	bne.n	8002cd4 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4413      	add	r3, r2
 8002c64:	3302      	adds	r3, #2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c78:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	699a      	ldr	r2, [r3, #24]
 8002c7e:	8bfb      	ldrh	r3, [r7, #30]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d906      	bls.n	8002c92 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	699a      	ldr	r2, [r3, #24]
 8002c88:	8bfb      	ldrh	r3, [r7, #30]
 8002c8a:	1ad2      	subs	r2, r2, r3
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	619a      	str	r2, [r3, #24]
 8002c90:	e002      	b.n	8002c98 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	2200      	movs	r2, #0
 8002c96:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d106      	bne.n	8002cae <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f00b f9e5 	bl	800e076 <HAL_PCD_DataInStageCallback>
 8002cac:	e018      	b.n	8002ce0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	695a      	ldr	r2, [r3, #20]
 8002cb2:	8bfb      	ldrh	r3, [r7, #30]
 8002cb4:	441a      	add	r2, r3
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	69da      	ldr	r2, [r3, #28]
 8002cbe:	8bfb      	ldrh	r3, [r7, #30]
 8002cc0:	441a      	add	r2, r3
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f002 fcb9 	bl	8005644 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002cd2:	e005      	b.n	8002ce0 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002cd4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f91b 	bl	8002f16 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	b21b      	sxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f6ff ad0a 	blt.w	8002706 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3738      	adds	r7, #56	; 0x38
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	4613      	mov	r3, r2
 8002d08:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d07e      	beq.n	8002e12 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4413      	add	r3, r2
 8002d28:	3302      	adds	r3, #2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d36:	881b      	ldrh	r3, [r3, #0]
 8002d38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d3c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	8b7b      	ldrh	r3, [r7, #26]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d306      	bcc.n	8002d56 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	699a      	ldr	r2, [r3, #24]
 8002d4c:	8b7b      	ldrh	r3, [r7, #26]
 8002d4e:	1ad2      	subs	r2, r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	619a      	str	r2, [r3, #24]
 8002d54:	e002      	b.n	8002d5c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d123      	bne.n	8002dac <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7e:	833b      	strh	r3, [r7, #24]
 8002d80:	8b3b      	ldrh	r3, [r7, #24]
 8002d82:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d86:	833b      	strh	r3, [r7, #24]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	441a      	add	r2, r3
 8002d96:	8b3b      	ldrh	r3, [r7, #24]
 8002d98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d01f      	beq.n	8002df6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd0:	82fb      	strh	r3, [r7, #22]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	441a      	add	r2, r3
 8002de0:	8afb      	ldrh	r3, [r7, #22]
 8002de2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002de6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002df6:	8b7b      	ldrh	r3, [r7, #26]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 8087 	beq.w	8002f0c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	6959      	ldr	r1, [r3, #20]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	891a      	ldrh	r2, [r3, #8]
 8002e0a:	8b7b      	ldrh	r3, [r7, #26]
 8002e0c:	f004 fbd5 	bl	80075ba <USB_ReadPMA>
 8002e10:	e07c      	b.n	8002f0c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4413      	add	r3, r2
 8002e26:	3306      	adds	r3, #6
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	6812      	ldr	r2, [r2, #0]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e3a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	699a      	ldr	r2, [r3, #24]
 8002e40:	8b7b      	ldrh	r3, [r7, #26]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d306      	bcc.n	8002e54 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	699a      	ldr	r2, [r3, #24]
 8002e4a:	8b7b      	ldrh	r3, [r7, #26]
 8002e4c:	1ad2      	subs	r2, r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	619a      	str	r2, [r3, #24]
 8002e52:	e002      	b.n	8002e5a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2200      	movs	r2, #0
 8002e58:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d123      	bne.n	8002eaa <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e7c:	83fb      	strh	r3, [r7, #30]
 8002e7e:	8bfb      	ldrh	r3, [r7, #30]
 8002e80:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e84:	83fb      	strh	r3, [r7, #30]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	441a      	add	r2, r3
 8002e94:	8bfb      	ldrh	r3, [r7, #30]
 8002e96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002eaa:	88fb      	ldrh	r3, [r7, #6]
 8002eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d11f      	bne.n	8002ef4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ece:	83bb      	strh	r3, [r7, #28]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	441a      	add	r2, r3
 8002ede:	8bbb      	ldrh	r3, [r7, #28]
 8002ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ef4:	8b7b      	ldrh	r3, [r7, #26]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d008      	beq.n	8002f0c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6818      	ldr	r0, [r3, #0]
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	6959      	ldr	r1, [r3, #20]
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	895a      	ldrh	r2, [r3, #10]
 8002f06:	8b7b      	ldrh	r3, [r7, #26]
 8002f08:	f004 fb57 	bl	80075ba <USB_ReadPMA>
    }
  }

  return count;
 8002f0c:	8b7b      	ldrh	r3, [r7, #26]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3720      	adds	r7, #32
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b0a2      	sub	sp, #136	; 0x88
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	4613      	mov	r3, r2
 8002f22:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f24:	88fb      	ldrh	r3, [r7, #6]
 8002f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 81c7 	beq.w	80032be <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	4413      	add	r3, r2
 8002f44:	3302      	adds	r3, #2
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f58:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	699a      	ldr	r2, [r3, #24]
 8002f60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d907      	bls.n	8002f78 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	699a      	ldr	r2, [r3, #24]
 8002f6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f70:	1ad2      	subs	r2, r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	619a      	str	r2, [r3, #24]
 8002f76:	e002      	b.n	8002f7e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f040 80b9 	bne.w	80030fa <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	785b      	ldrb	r3, [r3, #1]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d126      	bne.n	8002fde <HAL_PCD_EP_DB_Transmit+0xc8>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa4:	4413      	add	r3, r2
 8002fa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	011a      	lsls	r2, r3, #4
 8002fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	801a      	strh	r2, [r3, #0]
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	801a      	strh	r2, [r3, #0]
 8002fdc:	e01a      	b.n	8003014 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	785b      	ldrb	r3, [r3, #1]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d116      	bne.n	8003014 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	633b      	str	r3, [r7, #48]	; 0x30
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffa:	4413      	add	r3, r2
 8002ffc:	633b      	str	r3, [r7, #48]	; 0x30
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	011a      	lsls	r2, r3, #4
 8003004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003006:	4413      	add	r3, r2
 8003008:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800300e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003010:	2200      	movs	r2, #0
 8003012:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	623b      	str	r3, [r7, #32]
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	785b      	ldrb	r3, [r3, #1]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d126      	bne.n	8003070 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	61bb      	str	r3, [r7, #24]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003030:	b29b      	uxth	r3, r3
 8003032:	461a      	mov	r2, r3
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	4413      	add	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	011a      	lsls	r2, r3, #4
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	4413      	add	r3, r2
 8003044:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	b29b      	uxth	r3, r3
 8003050:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003054:	b29a      	uxth	r2, r3
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	801a      	strh	r2, [r3, #0]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	b29b      	uxth	r3, r3
 8003060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003068:	b29a      	uxth	r2, r3
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	801a      	strh	r2, [r3, #0]
 800306e:	e017      	b.n	80030a0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	785b      	ldrb	r3, [r3, #1]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d113      	bne.n	80030a0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003080:	b29b      	uxth	r3, r3
 8003082:	461a      	mov	r2, r3
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	4413      	add	r3, r2
 8003088:	623b      	str	r3, [r7, #32]
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	011a      	lsls	r2, r3, #4
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	4413      	add	r3, r2
 8003094:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003098:	61fb      	str	r3, [r7, #28]
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	2200      	movs	r2, #0
 800309e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	4619      	mov	r1, r3
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f00a ffe5 	bl	800e076 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030ac:	88fb      	ldrh	r3, [r7, #6]
 80030ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 82d4 	beq.w	8003660 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d2:	827b      	strh	r3, [r7, #18]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	441a      	add	r2, r3
 80030e2:	8a7b      	ldrh	r3, [r7, #18]
 80030e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	8013      	strh	r3, [r2, #0]
 80030f8:	e2b2      	b.n	8003660 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030fa:	88fb      	ldrh	r3, [r7, #6]
 80030fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d021      	beq.n	8003148 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	b29b      	uxth	r3, r3
 8003116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800311a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	441a      	add	r2, r3
 8003130:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800313c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003144:	b29b      	uxth	r3, r3
 8003146:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800314e:	2b01      	cmp	r3, #1
 8003150:	f040 8286 	bne.w	8003660 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800315c:	441a      	add	r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	69da      	ldr	r2, [r3, #28]
 8003166:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800316a:	441a      	add	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	6a1a      	ldr	r2, [r3, #32]
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	429a      	cmp	r2, r3
 800317a:	d309      	bcc.n	8003190 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	6a1a      	ldr	r2, [r3, #32]
 8003186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003188:	1ad2      	subs	r2, r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	621a      	str	r2, [r3, #32]
 800318e:	e015      	b.n	80031bc <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d107      	bne.n	80031a8 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003198:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800319c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031a6:	e009      	b.n	80031bc <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2200      	movs	r2, #0
 80031ba:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	785b      	ldrb	r3, [r3, #1]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d155      	bne.n	8003270 <HAL_PCD_EP_DB_Transmit+0x35a>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	461a      	mov	r2, r3
 80031d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d8:	4413      	add	r3, r2
 80031da:	63bb      	str	r3, [r7, #56]	; 0x38
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	011a      	lsls	r2, r3, #4
 80031e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e4:	4413      	add	r3, r2
 80031e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80031ea:	637b      	str	r3, [r7, #52]	; 0x34
 80031ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d112      	bne.n	8003218 <HAL_PCD_EP_DB_Transmit+0x302>
 80031f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003200:	801a      	strh	r2, [r3, #0]
 8003202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	b29b      	uxth	r3, r3
 8003208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800320c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003210:	b29a      	uxth	r2, r3
 8003212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003214:	801a      	strh	r2, [r3, #0]
 8003216:	e047      	b.n	80032a8 <HAL_PCD_EP_DB_Transmit+0x392>
 8003218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800321a:	2b3e      	cmp	r3, #62	; 0x3e
 800321c:	d811      	bhi.n	8003242 <HAL_PCD_EP_DB_Transmit+0x32c>
 800321e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003220:	085b      	lsrs	r3, r3, #1
 8003222:	64bb      	str	r3, [r7, #72]	; 0x48
 8003224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <HAL_PCD_EP_DB_Transmit+0x31e>
 800322e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003230:	3301      	adds	r3, #1
 8003232:	64bb      	str	r3, [r7, #72]	; 0x48
 8003234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003236:	b29b      	uxth	r3, r3
 8003238:	029b      	lsls	r3, r3, #10
 800323a:	b29a      	uxth	r2, r3
 800323c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800323e:	801a      	strh	r2, [r3, #0]
 8003240:	e032      	b.n	80032a8 <HAL_PCD_EP_DB_Transmit+0x392>
 8003242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003244:	095b      	lsrs	r3, r3, #5
 8003246:	64bb      	str	r3, [r7, #72]	; 0x48
 8003248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800324a:	f003 031f 	and.w	r3, r3, #31
 800324e:	2b00      	cmp	r3, #0
 8003250:	d102      	bne.n	8003258 <HAL_PCD_EP_DB_Transmit+0x342>
 8003252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003254:	3b01      	subs	r3, #1
 8003256:	64bb      	str	r3, [r7, #72]	; 0x48
 8003258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800325a:	b29b      	uxth	r3, r3
 800325c:	029b      	lsls	r3, r3, #10
 800325e:	b29b      	uxth	r3, r3
 8003260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003268:	b29a      	uxth	r2, r3
 800326a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800326c:	801a      	strh	r2, [r3, #0]
 800326e:	e01b      	b.n	80032a8 <HAL_PCD_EP_DB_Transmit+0x392>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	785b      	ldrb	r3, [r3, #1]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d117      	bne.n	80032a8 <HAL_PCD_EP_DB_Transmit+0x392>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	643b      	str	r3, [r7, #64]	; 0x40
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003286:	b29b      	uxth	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800328c:	4413      	add	r3, r2
 800328e:	643b      	str	r3, [r7, #64]	; 0x40
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	011a      	lsls	r2, r3, #4
 8003296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003298:	4413      	add	r3, r2
 800329a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800329e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032a6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	6959      	ldr	r1, [r3, #20]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	891a      	ldrh	r2, [r3, #8]
 80032b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	f004 f93a 	bl	8007530 <USB_WritePMA>
 80032bc:	e1d0      	b.n	8003660 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	461a      	mov	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	4413      	add	r3, r2
 80032d2:	3306      	adds	r3, #6
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	6812      	ldr	r2, [r2, #0]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	699a      	ldr	r2, [r3, #24]
 80032ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d307      	bcc.n	8003306 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032fe:	1ad2      	subs	r2, r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	619a      	str	r2, [r3, #24]
 8003304:	e002      	b.n	800330c <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2200      	movs	r2, #0
 800330a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	2b00      	cmp	r3, #0
 8003312:	f040 80c4 	bne.w	800349e <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	785b      	ldrb	r3, [r3, #1]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d126      	bne.n	800336c <HAL_PCD_EP_DB_Transmit+0x456>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800332c:	b29b      	uxth	r3, r3
 800332e:	461a      	mov	r2, r3
 8003330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003332:	4413      	add	r3, r2
 8003334:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	011a      	lsls	r2, r3, #4
 800333c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800333e:	4413      	add	r3, r2
 8003340:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003344:	66bb      	str	r3, [r7, #104]	; 0x68
 8003346:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	b29b      	uxth	r3, r3
 800334c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003350:	b29a      	uxth	r2, r3
 8003352:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003354:	801a      	strh	r2, [r3, #0]
 8003356:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	b29b      	uxth	r3, r3
 800335c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003364:	b29a      	uxth	r2, r3
 8003366:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003368:	801a      	strh	r2, [r3, #0]
 800336a:	e01a      	b.n	80033a2 <HAL_PCD_EP_DB_Transmit+0x48c>
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	785b      	ldrb	r3, [r3, #1]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d116      	bne.n	80033a2 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	677b      	str	r3, [r7, #116]	; 0x74
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003382:	b29b      	uxth	r3, r3
 8003384:	461a      	mov	r2, r3
 8003386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003388:	4413      	add	r3, r2
 800338a:	677b      	str	r3, [r7, #116]	; 0x74
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	011a      	lsls	r2, r3, #4
 8003392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003394:	4413      	add	r3, r2
 8003396:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800339a:	673b      	str	r3, [r7, #112]	; 0x70
 800339c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800339e:	2200      	movs	r2, #0
 80033a0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	785b      	ldrb	r3, [r3, #1]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d12f      	bne.n	8003410 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	461a      	mov	r2, r3
 80033c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033c8:	4413      	add	r3, r2
 80033ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	011a      	lsls	r2, r3, #4
 80033d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033d8:	4413      	add	r3, r2
 80033da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033f4:	801a      	strh	r2, [r3, #0]
 80033f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003406:	b29a      	uxth	r2, r3
 8003408:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800340c:	801a      	strh	r2, [r3, #0]
 800340e:	e017      	b.n	8003440 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	785b      	ldrb	r3, [r3, #1]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d113      	bne.n	8003440 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003420:	b29b      	uxth	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003426:	4413      	add	r3, r2
 8003428:	67bb      	str	r3, [r7, #120]	; 0x78
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	011a      	lsls	r2, r3, #4
 8003430:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003432:	4413      	add	r3, r2
 8003434:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003438:	67fb      	str	r3, [r7, #124]	; 0x7c
 800343a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800343c:	2200      	movs	r2, #0
 800343e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	4619      	mov	r1, r3
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f00a fe15 	bl	800e076 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800344c:	88fb      	ldrh	r3, [r7, #6]
 800344e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003452:	2b00      	cmp	r3, #0
 8003454:	f040 8104 	bne.w	8003660 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	b29b      	uxth	r3, r3
 800346a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800346e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003472:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	441a      	add	r2, r3
 8003484:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800348c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003490:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003498:	b29b      	uxth	r3, r3
 800349a:	8013      	strh	r3, [r2, #0]
 800349c:	e0e0      	b.n	8003660 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800349e:	88fb      	ldrh	r3, [r7, #6]
 80034a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d121      	bne.n	80034ec <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	461a      	mov	r2, r3
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	441a      	add	r2, r3
 80034d4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80034d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	f040 80b4 	bne.w	8003660 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	695a      	ldr	r2, [r3, #20]
 80034fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003500:	441a      	add	r2, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	69da      	ldr	r2, [r3, #28]
 800350a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800350e:	441a      	add	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	6a1a      	ldr	r2, [r3, #32]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	429a      	cmp	r2, r3
 800351e:	d309      	bcc.n	8003534 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	6a1a      	ldr	r2, [r3, #32]
 800352a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800352c:	1ad2      	subs	r2, r2, r3
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	621a      	str	r2, [r3, #32]
 8003532:	e015      	b.n	8003560 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d107      	bne.n	800354c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800353c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003540:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800354a:	e009      	b.n	8003560 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2200      	movs	r2, #0
 8003556:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	667b      	str	r3, [r7, #100]	; 0x64
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	785b      	ldrb	r3, [r3, #1]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d155      	bne.n	800361a <HAL_PCD_EP_DB_Transmit+0x704>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800357c:	b29b      	uxth	r3, r3
 800357e:	461a      	mov	r2, r3
 8003580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003582:	4413      	add	r3, r2
 8003584:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	011a      	lsls	r2, r3, #4
 800358c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800358e:	4413      	add	r3, r2
 8003590:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003594:	65bb      	str	r3, [r7, #88]	; 0x58
 8003596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003598:	2b00      	cmp	r3, #0
 800359a:	d112      	bne.n	80035c2 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800359c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035aa:	801a      	strh	r2, [r3, #0]
 80035ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035be:	801a      	strh	r2, [r3, #0]
 80035c0:	e044      	b.n	800364c <HAL_PCD_EP_DB_Transmit+0x736>
 80035c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035c4:	2b3e      	cmp	r3, #62	; 0x3e
 80035c6:	d811      	bhi.n	80035ec <HAL_PCD_EP_DB_Transmit+0x6d6>
 80035c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ca:	085b      	lsrs	r3, r3, #1
 80035cc:	657b      	str	r3, [r7, #84]	; 0x54
 80035ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <HAL_PCD_EP_DB_Transmit+0x6c8>
 80035d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035da:	3301      	adds	r3, #1
 80035dc:	657b      	str	r3, [r7, #84]	; 0x54
 80035de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	029b      	lsls	r3, r3, #10
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035e8:	801a      	strh	r2, [r3, #0]
 80035ea:	e02f      	b.n	800364c <HAL_PCD_EP_DB_Transmit+0x736>
 80035ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	657b      	str	r3, [r7, #84]	; 0x54
 80035f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d102      	bne.n	8003602 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80035fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035fe:	3b01      	subs	r3, #1
 8003600:	657b      	str	r3, [r7, #84]	; 0x54
 8003602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003604:	b29b      	uxth	r3, r3
 8003606:	029b      	lsls	r3, r3, #10
 8003608:	b29b      	uxth	r3, r3
 800360a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800360e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003612:	b29a      	uxth	r2, r3
 8003614:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003616:	801a      	strh	r2, [r3, #0]
 8003618:	e018      	b.n	800364c <HAL_PCD_EP_DB_Transmit+0x736>
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	785b      	ldrb	r3, [r3, #1]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d114      	bne.n	800364c <HAL_PCD_EP_DB_Transmit+0x736>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800362a:	b29b      	uxth	r3, r3
 800362c:	461a      	mov	r2, r3
 800362e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003630:	4413      	add	r3, r2
 8003632:	667b      	str	r3, [r7, #100]	; 0x64
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	011a      	lsls	r2, r3, #4
 800363a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800363c:	4413      	add	r3, r2
 800363e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003642:	663b      	str	r3, [r7, #96]	; 0x60
 8003644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003646:	b29a      	uxth	r2, r3
 8003648:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800364a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	6959      	ldr	r1, [r3, #20]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	895a      	ldrh	r2, [r3, #10]
 8003658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800365a:	b29b      	uxth	r3, r3
 800365c:	f003 ff68 	bl	8007530 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	461a      	mov	r2, r3
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	b29b      	uxth	r3, r3
 8003672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800367a:	823b      	strh	r3, [r7, #16]
 800367c:	8a3b      	ldrh	r3, [r7, #16]
 800367e:	f083 0310 	eor.w	r3, r3, #16
 8003682:	823b      	strh	r3, [r7, #16]
 8003684:	8a3b      	ldrh	r3, [r7, #16]
 8003686:	f083 0320 	eor.w	r3, r3, #32
 800368a:	823b      	strh	r3, [r7, #16]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	461a      	mov	r2, r3
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	441a      	add	r2, r3
 800369a:	8a3b      	ldrh	r3, [r7, #16]
 800369c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3788      	adds	r7, #136	; 0x88
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b087      	sub	sp, #28
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	607b      	str	r3, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	817b      	strh	r3, [r7, #10]
 80036c8:	4613      	mov	r3, r2
 80036ca:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80036cc:	897b      	ldrh	r3, [r7, #10]
 80036ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00b      	beq.n	80036f0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036d8:	897b      	ldrh	r3, [r7, #10]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	1c5a      	adds	r2, r3, #1
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4413      	add	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	e009      	b.n	8003704 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036f0:	897a      	ldrh	r2, [r7, #10]
 80036f2:	4613      	mov	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4413      	add	r3, r2
 8003702:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003704:	893b      	ldrh	r3, [r7, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d107      	bne.n	800371a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2200      	movs	r2, #0
 800370e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	b29a      	uxth	r2, r3
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	80da      	strh	r2, [r3, #6]
 8003718:	e00b      	b.n	8003732 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2201      	movs	r2, #1
 800371e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	b29a      	uxth	r2, r3
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	0c1b      	lsrs	r3, r3, #16
 800372c:	b29a      	uxth	r2, r3
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	371c      	adds	r7, #28
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr
	...

08003740 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e272      	b.n	8003c38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 8087 	beq.w	800386e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003760:	4b92      	ldr	r3, [pc, #584]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 030c 	and.w	r3, r3, #12
 8003768:	2b04      	cmp	r3, #4
 800376a:	d00c      	beq.n	8003786 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800376c:	4b8f      	ldr	r3, [pc, #572]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 030c 	and.w	r3, r3, #12
 8003774:	2b08      	cmp	r3, #8
 8003776:	d112      	bne.n	800379e <HAL_RCC_OscConfig+0x5e>
 8003778:	4b8c      	ldr	r3, [pc, #560]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003784:	d10b      	bne.n	800379e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003786:	4b89      	ldr	r3, [pc, #548]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d06c      	beq.n	800386c <HAL_RCC_OscConfig+0x12c>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d168      	bne.n	800386c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e24c      	b.n	8003c38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a6:	d106      	bne.n	80037b6 <HAL_RCC_OscConfig+0x76>
 80037a8:	4b80      	ldr	r3, [pc, #512]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a7f      	ldr	r2, [pc, #508]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 80037ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b2:	6013      	str	r3, [r2, #0]
 80037b4:	e02e      	b.n	8003814 <HAL_RCC_OscConfig+0xd4>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10c      	bne.n	80037d8 <HAL_RCC_OscConfig+0x98>
 80037be:	4b7b      	ldr	r3, [pc, #492]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a7a      	ldr	r2, [pc, #488]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 80037c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	4b78      	ldr	r3, [pc, #480]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a77      	ldr	r2, [pc, #476]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 80037d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	e01d      	b.n	8003814 <HAL_RCC_OscConfig+0xd4>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037e0:	d10c      	bne.n	80037fc <HAL_RCC_OscConfig+0xbc>
 80037e2:	4b72      	ldr	r3, [pc, #456]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a71      	ldr	r2, [pc, #452]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 80037e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	4b6f      	ldr	r3, [pc, #444]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a6e      	ldr	r2, [pc, #440]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 80037f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	e00b      	b.n	8003814 <HAL_RCC_OscConfig+0xd4>
 80037fc:	4b6b      	ldr	r3, [pc, #428]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a6a      	ldr	r2, [pc, #424]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 8003802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	4b68      	ldr	r3, [pc, #416]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a67      	ldr	r2, [pc, #412]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 800380e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003812:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d013      	beq.n	8003844 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7fd ff38 	bl	8001690 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003824:	f7fd ff34 	bl	8001690 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b64      	cmp	r3, #100	; 0x64
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e200      	b.n	8003c38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003836:	4b5d      	ldr	r3, [pc, #372]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0f0      	beq.n	8003824 <HAL_RCC_OscConfig+0xe4>
 8003842:	e014      	b.n	800386e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003844:	f7fd ff24 	bl	8001690 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800384c:	f7fd ff20 	bl	8001690 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b64      	cmp	r3, #100	; 0x64
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e1ec      	b.n	8003c38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800385e:	4b53      	ldr	r3, [pc, #332]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f0      	bne.n	800384c <HAL_RCC_OscConfig+0x10c>
 800386a:	e000      	b.n	800386e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800386c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d063      	beq.n	8003942 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800387a:	4b4c      	ldr	r3, [pc, #304]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 030c 	and.w	r3, r3, #12
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00b      	beq.n	800389e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003886:	4b49      	ldr	r3, [pc, #292]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f003 030c 	and.w	r3, r3, #12
 800388e:	2b08      	cmp	r3, #8
 8003890:	d11c      	bne.n	80038cc <HAL_RCC_OscConfig+0x18c>
 8003892:	4b46      	ldr	r3, [pc, #280]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d116      	bne.n	80038cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389e:	4b43      	ldr	r3, [pc, #268]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d005      	beq.n	80038b6 <HAL_RCC_OscConfig+0x176>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d001      	beq.n	80038b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e1c0      	b.n	8003c38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b6:	4b3d      	ldr	r3, [pc, #244]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4939      	ldr	r1, [pc, #228]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ca:	e03a      	b.n	8003942 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d020      	beq.n	8003916 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d4:	4b36      	ldr	r3, [pc, #216]	; (80039b0 <HAL_RCC_OscConfig+0x270>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038da:	f7fd fed9 	bl	8001690 <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038e2:	f7fd fed5 	bl	8001690 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e1a1      	b.n	8003c38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f4:	4b2d      	ldr	r3, [pc, #180]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003900:	4b2a      	ldr	r3, [pc, #168]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4927      	ldr	r1, [pc, #156]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 8003910:	4313      	orrs	r3, r2
 8003912:	600b      	str	r3, [r1, #0]
 8003914:	e015      	b.n	8003942 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003916:	4b26      	ldr	r3, [pc, #152]	; (80039b0 <HAL_RCC_OscConfig+0x270>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391c:	f7fd feb8 	bl	8001690 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003924:	f7fd feb4 	bl	8001690 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e180      	b.n	8003c38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003936:	4b1d      	ldr	r3, [pc, #116]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d03a      	beq.n	80039c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d019      	beq.n	800398a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003956:	4b17      	ldr	r3, [pc, #92]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 8003958:	2201      	movs	r2, #1
 800395a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800395c:	f7fd fe98 	bl	8001690 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003964:	f7fd fe94 	bl	8001690 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e160      	b.n	8003c38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003976:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <HAL_RCC_OscConfig+0x26c>)
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003982:	2001      	movs	r0, #1
 8003984:	f000 faa6 	bl	8003ed4 <RCC_Delay>
 8003988:	e01c      	b.n	80039c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800398a:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <HAL_RCC_OscConfig+0x274>)
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003990:	f7fd fe7e 	bl	8001690 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003996:	e00f      	b.n	80039b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003998:	f7fd fe7a 	bl	8001690 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d908      	bls.n	80039b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e146      	b.n	8003c38 <HAL_RCC_OscConfig+0x4f8>
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000
 80039b0:	42420000 	.word	0x42420000
 80039b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b8:	4b92      	ldr	r3, [pc, #584]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1e9      	bne.n	8003998 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 80a6 	beq.w	8003b1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039d2:	2300      	movs	r3, #0
 80039d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039d6:	4b8b      	ldr	r3, [pc, #556]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10d      	bne.n	80039fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e2:	4b88      	ldr	r3, [pc, #544]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	4a87      	ldr	r2, [pc, #540]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 80039e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ec:	61d3      	str	r3, [r2, #28]
 80039ee:	4b85      	ldr	r3, [pc, #532]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f6:	60bb      	str	r3, [r7, #8]
 80039f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039fa:	2301      	movs	r3, #1
 80039fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fe:	4b82      	ldr	r3, [pc, #520]	; (8003c08 <HAL_RCC_OscConfig+0x4c8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d118      	bne.n	8003a3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a0a:	4b7f      	ldr	r3, [pc, #508]	; (8003c08 <HAL_RCC_OscConfig+0x4c8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a7e      	ldr	r2, [pc, #504]	; (8003c08 <HAL_RCC_OscConfig+0x4c8>)
 8003a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a16:	f7fd fe3b 	bl	8001690 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1e:	f7fd fe37 	bl	8001690 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b64      	cmp	r3, #100	; 0x64
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e103      	b.n	8003c38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a30:	4b75      	ldr	r3, [pc, #468]	; (8003c08 <HAL_RCC_OscConfig+0x4c8>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0f0      	beq.n	8003a1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d106      	bne.n	8003a52 <HAL_RCC_OscConfig+0x312>
 8003a44:	4b6f      	ldr	r3, [pc, #444]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	4a6e      	ldr	r2, [pc, #440]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	6213      	str	r3, [r2, #32]
 8003a50:	e02d      	b.n	8003aae <HAL_RCC_OscConfig+0x36e>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10c      	bne.n	8003a74 <HAL_RCC_OscConfig+0x334>
 8003a5a:	4b6a      	ldr	r3, [pc, #424]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	4a69      	ldr	r2, [pc, #420]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 8003a60:	f023 0301 	bic.w	r3, r3, #1
 8003a64:	6213      	str	r3, [r2, #32]
 8003a66:	4b67      	ldr	r3, [pc, #412]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	4a66      	ldr	r2, [pc, #408]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 8003a6c:	f023 0304 	bic.w	r3, r3, #4
 8003a70:	6213      	str	r3, [r2, #32]
 8003a72:	e01c      	b.n	8003aae <HAL_RCC_OscConfig+0x36e>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	2b05      	cmp	r3, #5
 8003a7a:	d10c      	bne.n	8003a96 <HAL_RCC_OscConfig+0x356>
 8003a7c:	4b61      	ldr	r3, [pc, #388]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	4a60      	ldr	r2, [pc, #384]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 8003a82:	f043 0304 	orr.w	r3, r3, #4
 8003a86:	6213      	str	r3, [r2, #32]
 8003a88:	4b5e      	ldr	r3, [pc, #376]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	4a5d      	ldr	r2, [pc, #372]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	6213      	str	r3, [r2, #32]
 8003a94:	e00b      	b.n	8003aae <HAL_RCC_OscConfig+0x36e>
 8003a96:	4b5b      	ldr	r3, [pc, #364]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	4a5a      	ldr	r2, [pc, #360]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 8003a9c:	f023 0301 	bic.w	r3, r3, #1
 8003aa0:	6213      	str	r3, [r2, #32]
 8003aa2:	4b58      	ldr	r3, [pc, #352]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	4a57      	ldr	r2, [pc, #348]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 8003aa8:	f023 0304 	bic.w	r3, r3, #4
 8003aac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d015      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab6:	f7fd fdeb 	bl	8001690 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003abc:	e00a      	b.n	8003ad4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003abe:	f7fd fde7 	bl	8001690 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e0b1      	b.n	8003c38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad4:	4b4b      	ldr	r3, [pc, #300]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0ee      	beq.n	8003abe <HAL_RCC_OscConfig+0x37e>
 8003ae0:	e014      	b.n	8003b0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae2:	f7fd fdd5 	bl	8001690 <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae8:	e00a      	b.n	8003b00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aea:	f7fd fdd1 	bl	8001690 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e09b      	b.n	8003c38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b00:	4b40      	ldr	r3, [pc, #256]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1ee      	bne.n	8003aea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b0c:	7dfb      	ldrb	r3, [r7, #23]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d105      	bne.n	8003b1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b12:	4b3c      	ldr	r3, [pc, #240]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	4a3b      	ldr	r2, [pc, #236]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 8003b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 8087 	beq.w	8003c36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b28:	4b36      	ldr	r3, [pc, #216]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f003 030c 	and.w	r3, r3, #12
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d061      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d146      	bne.n	8003bca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b3c:	4b33      	ldr	r3, [pc, #204]	; (8003c0c <HAL_RCC_OscConfig+0x4cc>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b42:	f7fd fda5 	bl	8001690 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4a:	f7fd fda1 	bl	8001690 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e06d      	b.n	8003c38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b5c:	4b29      	ldr	r3, [pc, #164]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1f0      	bne.n	8003b4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b70:	d108      	bne.n	8003b84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b72:	4b24      	ldr	r3, [pc, #144]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	4921      	ldr	r1, [pc, #132]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b84:	4b1f      	ldr	r3, [pc, #124]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a19      	ldr	r1, [r3, #32]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	430b      	orrs	r3, r1
 8003b96:	491b      	ldr	r1, [pc, #108]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b9c:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <HAL_RCC_OscConfig+0x4cc>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba2:	f7fd fd75 	bl	8001690 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003baa:	f7fd fd71 	bl	8001690 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e03d      	b.n	8003c38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bbc:	4b11      	ldr	r3, [pc, #68]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0f0      	beq.n	8003baa <HAL_RCC_OscConfig+0x46a>
 8003bc8:	e035      	b.n	8003c36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bca:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <HAL_RCC_OscConfig+0x4cc>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd0:	f7fd fd5e 	bl	8001690 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd8:	f7fd fd5a 	bl	8001690 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e026      	b.n	8003c38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bea:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <HAL_RCC_OscConfig+0x4c4>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x498>
 8003bf6:	e01e      	b.n	8003c36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d107      	bne.n	8003c10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e019      	b.n	8003c38 <HAL_RCC_OscConfig+0x4f8>
 8003c04:	40021000 	.word	0x40021000
 8003c08:	40007000 	.word	0x40007000
 8003c0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c10:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <HAL_RCC_OscConfig+0x500>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d106      	bne.n	8003c32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d001      	beq.n	8003c36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40021000 	.word	0x40021000

08003c44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0d0      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c58:	4b6a      	ldr	r3, [pc, #424]	; (8003e04 <HAL_RCC_ClockConfig+0x1c0>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d910      	bls.n	8003c88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c66:	4b67      	ldr	r3, [pc, #412]	; (8003e04 <HAL_RCC_ClockConfig+0x1c0>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f023 0207 	bic.w	r2, r3, #7
 8003c6e:	4965      	ldr	r1, [pc, #404]	; (8003e04 <HAL_RCC_ClockConfig+0x1c0>)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c76:	4b63      	ldr	r3, [pc, #396]	; (8003e04 <HAL_RCC_ClockConfig+0x1c0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d001      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0b8      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d020      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ca0:	4b59      	ldr	r3, [pc, #356]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	4a58      	ldr	r2, [pc, #352]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003caa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cb8:	4b53      	ldr	r3, [pc, #332]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	4a52      	ldr	r2, [pc, #328]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003cc2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cc4:	4b50      	ldr	r3, [pc, #320]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	494d      	ldr	r1, [pc, #308]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d040      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d107      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cea:	4b47      	ldr	r3, [pc, #284]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d115      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e07f      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d107      	bne.n	8003d12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d02:	4b41      	ldr	r3, [pc, #260]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d109      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e073      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d12:	4b3d      	ldr	r3, [pc, #244]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e06b      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d22:	4b39      	ldr	r3, [pc, #228]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f023 0203 	bic.w	r2, r3, #3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	4936      	ldr	r1, [pc, #216]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d34:	f7fd fcac 	bl	8001690 <HAL_GetTick>
 8003d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3a:	e00a      	b.n	8003d52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d3c:	f7fd fca8 	bl	8001690 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e053      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d52:	4b2d      	ldr	r3, [pc, #180]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f003 020c 	and.w	r2, r3, #12
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d1eb      	bne.n	8003d3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d64:	4b27      	ldr	r3, [pc, #156]	; (8003e04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d210      	bcs.n	8003d94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d72:	4b24      	ldr	r3, [pc, #144]	; (8003e04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f023 0207 	bic.w	r2, r3, #7
 8003d7a:	4922      	ldr	r1, [pc, #136]	; (8003e04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d82:	4b20      	ldr	r3, [pc, #128]	; (8003e04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e032      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d008      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003da0:	4b19      	ldr	r3, [pc, #100]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	4916      	ldr	r1, [pc, #88]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d009      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dbe:	4b12      	ldr	r3, [pc, #72]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	490e      	ldr	r1, [pc, #56]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dd2:	f000 f821 	bl	8003e18 <HAL_RCC_GetSysClockFreq>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	490a      	ldr	r1, [pc, #40]	; (8003e0c <HAL_RCC_ClockConfig+0x1c8>)
 8003de4:	5ccb      	ldrb	r3, [r1, r3]
 8003de6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dea:	4a09      	ldr	r2, [pc, #36]	; (8003e10 <HAL_RCC_ClockConfig+0x1cc>)
 8003dec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dee:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <HAL_RCC_ClockConfig+0x1d0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fd fc0a 	bl	800160c <HAL_InitTick>

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40022000 	.word	0x40022000
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	0800e68c 	.word	0x0800e68c
 8003e10:	20000004 	.word	0x20000004
 8003e14:	20000008 	.word	0x20000008

08003e18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e18:	b490      	push	{r4, r7}
 8003e1a:	b08a      	sub	sp, #40	; 0x28
 8003e1c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e1e:	4b29      	ldr	r3, [pc, #164]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003e20:	1d3c      	adds	r4, r7, #4
 8003e22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e28:	f240 2301 	movw	r3, #513	; 0x201
 8003e2c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61fb      	str	r3, [r7, #28]
 8003e32:	2300      	movs	r3, #0
 8003e34:	61bb      	str	r3, [r7, #24]
 8003e36:	2300      	movs	r3, #0
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e42:	4b21      	ldr	r3, [pc, #132]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d002      	beq.n	8003e58 <HAL_RCC_GetSysClockFreq+0x40>
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d003      	beq.n	8003e5e <HAL_RCC_GetSysClockFreq+0x46>
 8003e56:	e02b      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e58:	4b1c      	ldr	r3, [pc, #112]	; (8003ecc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e5a:	623b      	str	r3, [r7, #32]
      break;
 8003e5c:	e02b      	b.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	0c9b      	lsrs	r3, r3, #18
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	3328      	adds	r3, #40	; 0x28
 8003e68:	443b      	add	r3, r7
 8003e6a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e6e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d012      	beq.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e7a:	4b13      	ldr	r3, [pc, #76]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	0c5b      	lsrs	r3, r3, #17
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	3328      	adds	r3, #40	; 0x28
 8003e86:	443b      	add	r3, r7
 8003e88:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e8c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	4a0e      	ldr	r2, [pc, #56]	; (8003ecc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e92:	fb03 f202 	mul.w	r2, r3, r2
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9e:	e004      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	4a0b      	ldr	r2, [pc, #44]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ea4:	fb02 f303 	mul.w	r3, r2, r3
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	623b      	str	r3, [r7, #32]
      break;
 8003eae:	e002      	b.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003eb0:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003eb2:	623b      	str	r3, [r7, #32]
      break;
 8003eb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3728      	adds	r7, #40	; 0x28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bc90      	pop	{r4, r7}
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	0800e5e0 	.word	0x0800e5e0
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	007a1200 	.word	0x007a1200
 8003ed0:	003d0900 	.word	0x003d0900

08003ed4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003edc:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <RCC_Delay+0x34>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a0a      	ldr	r2, [pc, #40]	; (8003f0c <RCC_Delay+0x38>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	0a5b      	lsrs	r3, r3, #9
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	fb02 f303 	mul.w	r3, r2, r3
 8003eee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ef0:	bf00      	nop
  }
  while (Delay --);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	1e5a      	subs	r2, r3, #1
 8003ef6:	60fa      	str	r2, [r7, #12]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f9      	bne.n	8003ef0 <RCC_Delay+0x1c>
}
 8003efc:	bf00      	nop
 8003efe:	bf00      	nop
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr
 8003f08:	20000004 	.word	0x20000004
 8003f0c:	10624dd3 	.word	0x10624dd3

08003f10 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	613b      	str	r3, [r7, #16]
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d07d      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f30:	4b4f      	ldr	r3, [pc, #316]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10d      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f3c:	4b4c      	ldr	r3, [pc, #304]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	4a4b      	ldr	r2, [pc, #300]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f46:	61d3      	str	r3, [r2, #28]
 8003f48:	4b49      	ldr	r3, [pc, #292]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f4a:	69db      	ldr	r3, [r3, #28]
 8003f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f50:	60bb      	str	r3, [r7, #8]
 8003f52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f54:	2301      	movs	r3, #1
 8003f56:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f58:	4b46      	ldr	r3, [pc, #280]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d118      	bne.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f64:	4b43      	ldr	r3, [pc, #268]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a42      	ldr	r2, [pc, #264]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f70:	f7fd fb8e 	bl	8001690 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f76:	e008      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f78:	f7fd fb8a 	bl	8001690 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b64      	cmp	r3, #100	; 0x64
 8003f84:	d901      	bls.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e06d      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f8a:	4b3a      	ldr	r3, [pc, #232]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0f0      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f96:	4b36      	ldr	r3, [pc, #216]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f9e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d02e      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d027      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fb4:	4b2e      	ldr	r3, [pc, #184]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fbc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fbe:	4b2e      	ldr	r3, [pc, #184]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fc4:	4b2c      	ldr	r3, [pc, #176]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fca:	4a29      	ldr	r2, [pc, #164]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d014      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fda:	f7fd fb59 	bl	8001690 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe0:	e00a      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe2:	f7fd fb55 	bl	8001690 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e036      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff8:	4b1d      	ldr	r3, [pc, #116]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0ee      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004004:	4b1a      	ldr	r3, [pc, #104]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	4917      	ldr	r1, [pc, #92]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004012:	4313      	orrs	r3, r2
 8004014:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004016:	7dfb      	ldrb	r3, [r7, #23]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d105      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800401c:	4b14      	ldr	r3, [pc, #80]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	4a13      	ldr	r2, [pc, #76]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004026:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d008      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004034:	4b0e      	ldr	r3, [pc, #56]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	490b      	ldr	r1, [pc, #44]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004042:	4313      	orrs	r3, r2
 8004044:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0310 	and.w	r3, r3, #16
 800404e:	2b00      	cmp	r3, #0
 8004050:	d008      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004052:	4b07      	ldr	r3, [pc, #28]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	4904      	ldr	r1, [pc, #16]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004060:	4313      	orrs	r3, r2
 8004062:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3718      	adds	r7, #24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40021000 	.word	0x40021000
 8004074:	40007000 	.word	0x40007000
 8004078:	42420440 	.word	0x42420440

0800407c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e076      	b.n	800417c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	2b00      	cmp	r3, #0
 8004094:	d108      	bne.n	80040a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800409e:	d009      	beq.n	80040b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	61da      	str	r2, [r3, #28]
 80040a6:	e005      	b.n	80040b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fd f9aa 	bl	8001428 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040fc:	431a      	orrs	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	431a      	orrs	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004138:	ea42 0103 	orr.w	r1, r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	0c1a      	lsrs	r2, r3, #16
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f002 0204 	and.w	r2, r2, #4
 800415a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	69da      	ldr	r2, [r3, #28]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800416a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	603b      	str	r3, [r7, #0]
 8004190:	4613      	mov	r3, r2
 8004192:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004194:	2300      	movs	r3, #0
 8004196:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d101      	bne.n	80041a6 <HAL_SPI_Transmit+0x22>
 80041a2:	2302      	movs	r3, #2
 80041a4:	e126      	b.n	80043f4 <HAL_SPI_Transmit+0x270>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041ae:	f7fd fa6f 	bl	8001690 <HAL_GetTick>
 80041b2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80041b4:	88fb      	ldrh	r3, [r7, #6]
 80041b6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d002      	beq.n	80041ca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80041c4:	2302      	movs	r3, #2
 80041c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041c8:	e10b      	b.n	80043e2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <HAL_SPI_Transmit+0x52>
 80041d0:	88fb      	ldrh	r3, [r7, #6]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d102      	bne.n	80041dc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041da:	e102      	b.n	80043e2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2203      	movs	r2, #3
 80041e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	88fa      	ldrh	r2, [r7, #6]
 80041f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	88fa      	ldrh	r2, [r7, #6]
 80041fa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004222:	d10f      	bne.n	8004244 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004232:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004242:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424e:	2b40      	cmp	r3, #64	; 0x40
 8004250:	d007      	beq.n	8004262 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004260:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800426a:	d14b      	bne.n	8004304 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <HAL_SPI_Transmit+0xf6>
 8004274:	8afb      	ldrh	r3, [r7, #22]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d13e      	bne.n	80042f8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	881a      	ldrh	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428a:	1c9a      	adds	r2, r3, #2
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800429e:	e02b      	b.n	80042f8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d112      	bne.n	80042d4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	881a      	ldrh	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	1c9a      	adds	r2, r3, #2
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80042d2:	e011      	b.n	80042f8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042d4:	f7fd f9dc 	bl	8001690 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d803      	bhi.n	80042ec <HAL_SPI_Transmit+0x168>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042ea:	d102      	bne.n	80042f2 <HAL_SPI_Transmit+0x16e>
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d102      	bne.n	80042f8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80042f6:	e074      	b.n	80043e2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1ce      	bne.n	80042a0 <HAL_SPI_Transmit+0x11c>
 8004302:	e04c      	b.n	800439e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d002      	beq.n	8004312 <HAL_SPI_Transmit+0x18e>
 800430c:	8afb      	ldrh	r3, [r7, #22]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d140      	bne.n	8004394 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	330c      	adds	r3, #12
 800431c:	7812      	ldrb	r2, [r2, #0]
 800431e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800432e:	b29b      	uxth	r3, r3
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004338:	e02c      	b.n	8004394 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b02      	cmp	r3, #2
 8004346:	d113      	bne.n	8004370 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	330c      	adds	r3, #12
 8004352:	7812      	ldrb	r2, [r2, #0]
 8004354:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004364:	b29b      	uxth	r3, r3
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	86da      	strh	r2, [r3, #54]	; 0x36
 800436e:	e011      	b.n	8004394 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004370:	f7fd f98e 	bl	8001690 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	429a      	cmp	r2, r3
 800437e:	d803      	bhi.n	8004388 <HAL_SPI_Transmit+0x204>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004386:	d102      	bne.n	800438e <HAL_SPI_Transmit+0x20a>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d102      	bne.n	8004394 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004392:	e026      	b.n	80043e2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1cd      	bne.n	800433a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	6839      	ldr	r1, [r7, #0]
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 fb58 	bl	8004a58 <SPI_EndRxTxTransaction>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2220      	movs	r2, #32
 80043b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10a      	bne.n	80043d2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043bc:	2300      	movs	r3, #0
 80043be:	613b      	str	r3, [r7, #16]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	613b      	str	r3, [r7, #16]
 80043d0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	77fb      	strb	r3, [r7, #31]
 80043de:	e000      	b.n	80043e2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80043e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3720      	adds	r7, #32
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08c      	sub	sp, #48	; 0x30
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800440a:	2301      	movs	r3, #1
 800440c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800440e:	2300      	movs	r3, #0
 8004410:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <HAL_SPI_TransmitReceive+0x26>
 800441e:	2302      	movs	r3, #2
 8004420:	e18a      	b.n	8004738 <HAL_SPI_TransmitReceive+0x33c>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800442a:	f7fd f931 	bl	8001690 <HAL_GetTick>
 800442e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004440:	887b      	ldrh	r3, [r7, #2]
 8004442:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004444:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004448:	2b01      	cmp	r3, #1
 800444a:	d00f      	beq.n	800446c <HAL_SPI_TransmitReceive+0x70>
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004452:	d107      	bne.n	8004464 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d103      	bne.n	8004464 <HAL_SPI_TransmitReceive+0x68>
 800445c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004460:	2b04      	cmp	r3, #4
 8004462:	d003      	beq.n	800446c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004464:	2302      	movs	r3, #2
 8004466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800446a:	e15b      	b.n	8004724 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d005      	beq.n	800447e <HAL_SPI_TransmitReceive+0x82>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d002      	beq.n	800447e <HAL_SPI_TransmitReceive+0x82>
 8004478:	887b      	ldrh	r3, [r7, #2]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d103      	bne.n	8004486 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004484:	e14e      	b.n	8004724 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b04      	cmp	r3, #4
 8004490:	d003      	beq.n	800449a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2205      	movs	r2, #5
 8004496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	887a      	ldrh	r2, [r7, #2]
 80044aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	887a      	ldrh	r2, [r7, #2]
 80044b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	887a      	ldrh	r2, [r7, #2]
 80044bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	887a      	ldrh	r2, [r7, #2]
 80044c2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044da:	2b40      	cmp	r3, #64	; 0x40
 80044dc:	d007      	beq.n	80044ee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044f6:	d178      	bne.n	80045ea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <HAL_SPI_TransmitReceive+0x10a>
 8004500:	8b7b      	ldrh	r3, [r7, #26]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d166      	bne.n	80045d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450a:	881a      	ldrh	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	1c9a      	adds	r2, r3, #2
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004520:	b29b      	uxth	r3, r3
 8004522:	3b01      	subs	r3, #1
 8004524:	b29a      	uxth	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800452a:	e053      	b.n	80045d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b02      	cmp	r3, #2
 8004538:	d11b      	bne.n	8004572 <HAL_SPI_TransmitReceive+0x176>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800453e:	b29b      	uxth	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	d016      	beq.n	8004572 <HAL_SPI_TransmitReceive+0x176>
 8004544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004546:	2b01      	cmp	r3, #1
 8004548:	d113      	bne.n	8004572 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454e:	881a      	ldrh	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455a:	1c9a      	adds	r2, r3, #2
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004564:	b29b      	uxth	r3, r3
 8004566:	3b01      	subs	r3, #1
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b01      	cmp	r3, #1
 800457e:	d119      	bne.n	80045b4 <HAL_SPI_TransmitReceive+0x1b8>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d014      	beq.n	80045b4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004594:	b292      	uxth	r2, r2
 8004596:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459c:	1c9a      	adds	r2, r3, #2
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045b0:	2301      	movs	r3, #1
 80045b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045b4:	f7fd f86c 	bl	8001690 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d807      	bhi.n	80045d4 <HAL_SPI_TransmitReceive+0x1d8>
 80045c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045ca:	d003      	beq.n	80045d4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80045d2:	e0a7      	b.n	8004724 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1a6      	bne.n	800452c <HAL_SPI_TransmitReceive+0x130>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1a1      	bne.n	800452c <HAL_SPI_TransmitReceive+0x130>
 80045e8:	e07c      	b.n	80046e4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <HAL_SPI_TransmitReceive+0x1fc>
 80045f2:	8b7b      	ldrh	r3, [r7, #26]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d16b      	bne.n	80046d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	330c      	adds	r3, #12
 8004602:	7812      	ldrb	r2, [r2, #0]
 8004604:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004614:	b29b      	uxth	r3, r3
 8004616:	3b01      	subs	r3, #1
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800461e:	e057      	b.n	80046d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b02      	cmp	r3, #2
 800462c:	d11c      	bne.n	8004668 <HAL_SPI_TransmitReceive+0x26c>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d017      	beq.n	8004668 <HAL_SPI_TransmitReceive+0x26c>
 8004638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463a:	2b01      	cmp	r3, #1
 800463c:	d114      	bne.n	8004668 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	330c      	adds	r3, #12
 8004648:	7812      	ldrb	r2, [r2, #0]
 800464a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800465a:	b29b      	uxth	r3, r3
 800465c:	3b01      	subs	r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b01      	cmp	r3, #1
 8004674:	d119      	bne.n	80046aa <HAL_SPI_TransmitReceive+0x2ae>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800467a:	b29b      	uxth	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d014      	beq.n	80046aa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800469c:	b29b      	uxth	r3, r3
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046a6:	2301      	movs	r3, #1
 80046a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046aa:	f7fc fff1 	bl	8001690 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d803      	bhi.n	80046c2 <HAL_SPI_TransmitReceive+0x2c6>
 80046ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046c0:	d102      	bne.n	80046c8 <HAL_SPI_TransmitReceive+0x2cc>
 80046c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d103      	bne.n	80046d0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80046ce:	e029      	b.n	8004724 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1a2      	bne.n	8004620 <HAL_SPI_TransmitReceive+0x224>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d19d      	bne.n	8004620 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 f9b5 	bl	8004a58 <SPI_EndRxTxTransaction>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d006      	beq.n	8004702 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2220      	movs	r2, #32
 80046fe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004700:	e010      	b.n	8004724 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10b      	bne.n	8004722 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	617b      	str	r3, [r7, #20]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	e000      	b.n	8004724 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004722:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004734:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004738:	4618      	mov	r0, r3
 800473a:	3730      	adds	r7, #48	; 0x30
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b088      	sub	sp, #32
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	099b      	lsrs	r3, r3, #6
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10f      	bne.n	8004784 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	099b      	lsrs	r3, r3, #6
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d004      	beq.n	8004784 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	4798      	blx	r3
    return;
 8004782:	e0be      	b.n	8004902 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	085b      	lsrs	r3, r3, #1
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <HAL_SPI_IRQHandler+0x66>
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	09db      	lsrs	r3, r3, #7
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d004      	beq.n	80047a6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	4798      	blx	r3
    return;
 80047a4:	e0ad      	b.n	8004902 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	095b      	lsrs	r3, r3, #5
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d106      	bne.n	80047c0 <HAL_SPI_IRQHandler+0x80>
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	099b      	lsrs	r3, r3, #6
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 80a1 	beq.w	8004902 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	095b      	lsrs	r3, r3, #5
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 809a 	beq.w	8004902 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	099b      	lsrs	r3, r3, #6
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d023      	beq.n	8004822 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	d011      	beq.n	800480a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ea:	f043 0204 	orr.w	r2, r3, #4
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	617b      	str	r3, [r7, #20]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	e00b      	b.n	8004822 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800480a:	2300      	movs	r3, #0
 800480c:	613b      	str	r3, [r7, #16]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	613b      	str	r3, [r7, #16]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	613b      	str	r3, [r7, #16]
 800481e:	693b      	ldr	r3, [r7, #16]
        return;
 8004820:	e06f      	b.n	8004902 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	095b      	lsrs	r3, r3, #5
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d014      	beq.n	8004858 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004832:	f043 0201 	orr.w	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800483a:	2300      	movs	r3, #0
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485c:	2b00      	cmp	r3, #0
 800485e:	d04f      	beq.n	8004900 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800486e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d104      	bne.n	800488c <HAL_SPI_IRQHandler+0x14c>
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b00      	cmp	r3, #0
 800488a:	d034      	beq.n	80048f6 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0203 	bic.w	r2, r2, #3
 800489a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d011      	beq.n	80048c8 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a8:	4a17      	ldr	r2, [pc, #92]	; (8004908 <HAL_SPI_IRQHandler+0x1c8>)
 80048aa:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7fd f829 	bl	8001908 <HAL_DMA_Abort_IT>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d016      	beq.n	80048fe <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d4:	4a0c      	ldr	r2, [pc, #48]	; (8004908 <HAL_SPI_IRQHandler+0x1c8>)
 80048d6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fd f813 	bl	8001908 <HAL_DMA_Abort_IT>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00a      	beq.n	80048fe <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80048f4:	e003      	b.n	80048fe <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f808 	bl	800490c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80048fc:	e000      	b.n	8004900 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80048fe:	bf00      	nop
    return;
 8004900:	bf00      	nop
  }
}
 8004902:	3720      	adds	r7, #32
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	0800491f 	.word	0x0800491f

0800490c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	bc80      	pop	{r7}
 800491c:	4770      	bx	lr

0800491e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b084      	sub	sp, #16
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f7ff ffe7 	bl	800490c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800493e:	bf00      	nop
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
	...

08004948 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	4613      	mov	r3, r2
 8004956:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004958:	f7fc fe9a 	bl	8001690 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004960:	1a9b      	subs	r3, r3, r2
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	4413      	add	r3, r2
 8004966:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004968:	f7fc fe92 	bl	8001690 <HAL_GetTick>
 800496c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800496e:	4b39      	ldr	r3, [pc, #228]	; (8004a54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	015b      	lsls	r3, r3, #5
 8004974:	0d1b      	lsrs	r3, r3, #20
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	fb02 f303 	mul.w	r3, r2, r3
 800497c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800497e:	e054      	b.n	8004a2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004986:	d050      	beq.n	8004a2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004988:	f7fc fe82 	bl	8001690 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	69fa      	ldr	r2, [r7, #28]
 8004994:	429a      	cmp	r2, r3
 8004996:	d902      	bls.n	800499e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d13d      	bne.n	8004a1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049b6:	d111      	bne.n	80049dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049c0:	d004      	beq.n	80049cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ca:	d107      	bne.n	80049dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049e4:	d10f      	bne.n	8004a06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e017      	b.n	8004a4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4013      	ands	r3, r2
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	bf0c      	ite	eq
 8004a3a:	2301      	moveq	r3, #1
 8004a3c:	2300      	movne	r3, #0
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	461a      	mov	r2, r3
 8004a42:	79fb      	ldrb	r3, [r7, #7]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d19b      	bne.n	8004980 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3720      	adds	r7, #32
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20000004 	.word	0x20000004

08004a58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	2180      	movs	r1, #128	; 0x80
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f7ff ff6a 	bl	8004948 <SPI_WaitFlagStateUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d007      	beq.n	8004a8a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a7e:	f043 0220 	orr.w	r2, r3, #32
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e000      	b.n	8004a8c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a94:	b084      	sub	sp, #16
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
 8004a9e:	f107 0014 	add.w	r0, r7, #20
 8004aa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bc80      	pop	{r7}
 8004ab0:	b004      	add	sp, #16
 8004ab2:	4770      	bx	lr

08004ab4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ac4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004ac8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr

08004ae0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ae8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004aec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	43db      	mvns	r3, r3
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	4013      	ands	r3, r2
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bc80      	pop	{r7}
 8004b12:	4770      	bx	lr

08004b14 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bc80      	pop	{r7}
 8004b2a:	4770      	bx	lr

08004b2c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	f107 0014 	add.w	r0, r7, #20
 8004b3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bc80      	pop	{r7}
 8004b68:	b004      	add	sp, #16
 8004b6a:	4770      	bx	lr

08004b6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef *USBx, uint32_t num)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr

08004b82 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef *USBx)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bc80      	pop	{r7}
 8004b94:	4770      	bx	lr
	...

08004b98 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b09b      	sub	sp, #108	; 0x6c
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bbe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	78db      	ldrb	r3, [r3, #3]
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d81f      	bhi.n	8004c0a <USB_ActivateEndpoint+0x72>
 8004bca:	a201      	add	r2, pc, #4	; (adr r2, 8004bd0 <USB_ActivateEndpoint+0x38>)
 8004bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd0:	08004be1 	.word	0x08004be1
 8004bd4:	08004bfd 	.word	0x08004bfd
 8004bd8:	08004c13 	.word	0x08004c13
 8004bdc:	08004bef 	.word	0x08004bef
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004be0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004be4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004be8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004bec:	e012      	b.n	8004c14 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004bee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004bf2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004bf6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004bfa:	e00b      	b.n	8004c14 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004bfc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c04:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004c08:	e004      	b.n	8004c14 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004c10:	e000      	b.n	8004c14 <USB_ActivateEndpoint+0x7c>
      break;
 8004c12:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	441a      	add	r2, r3
 8004c1e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	881b      	ldrh	r3, [r3, #0]
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	4313      	orrs	r3, r2
 8004c56:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	441a      	add	r2, r3
 8004c64:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004c68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	7b1b      	ldrb	r3, [r3, #12]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f040 8149 	bne.w	8004f18 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	785b      	ldrb	r3, [r3, #1]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 8084 	beq.w	8004d98 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	011a      	lsls	r2, r3, #4
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cb2:	613b      	str	r3, [r7, #16]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	88db      	ldrh	r3, [r3, #6]
 8004cb8:	085b      	lsrs	r3, r3, #1
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	81fb      	strh	r3, [r7, #14]
 8004cd2:	89fb      	ldrh	r3, [r7, #14]
 8004cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01b      	beq.n	8004d14 <USB_ActivateEndpoint+0x17c>
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf2:	81bb      	strh	r3, [r7, #12]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	441a      	add	r2, r3
 8004cfe:	89bb      	ldrh	r3, [r7, #12]
 8004d00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	78db      	ldrb	r3, [r3, #3]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d020      	beq.n	8004d5e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d32:	813b      	strh	r3, [r7, #8]
 8004d34:	893b      	ldrh	r3, [r7, #8]
 8004d36:	f083 0320 	eor.w	r3, r3, #32
 8004d3a:	813b      	strh	r3, [r7, #8]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	441a      	add	r2, r3
 8004d46:	893b      	ldrh	r3, [r7, #8]
 8004d48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	8013      	strh	r3, [r2, #0]
 8004d5c:	e27f      	b.n	800525e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d74:	817b      	strh	r3, [r7, #10]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	441a      	add	r2, r3
 8004d80:	897b      	ldrh	r3, [r7, #10]
 8004d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	8013      	strh	r3, [r2, #0]
 8004d96:	e262      	b.n	800525e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	461a      	mov	r2, r3
 8004da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da8:	4413      	add	r3, r2
 8004daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	011a      	lsls	r2, r3, #4
 8004db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	88db      	ldrh	r3, [r3, #6]
 8004dc0:	085b      	lsrs	r3, r3, #1
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dca:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	4413      	add	r3, r2
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	011a      	lsls	r2, r3, #4
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	4413      	add	r3, r2
 8004dea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dee:	623b      	str	r3, [r7, #32]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d112      	bne.n	8004e1e <USB_ActivateEndpoint+0x286>
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	801a      	strh	r2, [r3, #0]
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	801a      	strh	r2, [r3, #0]
 8004e1c:	e02f      	b.n	8004e7e <USB_ActivateEndpoint+0x2e6>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	2b3e      	cmp	r3, #62	; 0x3e
 8004e24:	d813      	bhi.n	8004e4e <USB_ActivateEndpoint+0x2b6>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	085b      	lsrs	r3, r3, #1
 8004e2c:	663b      	str	r3, [r7, #96]	; 0x60
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <USB_ActivateEndpoint+0x2a8>
 8004e3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	663b      	str	r3, [r7, #96]	; 0x60
 8004e40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	029b      	lsls	r3, r3, #10
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	801a      	strh	r2, [r3, #0]
 8004e4c:	e017      	b.n	8004e7e <USB_ActivateEndpoint+0x2e6>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	095b      	lsrs	r3, r3, #5
 8004e54:	663b      	str	r3, [r7, #96]	; 0x60
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f003 031f 	and.w	r3, r3, #31
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d102      	bne.n	8004e68 <USB_ActivateEndpoint+0x2d0>
 8004e62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e64:	3b01      	subs	r3, #1
 8004e66:	663b      	str	r3, [r7, #96]	; 0x60
 8004e68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	029b      	lsls	r3, r3, #10
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	83fb      	strh	r3, [r7, #30]
 8004e8c:	8bfb      	ldrh	r3, [r7, #30]
 8004e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d01b      	beq.n	8004ece <USB_ActivateEndpoint+0x336>
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eac:	83bb      	strh	r3, [r7, #28]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	441a      	add	r2, r3
 8004eb8:	8bbb      	ldrh	r3, [r7, #28]
 8004eba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ebe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee4:	837b      	strh	r3, [r7, #26]
 8004ee6:	8b7b      	ldrh	r3, [r7, #26]
 8004ee8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004eec:	837b      	strh	r3, [r7, #26]
 8004eee:	8b7b      	ldrh	r3, [r7, #26]
 8004ef0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ef4:	837b      	strh	r3, [r7, #26]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	441a      	add	r2, r3
 8004f00:	8b7b      	ldrh	r3, [r7, #26]
 8004f02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	8013      	strh	r3, [r2, #0]
 8004f16:	e1a2      	b.n	800525e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	441a      	add	r2, r3
 8004f3c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f48:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	461a      	mov	r2, r3
 8004f62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f64:	4413      	add	r3, r2
 8004f66:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	011a      	lsls	r2, r3, #4
 8004f6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f76:	657b      	str	r3, [r7, #84]	; 0x54
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	891b      	ldrh	r3, [r3, #8]
 8004f7c:	085b      	lsrs	r3, r3, #1
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f86:	801a      	strh	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	653b      	str	r3, [r7, #80]	; 0x50
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	461a      	mov	r2, r3
 8004f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f98:	4413      	add	r3, r2
 8004f9a:	653b      	str	r3, [r7, #80]	; 0x50
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	011a      	lsls	r2, r3, #4
 8004fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	895b      	ldrh	r3, [r3, #10]
 8004fb0:	085b      	lsrs	r3, r3, #1
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fba:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	785b      	ldrb	r3, [r3, #1]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f040 8091 	bne.w	80050e8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004fd4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d01b      	beq.n	8005016 <USB_ActivateEndpoint+0x47e>
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	441a      	add	r2, r3
 8005000:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800500a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800500e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005012:	b29b      	uxth	r3, r3
 8005014:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4413      	add	r3, r2
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	873b      	strh	r3, [r7, #56]	; 0x38
 8005024:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502a:	2b00      	cmp	r3, #0
 800502c:	d01b      	beq.n	8005066 <USB_ActivateEndpoint+0x4ce>
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	b29b      	uxth	r3, r3
 800503c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005044:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	441a      	add	r2, r3
 8005050:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800505a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800505e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005062:	b29b      	uxth	r3, r3
 8005064:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	b29b      	uxth	r3, r3
 8005074:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800507e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005080:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005084:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005086:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005088:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800508c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	441a      	add	r2, r3
 8005098:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800509a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800509e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050c4:	867b      	strh	r3, [r7, #50]	; 0x32
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	441a      	add	r2, r3
 80050d0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80050d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	8013      	strh	r3, [r2, #0]
 80050e6:	e0ba      	b.n	800525e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80050f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80050fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01d      	beq.n	8005140 <USB_ActivateEndpoint+0x5a8>
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	b29b      	uxth	r3, r3
 8005112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	441a      	add	r2, r3
 8005128:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800512c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005134:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800513c:	b29b      	uxth	r3, r3
 800513e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005150:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005158:	2b00      	cmp	r3, #0
 800515a:	d01d      	beq.n	8005198 <USB_ActivateEndpoint+0x600>
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	b29b      	uxth	r3, r3
 800516a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800516e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005172:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	441a      	add	r2, r3
 8005180:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800518c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005190:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005194:	b29b      	uxth	r3, r3
 8005196:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	78db      	ldrb	r3, [r3, #3]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d024      	beq.n	80051ea <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80051ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80051be:	f083 0320 	eor.w	r3, r3, #32
 80051c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	441a      	add	r2, r3
 80051d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80051d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	8013      	strh	r3, [r2, #0]
 80051e8:	e01d      	b.n	8005226 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005200:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	441a      	add	r2, r3
 800520e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800521a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800521e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005222:	b29b      	uxth	r3, r3
 8005224:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	b29b      	uxth	r3, r3
 8005234:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	441a      	add	r2, r3
 8005248:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800524a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800524e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800525a:	b29b      	uxth	r3, r3
 800525c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800525e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005262:	4618      	mov	r0, r3
 8005264:	376c      	adds	r7, #108	; 0x6c
 8005266:	46bd      	mov	sp, r7
 8005268:	bc80      	pop	{r7}
 800526a:	4770      	bx	lr

0800526c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800526c:	b480      	push	{r7}
 800526e:	b08d      	sub	sp, #52	; 0x34
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	7b1b      	ldrb	r3, [r3, #12]
 800527a:	2b00      	cmp	r3, #0
 800527c:	f040 808e 	bne.w	800539c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	785b      	ldrb	r3, [r3, #1]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d044      	beq.n	8005312 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	81bb      	strh	r3, [r7, #12]
 8005296:	89bb      	ldrh	r3, [r7, #12]
 8005298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529c:	2b00      	cmp	r3, #0
 800529e:	d01b      	beq.n	80052d8 <USB_DeactivateEndpoint+0x6c>
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b6:	817b      	strh	r3, [r7, #10]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	441a      	add	r2, r3
 80052c2:	897b      	ldrh	r3, [r7, #10]
 80052c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ee:	813b      	strh	r3, [r7, #8]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	441a      	add	r2, r3
 80052fa:	893b      	ldrh	r3, [r7, #8]
 80052fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800530c:	b29b      	uxth	r3, r3
 800530e:	8013      	strh	r3, [r2, #0]
 8005310:	e192      	b.n	8005638 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	827b      	strh	r3, [r7, #18]
 8005320:	8a7b      	ldrh	r3, [r7, #18]
 8005322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d01b      	beq.n	8005362 <USB_DeactivateEndpoint+0xf6>
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	b29b      	uxth	r3, r3
 8005338:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800533c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005340:	823b      	strh	r3, [r7, #16]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	441a      	add	r2, r3
 800534c:	8a3b      	ldrh	r3, [r7, #16]
 800534e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005356:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800535a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800535e:	b29b      	uxth	r3, r3
 8005360:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	b29b      	uxth	r3, r3
 8005370:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005378:	81fb      	strh	r3, [r7, #14]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	441a      	add	r2, r3
 8005384:	89fb      	ldrh	r3, [r7, #14]
 8005386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800538a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800538e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005396:	b29b      	uxth	r3, r3
 8005398:	8013      	strh	r3, [r2, #0]
 800539a:	e14d      	b.n	8005638 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	785b      	ldrb	r3, [r3, #1]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f040 80a5 	bne.w	80054f0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	843b      	strh	r3, [r7, #32]
 80053b4:	8c3b      	ldrh	r3, [r7, #32]
 80053b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d01b      	beq.n	80053f6 <USB_DeactivateEndpoint+0x18a>
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d4:	83fb      	strh	r3, [r7, #30]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	441a      	add	r2, r3
 80053e0:	8bfb      	ldrh	r3, [r7, #30]
 80053e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	83bb      	strh	r3, [r7, #28]
 8005404:	8bbb      	ldrh	r3, [r7, #28]
 8005406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540a:	2b00      	cmp	r3, #0
 800540c:	d01b      	beq.n	8005446 <USB_DeactivateEndpoint+0x1da>
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	b29b      	uxth	r3, r3
 800541c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005424:	837b      	strh	r3, [r7, #26]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	441a      	add	r2, r3
 8005430:	8b7b      	ldrh	r3, [r7, #26]
 8005432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800543a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800543e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005442:	b29b      	uxth	r3, r3
 8005444:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	b29b      	uxth	r3, r3
 8005454:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545c:	833b      	strh	r3, [r7, #24]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	441a      	add	r2, r3
 8005468:	8b3b      	ldrh	r3, [r7, #24]
 800546a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800546e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005476:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800547a:	b29b      	uxth	r3, r3
 800547c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	b29b      	uxth	r3, r3
 800548c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005494:	82fb      	strh	r3, [r7, #22]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	441a      	add	r2, r3
 80054a0:	8afb      	ldrh	r3, [r7, #22]
 80054a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054cc:	82bb      	strh	r3, [r7, #20]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	441a      	add	r2, r3
 80054d8:	8abb      	ldrh	r3, [r7, #20]
 80054da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	8013      	strh	r3, [r2, #0]
 80054ee:	e0a3      	b.n	8005638 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80054fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01b      	beq.n	8005540 <USB_DeactivateEndpoint+0x2d4>
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	b29b      	uxth	r3, r3
 8005516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	441a      	add	r2, r3
 800552a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800552c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005534:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800553c:	b29b      	uxth	r3, r3
 800553e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800554e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005554:	2b00      	cmp	r3, #0
 8005556:	d01b      	beq.n	8005590 <USB_DeactivateEndpoint+0x324>
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	b29b      	uxth	r3, r3
 8005566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	441a      	add	r2, r3
 800557a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800557c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005588:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800558c:	b29b      	uxth	r3, r3
 800558e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	b29b      	uxth	r3, r3
 800559e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	441a      	add	r2, r3
 80055b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055de:	84bb      	strh	r3, [r7, #36]	; 0x24
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	441a      	add	r2, r3
 80055ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	b29b      	uxth	r3, r3
 800560e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005616:	847b      	strh	r3, [r7, #34]	; 0x22
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	441a      	add	r2, r3
 8005622:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005624:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005628:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800562c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005634:	b29b      	uxth	r3, r3
 8005636:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3734      	adds	r7, #52	; 0x34
 800563e:	46bd      	mov	sp, r7
 8005640:	bc80      	pop	{r7}
 8005642:	4770      	bx	lr

08005644 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b0cc      	sub	sp, #304	; 0x130
 8005648:	af00      	add	r7, sp, #0
 800564a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800564e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005652:	6018      	str	r0, [r3, #0]
 8005654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005658:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800565c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800565e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005662:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	785b      	ldrb	r3, [r3, #1]
 800566a:	2b01      	cmp	r3, #1
 800566c:	f041 817d 	bne.w	800696a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005674:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699a      	ldr	r2, [r3, #24]
 800567c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005680:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	429a      	cmp	r2, r3
 800568a:	d908      	bls.n	800569e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800568c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005690:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800569c:	e007      	b.n	80056ae <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800569e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80056ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	7b1b      	ldrb	r3, [r3, #12]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d152      	bne.n	8005764 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80056be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6959      	ldr	r1, [r3, #20]
 80056ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	88da      	ldrh	r2, [r3, #6]
 80056d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056da:	b29b      	uxth	r3, r3
 80056dc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80056e0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80056e4:	6800      	ldr	r0, [r0, #0]
 80056e6:	f001 ff23 	bl	8007530 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80056ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80056f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80056f6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80056fa:	6812      	ldr	r2, [r2, #0]
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005702:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800570c:	b29b      	uxth	r3, r3
 800570e:	4619      	mov	r1, r3
 8005710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005714:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005718:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800571c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005720:	6812      	ldr	r2, [r2, #0]
 8005722:	440a      	add	r2, r1
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800572a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	011a      	lsls	r2, r3, #4
 8005734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005738:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4413      	add	r3, r2
 8005740:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005748:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005752:	b29a      	uxth	r2, r3
 8005754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005758:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	801a      	strh	r2, [r3, #0]
 8005760:	f001 b8b5 	b.w	80068ce <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005768:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	78db      	ldrb	r3, [r3, #3]
 8005770:	2b02      	cmp	r3, #2
 8005772:	f040 84c6 	bne.w	8006102 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800577a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6a1a      	ldr	r2, [r3, #32]
 8005782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005786:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	429a      	cmp	r2, r3
 8005790:	f240 8443 	bls.w	800601a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005794:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005798:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	881b      	ldrh	r3, [r3, #0]
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ba:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80057be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	441a      	add	r2, r3
 80057d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80057dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057e4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80057e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80057f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6a1a      	ldr	r2, [r3, #32]
 80057fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005800:	1ad2      	subs	r2, r2, r3
 8005802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005806:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800580e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005812:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800581c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	b29b      	uxth	r3, r3
 800582c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 823e 	beq.w	8005cb2 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800583e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005842:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005846:	6812      	ldr	r2, [r2, #0]
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800584e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	785b      	ldrb	r3, [r3, #1]
 8005856:	2b00      	cmp	r3, #0
 8005858:	f040 809a 	bne.w	8005990 <USB_EPStartXfer+0x34c>
 800585c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005864:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005868:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800586c:	6812      	ldr	r2, [r2, #0]
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005874:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800587e:	b29b      	uxth	r3, r3
 8005880:	4619      	mov	r1, r3
 8005882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005886:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800588a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800588e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005892:	6812      	ldr	r2, [r2, #0]
 8005894:	440a      	add	r2, r1
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	011a      	lsls	r2, r3, #4
 80058a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4413      	add	r3, r2
 80058b2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80058b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d122      	bne.n	800590e <USB_EPStartXfer+0x2ca>
 80058c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058da:	b29a      	uxth	r2, r3
 80058dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	801a      	strh	r2, [r3, #0]
 80058e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058fe:	b29a      	uxth	r2, r3
 8005900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005904:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	801a      	strh	r2, [r3, #0]
 800590c:	e079      	b.n	8005a02 <USB_EPStartXfer+0x3be>
 800590e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005912:	2b3e      	cmp	r3, #62	; 0x3e
 8005914:	d81b      	bhi.n	800594e <USB_EPStartXfer+0x30a>
 8005916:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800591a:	085b      	lsrs	r3, r3, #1
 800591c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b00      	cmp	r3, #0
 800592a:	d004      	beq.n	8005936 <USB_EPStartXfer+0x2f2>
 800592c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005930:	3301      	adds	r3, #1
 8005932:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005936:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800593a:	b29b      	uxth	r3, r3
 800593c:	029b      	lsls	r3, r3, #10
 800593e:	b29a      	uxth	r2, r3
 8005940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005944:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	801a      	strh	r2, [r3, #0]
 800594c:	e059      	b.n	8005a02 <USB_EPStartXfer+0x3be>
 800594e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005952:	095b      	lsrs	r3, r3, #5
 8005954:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005958:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800595c:	f003 031f 	and.w	r3, r3, #31
 8005960:	2b00      	cmp	r3, #0
 8005962:	d104      	bne.n	800596e <USB_EPStartXfer+0x32a>
 8005964:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005968:	3b01      	subs	r3, #1
 800596a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800596e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005972:	b29b      	uxth	r3, r3
 8005974:	029b      	lsls	r3, r3, #10
 8005976:	b29b      	uxth	r3, r3
 8005978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800597c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005980:	b29a      	uxth	r2, r3
 8005982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005986:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	801a      	strh	r2, [r3, #0]
 800598e:	e038      	b.n	8005a02 <USB_EPStartXfer+0x3be>
 8005990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005994:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	785b      	ldrb	r3, [r3, #1]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d130      	bne.n	8005a02 <USB_EPStartXfer+0x3be>
 80059a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	4619      	mov	r1, r3
 80059b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80059ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059be:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80059c2:	6812      	ldr	r2, [r2, #0]
 80059c4:	440a      	add	r2, r1
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	011a      	lsls	r2, r3, #4
 80059d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059da:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4413      	add	r3, r2
 80059e2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80059e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	895b      	ldrh	r3, [r3, #10]
 8005a0e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6959      	ldr	r1, [r3, #20]
 8005a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a28:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005a2c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005a30:	6800      	ldr	r0, [r0, #0]
 8005a32:	f001 fd7d 	bl	8007530 <USB_WritePMA>
            ep->xfer_buff += len;
 8005a36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	695a      	ldr	r2, [r3, #20]
 8005a42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a46:	441a      	add	r2, r3
 8005a48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6a1a      	ldr	r2, [r3, #32]
 8005a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d90f      	bls.n	8005a90 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005a70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6a1a      	ldr	r2, [r3, #32]
 8005a7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a80:	1ad2      	subs	r2, r2, r3
 8005a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	621a      	str	r2, [r3, #32]
 8005a8e:	e00e      	b.n	8005aae <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	785b      	ldrb	r3, [r3, #1]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f040 809a 	bne.w	8005bf4 <USB_EPStartXfer+0x5b0>
 8005ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005ac8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005acc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005ad0:	6812      	ldr	r2, [r2, #0]
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005aee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005af2:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8005af6:	6812      	ldr	r2, [r2, #0]
 8005af8:	440a      	add	r2, r1
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	011a      	lsls	r2, r3, #4
 8005b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b0e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4413      	add	r3, r2
 8005b16:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b1e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d122      	bne.n	8005b72 <USB_EPStartXfer+0x52e>
 8005b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b30:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b44:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	801a      	strh	r2, [r3, #0]
 8005b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b50:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b68:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	801a      	strh	r2, [r3, #0]
 8005b70:	e083      	b.n	8005c7a <USB_EPStartXfer+0x636>
 8005b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b76:	2b3e      	cmp	r3, #62	; 0x3e
 8005b78:	d81b      	bhi.n	8005bb2 <USB_EPStartXfer+0x56e>
 8005b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b7e:	085b      	lsrs	r3, r3, #1
 8005b80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d004      	beq.n	8005b9a <USB_EPStartXfer+0x556>
 8005b90:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005b94:	3301      	adds	r3, #1
 8005b96:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b9a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	029b      	lsls	r3, r3, #10
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	801a      	strh	r2, [r3, #0]
 8005bb0:	e063      	b.n	8005c7a <USB_EPStartXfer+0x636>
 8005bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bb6:	095b      	lsrs	r3, r3, #5
 8005bb8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005bbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc0:	f003 031f 	and.w	r3, r3, #31
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d104      	bne.n	8005bd2 <USB_EPStartXfer+0x58e>
 8005bc8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005bd2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	029b      	lsls	r3, r3, #10
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	801a      	strh	r2, [r3, #0]
 8005bf2:	e042      	b.n	8005c7a <USB_EPStartXfer+0x636>
 8005bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	785b      	ldrb	r3, [r3, #1]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d13a      	bne.n	8005c7a <USB_EPStartXfer+0x636>
 8005c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c08:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c0c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c10:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005c14:	6812      	ldr	r2, [r2, #0]
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	4619      	mov	r1, r3
 8005c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c2e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c36:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005c3a:	6812      	ldr	r2, [r2, #0]
 8005c3c:	440a      	add	r2, r1
 8005c3e:	601a      	str	r2, [r3, #0]
 8005c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	011a      	lsls	r2, r3, #4
 8005c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c52:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c62:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c72:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	891b      	ldrh	r3, [r3, #8]
 8005c86:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6959      	ldr	r1, [r3, #20]
 8005c96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ca0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005ca4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005ca8:	6800      	ldr	r0, [r0, #0]
 8005caa:	f001 fc41 	bl	8007530 <USB_WritePMA>
 8005cae:	f000 be0e 	b.w	80068ce <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	785b      	ldrb	r3, [r3, #1]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d16d      	bne.n	8005d9e <USB_EPStartXfer+0x75a>
 8005cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	461a      	mov	r2, r3
 8005ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ce2:	4413      	add	r3, r2
 8005ce4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ce6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	011a      	lsls	r2, r3, #4
 8005cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cfc:	647b      	str	r3, [r7, #68]	; 0x44
 8005cfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d112      	bne.n	8005d2c <USB_EPStartXfer+0x6e8>
 8005d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d14:	801a      	strh	r2, [r3, #0]
 8005d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d28:	801a      	strh	r2, [r3, #0]
 8005d2a:	e063      	b.n	8005df4 <USB_EPStartXfer+0x7b0>
 8005d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d30:	2b3e      	cmp	r3, #62	; 0x3e
 8005d32:	d817      	bhi.n	8005d64 <USB_EPStartXfer+0x720>
 8005d34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d38:	085b      	lsrs	r3, r3, #1
 8005d3a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d004      	beq.n	8005d54 <USB_EPStartXfer+0x710>
 8005d4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d4e:	3301      	adds	r3, #1
 8005d50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005d54:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	029b      	lsls	r3, r3, #10
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d60:	801a      	strh	r2, [r3, #0]
 8005d62:	e047      	b.n	8005df4 <USB_EPStartXfer+0x7b0>
 8005d64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d68:	095b      	lsrs	r3, r3, #5
 8005d6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d72:	f003 031f 	and.w	r3, r3, #31
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d104      	bne.n	8005d84 <USB_EPStartXfer+0x740>
 8005d7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005d84:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	029b      	lsls	r3, r3, #10
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d9a:	801a      	strh	r2, [r3, #0]
 8005d9c:	e02a      	b.n	8005df4 <USB_EPStartXfer+0x7b0>
 8005d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	785b      	ldrb	r3, [r3, #1]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d122      	bne.n	8005df4 <USB_EPStartXfer+0x7b0>
 8005dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	653b      	str	r3, [r7, #80]	; 0x50
 8005dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	461a      	mov	r2, r3
 8005dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dce:	4413      	add	r3, r2
 8005dd0:	653b      	str	r3, [r7, #80]	; 0x50
 8005dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	011a      	lsls	r2, r3, #4
 8005de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005de2:	4413      	add	r3, r2
 8005de4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005de8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005df2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	891b      	ldrh	r3, [r3, #8]
 8005e00:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	6959      	ldr	r1, [r3, #20]
 8005e10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e1a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005e1e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005e22:	6800      	ldr	r0, [r0, #0]
 8005e24:	f001 fb84 	bl	8007530 <USB_WritePMA>
            ep->xfer_buff += len;
 8005e28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	695a      	ldr	r2, [r3, #20]
 8005e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e38:	441a      	add	r2, r3
 8005e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6a1a      	ldr	r2, [r3, #32]
 8005e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d90f      	bls.n	8005e82 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8005e62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6a1a      	ldr	r2, [r3, #32]
 8005e6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e72:	1ad2      	subs	r2, r2, r3
 8005e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	621a      	str	r2, [r3, #32]
 8005e80:	e00e      	b.n	8005ea0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8005e82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005e92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ea4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	643b      	str	r3, [r7, #64]	; 0x40
 8005eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	785b      	ldrb	r3, [r3, #1]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d16d      	bne.n	8005f98 <USB_EPStartXfer+0x954>
 8005ebc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ecc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	461a      	mov	r2, r3
 8005eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005edc:	4413      	add	r3, r2
 8005ede:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	011a      	lsls	r2, r3, #4
 8005eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d112      	bne.n	8005f26 <USB_EPStartXfer+0x8e2>
 8005f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0e:	801a      	strh	r2, [r3, #0]
 8005f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f12:	881b      	ldrh	r3, [r3, #0]
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f22:	801a      	strh	r2, [r3, #0]
 8005f24:	e05d      	b.n	8005fe2 <USB_EPStartXfer+0x99e>
 8005f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f2a:	2b3e      	cmp	r3, #62	; 0x3e
 8005f2c:	d817      	bhi.n	8005f5e <USB_EPStartXfer+0x91a>
 8005f2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f32:	085b      	lsrs	r3, r3, #1
 8005f34:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005f38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f3c:	f003 0301 	and.w	r3, r3, #1
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d004      	beq.n	8005f4e <USB_EPStartXfer+0x90a>
 8005f44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f48:	3301      	adds	r3, #1
 8005f4a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005f4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	029b      	lsls	r3, r3, #10
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f5a:	801a      	strh	r2, [r3, #0]
 8005f5c:	e041      	b.n	8005fe2 <USB_EPStartXfer+0x99e>
 8005f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f62:	095b      	lsrs	r3, r3, #5
 8005f64:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f6c:	f003 031f 	and.w	r3, r3, #31
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d104      	bne.n	8005f7e <USB_EPStartXfer+0x93a>
 8005f74:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005f7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	029b      	lsls	r3, r3, #10
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f94:	801a      	strh	r2, [r3, #0]
 8005f96:	e024      	b.n	8005fe2 <USB_EPStartXfer+0x99e>
 8005f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	785b      	ldrb	r3, [r3, #1]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d11c      	bne.n	8005fe2 <USB_EPStartXfer+0x99e>
 8005fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	461a      	mov	r2, r3
 8005fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fbc:	4413      	add	r3, r2
 8005fbe:	643b      	str	r3, [r7, #64]	; 0x40
 8005fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	011a      	lsls	r2, r3, #4
 8005fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	895b      	ldrh	r3, [r3, #10]
 8005fee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ff6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6959      	ldr	r1, [r3, #20]
 8005ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006002:	b29b      	uxth	r3, r3
 8006004:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006008:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800600c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006010:	6800      	ldr	r0, [r0, #0]
 8006012:	f001 fa8d 	bl	8007530 <USB_WritePMA>
 8006016:	f000 bc5a 	b.w	80068ce <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800601a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800601e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800602a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800602e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006038:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	881b      	ldrh	r3, [r3, #0]
 8006046:	b29b      	uxth	r3, r3
 8006048:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800604c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006050:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006058:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006062:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	441a      	add	r2, r3
 800606e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800607a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800607e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006082:	b29b      	uxth	r3, r3
 8006084:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800608a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006096:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	461a      	mov	r2, r3
 80060a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060a6:	4413      	add	r3, r2
 80060a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	011a      	lsls	r2, r3, #4
 80060b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060ba:	4413      	add	r3, r2
 80060bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80060c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80060cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	891b      	ldrh	r3, [r3, #8]
 80060d8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6959      	ldr	r1, [r3, #20]
 80060e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80060f2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80060f6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80060fa:	6800      	ldr	r0, [r0, #0]
 80060fc:	f001 fa18 	bl	8007530 <USB_WritePMA>
 8006100:	e3e5      	b.n	80068ce <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006106:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006110:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4413      	add	r3, r2
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	b29b      	uxth	r3, r3
 8006120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006128:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800612c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006130:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800613a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	441a      	add	r2, r3
 8006146:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800614a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800614e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006152:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800615a:	b29b      	uxth	r3, r3
 800615c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800615e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006162:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6a1a      	ldr	r2, [r3, #32]
 800616a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800616e:	1ad2      	subs	r2, r2, r3
 8006170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006174:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800617c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006180:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800618a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	b29b      	uxth	r3, r3
 800619a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f000 81bc 	beq.w	800651c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80061a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	785b      	ldrb	r3, [r3, #1]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d16d      	bne.n	800629e <USB_EPStartXfer+0xc5a>
 80061c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80061ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061dc:	b29b      	uxth	r3, r3
 80061de:	461a      	mov	r2, r3
 80061e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061e2:	4413      	add	r3, r2
 80061e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80061e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	011a      	lsls	r2, r3, #4
 80061f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061f6:	4413      	add	r3, r2
 80061f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061fc:	677b      	str	r3, [r7, #116]	; 0x74
 80061fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006202:	2b00      	cmp	r3, #0
 8006204:	d112      	bne.n	800622c <USB_EPStartXfer+0xbe8>
 8006206:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	b29b      	uxth	r3, r3
 800620c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006210:	b29a      	uxth	r2, r3
 8006212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006214:	801a      	strh	r2, [r3, #0]
 8006216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	b29b      	uxth	r3, r3
 800621c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006224:	b29a      	uxth	r2, r3
 8006226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006228:	801a      	strh	r2, [r3, #0]
 800622a:	e060      	b.n	80062ee <USB_EPStartXfer+0xcaa>
 800622c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006230:	2b3e      	cmp	r3, #62	; 0x3e
 8006232:	d817      	bhi.n	8006264 <USB_EPStartXfer+0xc20>
 8006234:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006238:	085b      	lsrs	r3, r3, #1
 800623a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800623e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d004      	beq.n	8006254 <USB_EPStartXfer+0xc10>
 800624a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800624e:	3301      	adds	r3, #1
 8006250:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006254:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006258:	b29b      	uxth	r3, r3
 800625a:	029b      	lsls	r3, r3, #10
 800625c:	b29a      	uxth	r2, r3
 800625e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006260:	801a      	strh	r2, [r3, #0]
 8006262:	e044      	b.n	80062ee <USB_EPStartXfer+0xcaa>
 8006264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006268:	095b      	lsrs	r3, r3, #5
 800626a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800626e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006272:	f003 031f 	and.w	r3, r3, #31
 8006276:	2b00      	cmp	r3, #0
 8006278:	d104      	bne.n	8006284 <USB_EPStartXfer+0xc40>
 800627a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800627e:	3b01      	subs	r3, #1
 8006280:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006284:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006288:	b29b      	uxth	r3, r3
 800628a:	029b      	lsls	r3, r3, #10
 800628c:	b29b      	uxth	r3, r3
 800628e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006296:	b29a      	uxth	r2, r3
 8006298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800629a:	801a      	strh	r2, [r3, #0]
 800629c:	e027      	b.n	80062ee <USB_EPStartXfer+0xcaa>
 800629e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	785b      	ldrb	r3, [r3, #1]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d11f      	bne.n	80062ee <USB_EPStartXfer+0xcaa>
 80062ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062bc:	b29b      	uxth	r3, r3
 80062be:	461a      	mov	r2, r3
 80062c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80062c4:	4413      	add	r3, r2
 80062c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	011a      	lsls	r2, r3, #4
 80062d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80062dc:	4413      	add	r3, r2
 80062de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80062e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80062ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	895b      	ldrh	r3, [r3, #10]
 80062fa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006302:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6959      	ldr	r1, [r3, #20]
 800630a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800630e:	b29b      	uxth	r3, r3
 8006310:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006314:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006318:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800631c:	6800      	ldr	r0, [r0, #0]
 800631e:	f001 f907 	bl	8007530 <USB_WritePMA>
          ep->xfer_buff += len;
 8006322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006326:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	695a      	ldr	r2, [r3, #20]
 800632e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006332:	441a      	add	r2, r3
 8006334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006338:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006344:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6a1a      	ldr	r2, [r3, #32]
 800634c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006350:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	429a      	cmp	r2, r3
 800635a:	d90f      	bls.n	800637c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800635c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006360:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6a1a      	ldr	r2, [r3, #32]
 8006368:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800636c:	1ad2      	subs	r2, r2, r3
 800636e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006372:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	621a      	str	r2, [r3, #32]
 800637a:	e00e      	b.n	800639a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800637c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006380:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800638c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006390:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2200      	movs	r2, #0
 8006398:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800639a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f000 8295 	beq.w	80068ce <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	785b      	ldrb	r3, [r3, #1]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d16d      	bne.n	8006490 <USB_EPStartXfer+0xe4c>
 80063b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	66bb      	str	r3, [r7, #104]	; 0x68
 80063c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	461a      	mov	r2, r3
 80063d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063d4:	4413      	add	r3, r2
 80063d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80063d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	011a      	lsls	r2, r3, #4
 80063e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063e8:	4413      	add	r3, r2
 80063ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063ee:	667b      	str	r3, [r7, #100]	; 0x64
 80063f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d112      	bne.n	800641e <USB_EPStartXfer+0xdda>
 80063f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006402:	b29a      	uxth	r2, r3
 8006404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006406:	801a      	strh	r2, [r3, #0]
 8006408:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800640a:	881b      	ldrh	r3, [r3, #0]
 800640c:	b29b      	uxth	r3, r3
 800640e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006412:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006416:	b29a      	uxth	r2, r3
 8006418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800641a:	801a      	strh	r2, [r3, #0]
 800641c:	e063      	b.n	80064e6 <USB_EPStartXfer+0xea2>
 800641e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006422:	2b3e      	cmp	r3, #62	; 0x3e
 8006424:	d817      	bhi.n	8006456 <USB_EPStartXfer+0xe12>
 8006426:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800642a:	085b      	lsrs	r3, r3, #1
 800642c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006430:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006434:	f003 0301 	and.w	r3, r3, #1
 8006438:	2b00      	cmp	r3, #0
 800643a:	d004      	beq.n	8006446 <USB_EPStartXfer+0xe02>
 800643c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006440:	3301      	adds	r3, #1
 8006442:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800644a:	b29b      	uxth	r3, r3
 800644c:	029b      	lsls	r3, r3, #10
 800644e:	b29a      	uxth	r2, r3
 8006450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006452:	801a      	strh	r2, [r3, #0]
 8006454:	e047      	b.n	80064e6 <USB_EPStartXfer+0xea2>
 8006456:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800645a:	095b      	lsrs	r3, r3, #5
 800645c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006460:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006464:	f003 031f 	and.w	r3, r3, #31
 8006468:	2b00      	cmp	r3, #0
 800646a:	d104      	bne.n	8006476 <USB_EPStartXfer+0xe32>
 800646c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006470:	3b01      	subs	r3, #1
 8006472:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800647a:	b29b      	uxth	r3, r3
 800647c:	029b      	lsls	r3, r3, #10
 800647e:	b29b      	uxth	r3, r3
 8006480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006488:	b29a      	uxth	r2, r3
 800648a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800648c:	801a      	strh	r2, [r3, #0]
 800648e:	e02a      	b.n	80064e6 <USB_EPStartXfer+0xea2>
 8006490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006494:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	785b      	ldrb	r3, [r3, #1]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d122      	bne.n	80064e6 <USB_EPStartXfer+0xea2>
 80064a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	673b      	str	r3, [r7, #112]	; 0x70
 80064ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	461a      	mov	r2, r3
 80064be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064c0:	4413      	add	r3, r2
 80064c2:	673b      	str	r3, [r7, #112]	; 0x70
 80064c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	011a      	lsls	r2, r3, #4
 80064d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064d4:	4413      	add	r3, r2
 80064d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80064e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	891b      	ldrh	r3, [r3, #8]
 80064f2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6959      	ldr	r1, [r3, #20]
 8006502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006506:	b29b      	uxth	r3, r3
 8006508:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800650c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006510:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006514:	6800      	ldr	r0, [r0, #0]
 8006516:	f001 f80b 	bl	8007530 <USB_WritePMA>
 800651a:	e1d8      	b.n	80068ce <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800651c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006520:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	785b      	ldrb	r3, [r3, #1]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d178      	bne.n	800661e <USB_EPStartXfer+0xfda>
 800652c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006530:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800653a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800653e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006548:	b29b      	uxth	r3, r3
 800654a:	461a      	mov	r2, r3
 800654c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006550:	4413      	add	r3, r2
 8006552:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006556:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800655a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	011a      	lsls	r2, r3, #4
 8006564:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006568:	4413      	add	r3, r2
 800656a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800656e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006572:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006576:	2b00      	cmp	r3, #0
 8006578:	d116      	bne.n	80065a8 <USB_EPStartXfer+0xf64>
 800657a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	b29b      	uxth	r3, r3
 8006582:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006586:	b29a      	uxth	r2, r3
 8006588:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800658c:	801a      	strh	r2, [r3, #0]
 800658e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	b29b      	uxth	r3, r3
 8006596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800659a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800659e:	b29a      	uxth	r2, r3
 80065a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065a4:	801a      	strh	r2, [r3, #0]
 80065a6:	e06b      	b.n	8006680 <USB_EPStartXfer+0x103c>
 80065a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ac:	2b3e      	cmp	r3, #62	; 0x3e
 80065ae:	d818      	bhi.n	80065e2 <USB_EPStartXfer+0xf9e>
 80065b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065b4:	085b      	lsrs	r3, r3, #1
 80065b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80065ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d004      	beq.n	80065d0 <USB_EPStartXfer+0xf8c>
 80065c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80065ca:	3301      	adds	r3, #1
 80065cc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80065d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	029b      	lsls	r3, r3, #10
 80065d8:	b29a      	uxth	r2, r3
 80065da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065de:	801a      	strh	r2, [r3, #0]
 80065e0:	e04e      	b.n	8006680 <USB_EPStartXfer+0x103c>
 80065e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065e6:	095b      	lsrs	r3, r3, #5
 80065e8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80065ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065f0:	f003 031f 	and.w	r3, r3, #31
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d104      	bne.n	8006602 <USB_EPStartXfer+0xfbe>
 80065f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80065fc:	3b01      	subs	r3, #1
 80065fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006602:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006606:	b29b      	uxth	r3, r3
 8006608:	029b      	lsls	r3, r3, #10
 800660a:	b29b      	uxth	r3, r3
 800660c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006614:	b29a      	uxth	r2, r3
 8006616:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800661a:	801a      	strh	r2, [r3, #0]
 800661c:	e030      	b.n	8006680 <USB_EPStartXfer+0x103c>
 800661e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006622:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	785b      	ldrb	r3, [r3, #1]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d128      	bne.n	8006680 <USB_EPStartXfer+0x103c>
 800662e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006632:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800663c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006640:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800664a:	b29b      	uxth	r3, r3
 800664c:	461a      	mov	r2, r3
 800664e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006652:	4413      	add	r3, r2
 8006654:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800665c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	011a      	lsls	r2, r3, #4
 8006666:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800666a:	4413      	add	r3, r2
 800666c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006670:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006674:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006678:	b29a      	uxth	r2, r3
 800667a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800667e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006684:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	891b      	ldrh	r3, [r3, #8]
 800668c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006694:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6959      	ldr	r1, [r3, #20]
 800669c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80066a6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80066aa:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80066ae:	6800      	ldr	r0, [r0, #0]
 80066b0:	f000 ff3e 	bl	8007530 <USB_WritePMA>
          ep->xfer_buff += len;
 80066b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	695a      	ldr	r2, [r3, #20]
 80066c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066c4:	441a      	add	r2, r3
 80066c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80066d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6a1a      	ldr	r2, [r3, #32]
 80066de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d90f      	bls.n	800670e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80066ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6a1a      	ldr	r2, [r3, #32]
 80066fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066fe:	1ad2      	subs	r2, r2, r3
 8006700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006704:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	621a      	str	r2, [r3, #32]
 800670c:	e00e      	b.n	800672c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800670e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800671e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006722:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2200      	movs	r2, #0
 800672a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800672c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 80cc 	beq.w	80068ce <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800673a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006748:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	785b      	ldrb	r3, [r3, #1]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d178      	bne.n	8006846 <USB_EPStartXfer+0x1202>
 8006754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006758:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006766:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006770:	b29b      	uxth	r3, r3
 8006772:	461a      	mov	r2, r3
 8006774:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006778:	4413      	add	r3, r2
 800677a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800677e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006782:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	011a      	lsls	r2, r3, #4
 800678c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006790:	4413      	add	r3, r2
 8006792:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006796:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800679a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d116      	bne.n	80067d0 <USB_EPStartXfer+0x118c>
 80067a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067b4:	801a      	strh	r2, [r3, #0]
 80067b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	b29b      	uxth	r3, r3
 80067be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067cc:	801a      	strh	r2, [r3, #0]
 80067ce:	e064      	b.n	800689a <USB_EPStartXfer+0x1256>
 80067d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067d4:	2b3e      	cmp	r3, #62	; 0x3e
 80067d6:	d818      	bhi.n	800680a <USB_EPStartXfer+0x11c6>
 80067d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067dc:	085b      	lsrs	r3, r3, #1
 80067de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80067e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d004      	beq.n	80067f8 <USB_EPStartXfer+0x11b4>
 80067ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067f2:	3301      	adds	r3, #1
 80067f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80067f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	029b      	lsls	r3, r3, #10
 8006800:	b29a      	uxth	r2, r3
 8006802:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006806:	801a      	strh	r2, [r3, #0]
 8006808:	e047      	b.n	800689a <USB_EPStartXfer+0x1256>
 800680a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800680e:	095b      	lsrs	r3, r3, #5
 8006810:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006818:	f003 031f 	and.w	r3, r3, #31
 800681c:	2b00      	cmp	r3, #0
 800681e:	d104      	bne.n	800682a <USB_EPStartXfer+0x11e6>
 8006820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006824:	3b01      	subs	r3, #1
 8006826:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800682a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800682e:	b29b      	uxth	r3, r3
 8006830:	029b      	lsls	r3, r3, #10
 8006832:	b29b      	uxth	r3, r3
 8006834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800683c:	b29a      	uxth	r2, r3
 800683e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006842:	801a      	strh	r2, [r3, #0]
 8006844:	e029      	b.n	800689a <USB_EPStartXfer+0x1256>
 8006846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800684a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	785b      	ldrb	r3, [r3, #1]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d121      	bne.n	800689a <USB_EPStartXfer+0x1256>
 8006856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006864:	b29b      	uxth	r3, r3
 8006866:	461a      	mov	r2, r3
 8006868:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800686c:	4413      	add	r3, r2
 800686e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006876:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	011a      	lsls	r2, r3, #4
 8006880:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006884:	4413      	add	r3, r2
 8006886:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800688a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800688e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006892:	b29a      	uxth	r2, r3
 8006894:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006898:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800689a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800689e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	895b      	ldrh	r3, [r3, #10]
 80068a6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6959      	ldr	r1, [r3, #20]
 80068b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80068c0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80068c4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80068c8:	6800      	ldr	r0, [r0, #0]
 80068ca:	f000 fe31 	bl	8007530 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80068ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068f0:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80068f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068fc:	8013      	strh	r3, [r2, #0]
 80068fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006902:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006906:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800690a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800690e:	8812      	ldrh	r2, [r2, #0]
 8006910:	f082 0210 	eor.w	r2, r2, #16
 8006914:	801a      	strh	r2, [r3, #0]
 8006916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800691a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800691e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006922:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006926:	8812      	ldrh	r2, [r2, #0]
 8006928:	f082 0220 	eor.w	r2, r2, #32
 800692c:	801a      	strh	r2, [r3, #0]
 800692e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006932:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800693c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	441a      	add	r2, r3
 8006948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800694c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800695a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800695e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006962:	b29b      	uxth	r3, r3
 8006964:	8013      	strh	r3, [r2, #0]
 8006966:	f000 bc9f 	b.w	80072a8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800696a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800696e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	7b1b      	ldrb	r3, [r3, #12]
 8006976:	2b00      	cmp	r3, #0
 8006978:	f040 80ae 	bne.w	8006ad8 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800697c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006980:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	699a      	ldr	r2, [r3, #24]
 8006988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800698c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	429a      	cmp	r2, r3
 8006996:	d917      	bls.n	80069c8 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800699c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80069a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	699a      	ldr	r2, [r3, #24]
 80069b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b8:	1ad2      	subs	r2, r2, r3
 80069ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	619a      	str	r2, [r3, #24]
 80069c6:	e00e      	b.n	80069e6 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80069c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80069d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2200      	movs	r2, #0
 80069e4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80069e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	461a      	mov	r2, r3
 8006a06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	011a      	lsls	r2, r3, #4
 8006a1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006a22:	4413      	add	r3, r2
 8006a24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d116      	bne.n	8006a62 <USB_EPStartXfer+0x141e>
 8006a34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a38:	881b      	ldrh	r3, [r3, #0]
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a46:	801a      	strh	r2, [r3, #0]
 8006a48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a4c:	881b      	ldrh	r3, [r3, #0]
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a5e:	801a      	strh	r2, [r3, #0]
 8006a60:	e3e8      	b.n	8007234 <USB_EPStartXfer+0x1bf0>
 8006a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a66:	2b3e      	cmp	r3, #62	; 0x3e
 8006a68:	d818      	bhi.n	8006a9c <USB_EPStartXfer+0x1458>
 8006a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a6e:	085b      	lsrs	r3, r3, #1
 8006a70:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a78:	f003 0301 	and.w	r3, r3, #1
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d004      	beq.n	8006a8a <USB_EPStartXfer+0x1446>
 8006a80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a84:	3301      	adds	r3, #1
 8006a86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006a8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	029b      	lsls	r3, r3, #10
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a98:	801a      	strh	r2, [r3, #0]
 8006a9a:	e3cb      	b.n	8007234 <USB_EPStartXfer+0x1bf0>
 8006a9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aa0:	095b      	lsrs	r3, r3, #5
 8006aa2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aaa:	f003 031f 	and.w	r3, r3, #31
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d104      	bne.n	8006abc <USB_EPStartXfer+0x1478>
 8006ab2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006abc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	029b      	lsls	r3, r3, #10
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ad4:	801a      	strh	r2, [r3, #0]
 8006ad6:	e3ad      	b.n	8007234 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006ad8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006adc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	78db      	ldrb	r3, [r3, #3]
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	f040 8200 	bne.w	8006eea <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	785b      	ldrb	r3, [r3, #1]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f040 8091 	bne.w	8006c1e <USB_EPStartXfer+0x15da>
 8006afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b20:	4413      	add	r3, r2
 8006b22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	011a      	lsls	r2, r3, #4
 8006b34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b38:	4413      	add	r3, r2
 8006b3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d116      	bne.n	8006b80 <USB_EPStartXfer+0x153c>
 8006b52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b56:	881b      	ldrh	r3, [r3, #0]
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b64:	801a      	strh	r2, [r3, #0]
 8006b66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b7c:	801a      	strh	r2, [r3, #0]
 8006b7e:	e083      	b.n	8006c88 <USB_EPStartXfer+0x1644>
 8006b80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	2b3e      	cmp	r3, #62	; 0x3e
 8006b8e:	d820      	bhi.n	8006bd2 <USB_EPStartXfer+0x158e>
 8006b90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	085b      	lsrs	r3, r3, #1
 8006b9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d004      	beq.n	8006bc0 <USB_EPStartXfer+0x157c>
 8006bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bba:	3301      	adds	r3, #1
 8006bbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	029b      	lsls	r3, r3, #10
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bce:	801a      	strh	r2, [r3, #0]
 8006bd0:	e05a      	b.n	8006c88 <USB_EPStartXfer+0x1644>
 8006bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	095b      	lsrs	r3, r3, #5
 8006be0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	f003 031f 	and.w	r3, r3, #31
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d104      	bne.n	8006c02 <USB_EPStartXfer+0x15be>
 8006bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	029b      	lsls	r3, r3, #10
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c1a:	801a      	strh	r2, [r3, #0]
 8006c1c:	e034      	b.n	8006c88 <USB_EPStartXfer+0x1644>
 8006c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	785b      	ldrb	r3, [r3, #1]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d12c      	bne.n	8006c88 <USB_EPStartXfer+0x1644>
 8006c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c52:	4413      	add	r3, r2
 8006c54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	011a      	lsls	r2, r3, #4
 8006c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006c86:	801a      	strh	r2, [r3, #0]
 8006c88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	785b      	ldrb	r3, [r3, #1]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f040 8091 	bne.w	8006dca <USB_EPStartXfer+0x1786>
 8006ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006ccc:	4413      	add	r3, r2
 8006cce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	011a      	lsls	r2, r3, #4
 8006ce0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006cea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d116      	bne.n	8006d2c <USB_EPStartXfer+0x16e8>
 8006cfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d02:	881b      	ldrh	r3, [r3, #0]
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d10:	801a      	strh	r2, [r3, #0]
 8006d12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d16:	881b      	ldrh	r3, [r3, #0]
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d28:	801a      	strh	r2, [r3, #0]
 8006d2a:	e07c      	b.n	8006e26 <USB_EPStartXfer+0x17e2>
 8006d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	2b3e      	cmp	r3, #62	; 0x3e
 8006d3a:	d820      	bhi.n	8006d7e <USB_EPStartXfer+0x173a>
 8006d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	085b      	lsrs	r3, r3, #1
 8006d4a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d004      	beq.n	8006d6c <USB_EPStartXfer+0x1728>
 8006d62:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d66:	3301      	adds	r3, #1
 8006d68:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d6c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	029b      	lsls	r3, r3, #10
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d7a:	801a      	strh	r2, [r3, #0]
 8006d7c:	e053      	b.n	8006e26 <USB_EPStartXfer+0x17e2>
 8006d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	095b      	lsrs	r3, r3, #5
 8006d8c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	f003 031f 	and.w	r3, r3, #31
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d104      	bne.n	8006dae <USB_EPStartXfer+0x176a>
 8006da4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006da8:	3b01      	subs	r3, #1
 8006daa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006dae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	029b      	lsls	r3, r3, #10
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006dc6:	801a      	strh	r2, [r3, #0]
 8006dc8:	e02d      	b.n	8006e26 <USB_EPStartXfer+0x17e2>
 8006dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	785b      	ldrb	r3, [r3, #1]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d125      	bne.n	8006e26 <USB_EPStartXfer+0x17e2>
 8006dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	461a      	mov	r2, r3
 8006dec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006df0:	4413      	add	r3, r2
 8006df2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	011a      	lsls	r2, r3, #4
 8006e04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e08:	4413      	add	r3, r2
 8006e0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006e24:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f000 81fe 	beq.w	8007234 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006e58:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d005      	beq.n	8006e70 <USB_EPStartXfer+0x182c>
 8006e64:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10d      	bne.n	8006e8c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006e70:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f040 81db 	bne.w	8007234 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006e7e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f040 81d4 	bne.w	8007234 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	881b      	ldrh	r3, [r3, #0]
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	441a      	add	r2, r3
 8006ed0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ee0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	8013      	strh	r3, [r2, #0]
 8006ee8:	e1a4      	b.n	8007234 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	78db      	ldrb	r3, [r3, #3]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	f040 819a 	bne.w	8007230 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	699a      	ldr	r2, [r3, #24]
 8006f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d917      	bls.n	8006f48 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	699a      	ldr	r2, [r3, #24]
 8006f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f38:	1ad2      	subs	r2, r2, r3
 8006f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	619a      	str	r2, [r3, #24]
 8006f46:	e00e      	b.n	8006f66 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2200      	movs	r2, #0
 8006f64:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	785b      	ldrb	r3, [r3, #1]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d178      	bne.n	8007068 <USB_EPStartXfer+0x1a24>
 8006f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	461a      	mov	r2, r3
 8006f96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	011a      	lsls	r2, r3, #4
 8006fae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006fb8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d116      	bne.n	8006ff2 <USB_EPStartXfer+0x19ae>
 8006fc4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fd6:	801a      	strh	r2, [r3, #0]
 8006fd8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fee:	801a      	strh	r2, [r3, #0]
 8006ff0:	e06b      	b.n	80070ca <USB_EPStartXfer+0x1a86>
 8006ff2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ff6:	2b3e      	cmp	r3, #62	; 0x3e
 8006ff8:	d818      	bhi.n	800702c <USB_EPStartXfer+0x19e8>
 8006ffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ffe:	085b      	lsrs	r3, r3, #1
 8007000:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007004:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	2b00      	cmp	r3, #0
 800700e:	d004      	beq.n	800701a <USB_EPStartXfer+0x19d6>
 8007010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007014:	3301      	adds	r3, #1
 8007016:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800701a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800701e:	b29b      	uxth	r3, r3
 8007020:	029b      	lsls	r3, r3, #10
 8007022:	b29a      	uxth	r2, r3
 8007024:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007028:	801a      	strh	r2, [r3, #0]
 800702a:	e04e      	b.n	80070ca <USB_EPStartXfer+0x1a86>
 800702c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007030:	095b      	lsrs	r3, r3, #5
 8007032:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007036:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800703a:	f003 031f 	and.w	r3, r3, #31
 800703e:	2b00      	cmp	r3, #0
 8007040:	d104      	bne.n	800704c <USB_EPStartXfer+0x1a08>
 8007042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007046:	3b01      	subs	r3, #1
 8007048:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800704c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007050:	b29b      	uxth	r3, r3
 8007052:	029b      	lsls	r3, r3, #10
 8007054:	b29b      	uxth	r3, r3
 8007056:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800705a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800705e:	b29a      	uxth	r2, r3
 8007060:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007064:	801a      	strh	r2, [r3, #0]
 8007066:	e030      	b.n	80070ca <USB_EPStartXfer+0x1a86>
 8007068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800706c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	785b      	ldrb	r3, [r3, #1]
 8007074:	2b01      	cmp	r3, #1
 8007076:	d128      	bne.n	80070ca <USB_EPStartXfer+0x1a86>
 8007078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800707c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800708a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007094:	b29b      	uxth	r3, r3
 8007096:	461a      	mov	r2, r3
 8007098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800709c:	4413      	add	r3, r2
 800709e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80070a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	011a      	lsls	r2, r3, #4
 80070b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070b4:	4413      	add	r3, r2
 80070b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80070be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80070c8:	801a      	strh	r2, [r3, #0]
 80070ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	785b      	ldrb	r3, [r3, #1]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d178      	bne.n	80071da <USB_EPStartXfer+0x1b96>
 80070e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80070f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007104:	b29b      	uxth	r3, r3
 8007106:	461a      	mov	r2, r3
 8007108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800710c:	4413      	add	r3, r2
 800710e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007116:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	011a      	lsls	r2, r3, #4
 8007120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007124:	4413      	add	r3, r2
 8007126:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800712a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800712e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007132:	2b00      	cmp	r3, #0
 8007134:	d116      	bne.n	8007164 <USB_EPStartXfer+0x1b20>
 8007136:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800713a:	881b      	ldrh	r3, [r3, #0]
 800713c:	b29b      	uxth	r3, r3
 800713e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007142:	b29a      	uxth	r2, r3
 8007144:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007148:	801a      	strh	r2, [r3, #0]
 800714a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800714e:	881b      	ldrh	r3, [r3, #0]
 8007150:	b29b      	uxth	r3, r3
 8007152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800715a:	b29a      	uxth	r2, r3
 800715c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007160:	801a      	strh	r2, [r3, #0]
 8007162:	e067      	b.n	8007234 <USB_EPStartXfer+0x1bf0>
 8007164:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007168:	2b3e      	cmp	r3, #62	; 0x3e
 800716a:	d818      	bhi.n	800719e <USB_EPStartXfer+0x1b5a>
 800716c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007170:	085b      	lsrs	r3, r3, #1
 8007172:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007176:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800717a:	f003 0301 	and.w	r3, r3, #1
 800717e:	2b00      	cmp	r3, #0
 8007180:	d004      	beq.n	800718c <USB_EPStartXfer+0x1b48>
 8007182:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007186:	3301      	adds	r3, #1
 8007188:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800718c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007190:	b29b      	uxth	r3, r3
 8007192:	029b      	lsls	r3, r3, #10
 8007194:	b29a      	uxth	r2, r3
 8007196:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800719a:	801a      	strh	r2, [r3, #0]
 800719c:	e04a      	b.n	8007234 <USB_EPStartXfer+0x1bf0>
 800719e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071a2:	095b      	lsrs	r3, r3, #5
 80071a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80071a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ac:	f003 031f 	and.w	r3, r3, #31
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d104      	bne.n	80071be <USB_EPStartXfer+0x1b7a>
 80071b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071b8:	3b01      	subs	r3, #1
 80071ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80071be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	029b      	lsls	r3, r3, #10
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071d6:	801a      	strh	r2, [r3, #0]
 80071d8:	e02c      	b.n	8007234 <USB_EPStartXfer+0x1bf0>
 80071da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	785b      	ldrb	r3, [r3, #1]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d124      	bne.n	8007234 <USB_EPStartXfer+0x1bf0>
 80071ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	461a      	mov	r2, r3
 80071fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007200:	4413      	add	r3, r2
 8007202:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	011a      	lsls	r2, r3, #4
 8007214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007218:	4413      	add	r3, r2
 800721a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800721e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007226:	b29a      	uxth	r2, r3
 8007228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800722c:	801a      	strh	r2, [r3, #0]
 800722e:	e001      	b.n	8007234 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e03a      	b.n	80072aa <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007234:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007238:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007242:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	b29b      	uxth	r3, r3
 8007252:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800725e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007262:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007266:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800726a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800726e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007272:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800727a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007284:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	441a      	add	r2, r3
 8007290:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007294:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007298:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800729c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	785b      	ldrb	r3, [r3, #1]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d020      	beq.n	8007308 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4413      	add	r3, r2
 80072d0:	881b      	ldrh	r3, [r3, #0]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072dc:	81bb      	strh	r3, [r7, #12]
 80072de:	89bb      	ldrh	r3, [r7, #12]
 80072e0:	f083 0310 	eor.w	r3, r3, #16
 80072e4:	81bb      	strh	r3, [r7, #12]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	441a      	add	r2, r3
 80072f0:	89bb      	ldrh	r3, [r7, #12]
 80072f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007302:	b29b      	uxth	r3, r3
 8007304:	8013      	strh	r3, [r2, #0]
 8007306:	e01f      	b.n	8007348 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	4413      	add	r3, r2
 8007312:	881b      	ldrh	r3, [r3, #0]
 8007314:	b29b      	uxth	r3, r3
 8007316:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800731a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800731e:	81fb      	strh	r3, [r7, #14]
 8007320:	89fb      	ldrh	r3, [r7, #14]
 8007322:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007326:	81fb      	strh	r3, [r7, #14]
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	441a      	add	r2, r3
 8007332:	89fb      	ldrh	r3, [r7, #14]
 8007334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800733c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007344:	b29b      	uxth	r3, r3
 8007346:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	bc80      	pop	{r7}
 8007352:	4770      	bx	lr

08007354 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007354:	b480      	push	{r7}
 8007356:	b087      	sub	sp, #28
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	7b1b      	ldrb	r3, [r3, #12]
 8007362:	2b00      	cmp	r3, #0
 8007364:	f040 809d 	bne.w	80074a2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	785b      	ldrb	r3, [r3, #1]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d04c      	beq.n	800740a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4413      	add	r3, r2
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	823b      	strh	r3, [r7, #16]
 800737e:	8a3b      	ldrh	r3, [r7, #16]
 8007380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007384:	2b00      	cmp	r3, #0
 8007386:	d01b      	beq.n	80073c0 <USB_EPClearStall+0x6c>
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	881b      	ldrh	r3, [r3, #0]
 8007394:	b29b      	uxth	r3, r3
 8007396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800739a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800739e:	81fb      	strh	r3, [r7, #14]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	441a      	add	r2, r3
 80073aa:	89fb      	ldrh	r3, [r7, #14]
 80073ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073bc:	b29b      	uxth	r3, r3
 80073be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	78db      	ldrb	r3, [r3, #3]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d06c      	beq.n	80074a2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073de:	81bb      	strh	r3, [r7, #12]
 80073e0:	89bb      	ldrh	r3, [r7, #12]
 80073e2:	f083 0320 	eor.w	r3, r3, #32
 80073e6:	81bb      	strh	r3, [r7, #12]
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	441a      	add	r2, r3
 80073f2:	89bb      	ldrh	r3, [r7, #12]
 80073f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007404:	b29b      	uxth	r3, r3
 8007406:	8013      	strh	r3, [r2, #0]
 8007408:	e04b      	b.n	80074a2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	82fb      	strh	r3, [r7, #22]
 8007418:	8afb      	ldrh	r3, [r7, #22]
 800741a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d01b      	beq.n	800745a <USB_EPClearStall+0x106>
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	b29b      	uxth	r3, r3
 8007430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007438:	82bb      	strh	r3, [r7, #20]
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	441a      	add	r2, r3
 8007444:	8abb      	ldrh	r3, [r7, #20]
 8007446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800744a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800744e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007456:	b29b      	uxth	r3, r3
 8007458:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	881b      	ldrh	r3, [r3, #0]
 8007466:	b29b      	uxth	r3, r3
 8007468:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800746c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007470:	827b      	strh	r3, [r7, #18]
 8007472:	8a7b      	ldrh	r3, [r7, #18]
 8007474:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007478:	827b      	strh	r3, [r7, #18]
 800747a:	8a7b      	ldrh	r3, [r7, #18]
 800747c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007480:	827b      	strh	r3, [r7, #18]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	441a      	add	r2, r3
 800748c:	8a7b      	ldrh	r3, [r7, #18]
 800748e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800749a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800749e:	b29b      	uxth	r3, r3
 80074a0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	371c      	adds	r7, #28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bc80      	pop	{r7}
 80074ac:	4770      	bx	lr

080074ae <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b083      	sub	sp, #12
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	460b      	mov	r3, r1
 80074b8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80074ba:	78fb      	ldrb	r3, [r7, #3]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d103      	bne.n	80074c8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2280      	movs	r2, #128	; 0x80
 80074c4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bc80      	pop	{r7}
 80074d2:	4770      	bx	lr

080074d4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bc80      	pop	{r7}
 80074e6:	4770      	bx	lr

080074e8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bc80      	pop	{r7}
 80074fa:	4770      	bx	lr

080074fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800750a:	b29b      	uxth	r3, r3
 800750c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800750e:	68fb      	ldr	r3, [r7, #12]
}
 8007510:	4618      	mov	r0, r3
 8007512:	3714      	adds	r7, #20
 8007514:	46bd      	mov	sp, r7
 8007516:	bc80      	pop	{r7}
 8007518:	4770      	bx	lr

0800751a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800751a:	b480      	push	{r7}
 800751c:	b083      	sub	sp, #12
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	bc80      	pop	{r7}
 800752e:	4770      	bx	lr

08007530 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007530:	b480      	push	{r7}
 8007532:	b08d      	sub	sp, #52	; 0x34
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	4611      	mov	r1, r2
 800753c:	461a      	mov	r2, r3
 800753e:	460b      	mov	r3, r1
 8007540:	80fb      	strh	r3, [r7, #6]
 8007542:	4613      	mov	r3, r2
 8007544:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007546:	88bb      	ldrh	r3, [r7, #4]
 8007548:	3301      	adds	r3, #1
 800754a:	085b      	lsrs	r3, r3, #1
 800754c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007556:	88fb      	ldrh	r3, [r7, #6]
 8007558:	005a      	lsls	r2, r3, #1
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	4413      	add	r3, r2
 800755e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007562:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007564:	6a3b      	ldr	r3, [r7, #32]
 8007566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007568:	e01e      	b.n	80075a8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007572:	3301      	adds	r3, #1
 8007574:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	b29b      	uxth	r3, r3
 800757c:	021b      	lsls	r3, r3, #8
 800757e:	b29b      	uxth	r3, r3
 8007580:	461a      	mov	r2, r3
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	4313      	orrs	r3, r2
 8007586:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	b29a      	uxth	r2, r3
 800758c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007592:	3302      	adds	r3, #2
 8007594:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007598:	3302      	adds	r3, #2
 800759a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	3301      	adds	r3, #1
 80075a0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80075a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a4:	3b01      	subs	r3, #1
 80075a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1dd      	bne.n	800756a <USB_WritePMA+0x3a>
  }
}
 80075ae:	bf00      	nop
 80075b0:	bf00      	nop
 80075b2:	3734      	adds	r7, #52	; 0x34
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bc80      	pop	{r7}
 80075b8:	4770      	bx	lr

080075ba <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b08b      	sub	sp, #44	; 0x2c
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	4611      	mov	r1, r2
 80075c6:	461a      	mov	r2, r3
 80075c8:	460b      	mov	r3, r1
 80075ca:	80fb      	strh	r3, [r7, #6]
 80075cc:	4613      	mov	r3, r2
 80075ce:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80075d0:	88bb      	ldrh	r3, [r7, #4]
 80075d2:	085b      	lsrs	r3, r3, #1
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80075e0:	88fb      	ldrh	r3, [r7, #6]
 80075e2:	005a      	lsls	r2, r3, #1
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	4413      	add	r3, r2
 80075e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075ec:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	627b      	str	r3, [r7, #36]	; 0x24
 80075f2:	e01b      	b.n	800762c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80075f4:	6a3b      	ldr	r3, [r7, #32]
 80075f6:	881b      	ldrh	r3, [r3, #0]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	3302      	adds	r3, #2
 8007600:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	b2da      	uxtb	r2, r3
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	3301      	adds	r3, #1
 800760e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	0a1b      	lsrs	r3, r3, #8
 8007614:	b2da      	uxtb	r2, r3
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	3301      	adds	r3, #1
 800761e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	3302      	adds	r3, #2
 8007624:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007628:	3b01      	subs	r3, #1
 800762a:	627b      	str	r3, [r7, #36]	; 0x24
 800762c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1e0      	bne.n	80075f4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007632:	88bb      	ldrh	r3, [r7, #4]
 8007634:	f003 0301 	and.w	r3, r3, #1
 8007638:	b29b      	uxth	r3, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	d007      	beq.n	800764e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	b29b      	uxth	r3, r3
 8007644:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	b2da      	uxtb	r2, r3
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	701a      	strb	r2, [r3, #0]
  }
}
 800764e:	bf00      	nop
 8007650:	372c      	adds	r7, #44	; 0x2c
 8007652:	46bd      	mov	sp, r7
 8007654:	bc80      	pop	{r7}
 8007656:	4770      	bx	lr

08007658 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800765c:	4904      	ldr	r1, [pc, #16]	; (8007670 <MX_FATFS_Init+0x18>)
 800765e:	4805      	ldr	r0, [pc, #20]	; (8007674 <MX_FATFS_Init+0x1c>)
 8007660:	f006 fa98 	bl	800db94 <FATFS_LinkDriver>
 8007664:	4603      	mov	r3, r0
 8007666:	461a      	mov	r2, r3
 8007668:	4b03      	ldr	r3, [pc, #12]	; (8007678 <MX_FATFS_Init+0x20>)
 800766a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800766c:	bf00      	nop
 800766e:	bd80      	pop	{r7, pc}
 8007670:	20002228 	.word	0x20002228
 8007674:	20000010 	.word	0x20000010
 8007678:	20002224 	.word	0x20002224

0800767c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800767c:	b480      	push	{r7}
 800767e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007680:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007682:	4618      	mov	r0, r3
 8007684:	46bd      	mov	sp, r7
 8007686:	bc80      	pop	{r7}
 8007688:	4770      	bx	lr

0800768a <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b082      	sub	sp, #8
 800768e:	af00      	add	r7, sp, #0
 8007690:	4603      	mov	r3, r0
 8007692:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 8007694:	79fb      	ldrb	r3, [r7, #7]
 8007696:	4618      	mov	r0, r3
 8007698:	f7f9 fa10 	bl	8000abc <SD_disk_initialize>
 800769c:	4603      	mov	r3, r0
 800769e:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	4603      	mov	r3, r0
 80076b0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 80076b2:	79fb      	ldrb	r3, [r7, #7]
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7f9 fae7 	bl	8000c88 <SD_disk_status>
 80076ba:	4603      	mov	r3, r0
 80076bc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
 80076d0:	603b      	str	r3, [r7, #0]
 80076d2:	4603      	mov	r3, r0
 80076d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 80076d6:	7bf8      	ldrb	r0, [r7, #15]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	68b9      	ldr	r1, [r7, #8]
 80076de:	f7f9 fae7 	bl	8000cb0 <SD_disk_read>
 80076e2:	4603      	mov	r3, r0
 80076e4:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3710      	adds	r7, #16
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b084      	sub	sp, #16
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
 80076f8:	603b      	str	r3, [r7, #0]
 80076fa:	4603      	mov	r3, r0
 80076fc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 80076fe:	7bf8      	ldrb	r0, [r7, #15]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	68b9      	ldr	r1, [r7, #8]
 8007706:	f7f9 fb3d 	bl	8000d84 <SD_disk_write>
 800770a:	4603      	mov	r3, r0
 800770c:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b082      	sub	sp, #8
 800771a:	af00      	add	r7, sp, #0
 800771c:	4603      	mov	r3, r0
 800771e:	603a      	str	r2, [r7, #0]
 8007720:	71fb      	strb	r3, [r7, #7]
 8007722:	460b      	mov	r3, r1
 8007724:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8007726:	79fb      	ldrb	r3, [r7, #7]
 8007728:	79b9      	ldrb	r1, [r7, #6]
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	4618      	mov	r0, r3
 800772e:	f7f9 fbad 	bl	8000e8c <SD_disk_ioctl>
 8007732:	4603      	mov	r3, r0
 8007734:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8007736:	4618      	mov	r0, r3
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b082      	sub	sp, #8
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	460b      	mov	r3, r1
 8007748:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	7c1b      	ldrb	r3, [r3, #16]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d115      	bne.n	800777e <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8007752:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007756:	2202      	movs	r2, #2
 8007758:	2101      	movs	r1, #1
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f006 fd65 	bl	800e22a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8007768:	f44f 7300 	mov.w	r3, #512	; 0x200
 800776c:	2202      	movs	r2, #2
 800776e:	2181      	movs	r1, #129	; 0x81
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f006 fd5a 	bl	800e22a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	62da      	str	r2, [r3, #44]	; 0x2c
 800777c:	e012      	b.n	80077a4 <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800777e:	2340      	movs	r3, #64	; 0x40
 8007780:	2202      	movs	r2, #2
 8007782:	2101      	movs	r1, #1
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f006 fd50 	bl	800e22a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8007792:	2340      	movs	r3, #64	; 0x40
 8007794:	2202      	movs	r2, #2
 8007796:	2181      	movs	r1, #129	; 0x81
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f006 fd46 	bl	800e22a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80077a4:	f44f 701b 	mov.w	r0, #620	; 0x26c
 80077a8:	f006 fe86 	bl	800e4b8 <USBD_static_malloc>
 80077ac:	4602      	mov	r2, r0
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 80077be:	2302      	movs	r3, #2
 80077c0:	e003      	b.n	80077ca <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f9da 	bl	8007b7c <MSC_BOT_Init>

  return USBD_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b082      	sub	sp, #8
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	460b      	mov	r3, r1
 80077dc:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80077de:	2101      	movs	r1, #1
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f006 fd48 	bl	800e276 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80077ee:	2181      	movs	r1, #129	; 0x81
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f006 fd40 	bl	800e276 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fa07 	bl	8007c10 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007808:	2b00      	cmp	r3, #0
 800780a:	d009      	beq.n	8007820 <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007812:	4618      	mov	r0, r3
 8007814:	f006 fe5c 	bl	800e4d0 <USBD_static_free>
    pdev->pClassData  = NULL;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
	...

0800782c <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800783c:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8007842:	2300      	movs	r3, #0
 8007844:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800784e:	2b00      	cmp	r3, #0
 8007850:	d04d      	beq.n	80078ee <USBD_MSC_Setup+0xc2>
 8007852:	2b20      	cmp	r3, #32
 8007854:	f040 8113 	bne.w	8007a7e <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	785b      	ldrb	r3, [r3, #1]
 800785c:	2bfe      	cmp	r3, #254	; 0xfe
 800785e:	d002      	beq.n	8007866 <USBD_MSC_Setup+0x3a>
 8007860:	2bff      	cmp	r3, #255	; 0xff
 8007862:	d024      	beq.n	80078ae <USBD_MSC_Setup+0x82>
 8007864:	e03b      	b.n	80078de <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	885b      	ldrh	r3, [r3, #2]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d118      	bne.n	80078a0 <USBD_MSC_Setup+0x74>
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	88db      	ldrh	r3, [r3, #6]
 8007872:	2b01      	cmp	r3, #1
 8007874:	d114      	bne.n	80078a0 <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800787c:	2b00      	cmp	r3, #0
 800787e:	da0f      	bge.n	80078a0 <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	4798      	blx	r3
 800788a:	4603      	mov	r3, r0
 800788c:	461a      	mov	r2, r3
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	2201      	movs	r2, #1
 8007896:	4619      	mov	r1, r3
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f002 f992 	bl	8009bc2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800789e:	e025      	b.n	80078ec <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f002 f923 	bl	8009aee <USBD_CtlError>
            ret = USBD_FAIL;
 80078a8:	2302      	movs	r3, #2
 80078aa:	75fb      	strb	r3, [r7, #23]
          break;
 80078ac:	e01e      	b.n	80078ec <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	885b      	ldrh	r3, [r3, #2]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10c      	bne.n	80078d0 <USBD_MSC_Setup+0xa4>
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	88db      	ldrh	r3, [r3, #6]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d108      	bne.n	80078d0 <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	db03      	blt.n	80078d0 <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f987 	bl	8007bdc <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078ce:	e00d      	b.n	80078ec <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f002 f90b 	bl	8009aee <USBD_CtlError>
            ret = USBD_FAIL;
 80078d8:	2302      	movs	r3, #2
 80078da:	75fb      	strb	r3, [r7, #23]
          break;
 80078dc:	e006      	b.n	80078ec <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f002 f904 	bl	8009aee <USBD_CtlError>
          ret = USBD_FAIL;
 80078e6:	2302      	movs	r3, #2
 80078e8:	75fb      	strb	r3, [r7, #23]
          break;
 80078ea:	bf00      	nop
      }
      break;
 80078ec:	e0ce      	b.n	8007a8c <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	785b      	ldrb	r3, [r3, #1]
 80078f2:	2b0b      	cmp	r3, #11
 80078f4:	f200 80bb 	bhi.w	8007a6e <USBD_MSC_Setup+0x242>
 80078f8:	a201      	add	r2, pc, #4	; (adr r2, 8007900 <USBD_MSC_Setup+0xd4>)
 80078fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fe:	bf00      	nop
 8007900:	08007931 	.word	0x08007931
 8007904:	080079a7 	.word	0x080079a7
 8007908:	08007a6f 	.word	0x08007a6f
 800790c:	08007a6f 	.word	0x08007a6f
 8007910:	08007a6f 	.word	0x08007a6f
 8007914:	08007a6f 	.word	0x08007a6f
 8007918:	08007a6f 	.word	0x08007a6f
 800791c:	08007a6f 	.word	0x08007a6f
 8007920:	08007a6f 	.word	0x08007a6f
 8007924:	08007a6f 	.word	0x08007a6f
 8007928:	08007959 	.word	0x08007959
 800792c:	08007981 	.word	0x08007981
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007936:	2b03      	cmp	r3, #3
 8007938:	d107      	bne.n	800794a <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800793a:	f107 030e 	add.w	r3, r7, #14
 800793e:	2202      	movs	r2, #2
 8007940:	4619      	mov	r1, r3
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f002 f93d 	bl	8009bc2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007948:	e098      	b.n	8007a7c <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f002 f8ce 	bl	8009aee <USBD_CtlError>
            ret = USBD_FAIL;
 8007952:	2302      	movs	r3, #2
 8007954:	75fb      	strb	r3, [r7, #23]
          break;
 8007956:	e091      	b.n	8007a7c <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800795e:	2b03      	cmp	r3, #3
 8007960:	d107      	bne.n	8007972 <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	3304      	adds	r3, #4
 8007966:	2201      	movs	r2, #1
 8007968:	4619      	mov	r1, r3
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f002 f929 	bl	8009bc2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007970:	e084      	b.n	8007a7c <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f002 f8ba 	bl	8009aee <USBD_CtlError>
            ret = USBD_FAIL;
 800797a:	2302      	movs	r3, #2
 800797c:	75fb      	strb	r3, [r7, #23]
          break;
 800797e:	e07d      	b.n	8007a7c <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007986:	2b03      	cmp	r3, #3
 8007988:	d106      	bne.n	8007998 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	885b      	ldrh	r3, [r3, #2]
 800798e:	b2db      	uxtb	r3, r3
 8007990:	461a      	mov	r2, r3
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007996:	e071      	b.n	8007a7c <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f002 f8a7 	bl	8009aee <USBD_CtlError>
            ret = USBD_FAIL;
 80079a0:	2302      	movs	r3, #2
 80079a2:	75fb      	strb	r3, [r7, #23]
          break;
 80079a4:	e06a      	b.n	8007a7c <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	889b      	ldrh	r3, [r3, #4]
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	4619      	mov	r1, r3
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f006 fc80 	bl	800e2b4 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	889b      	ldrh	r3, [r3, #4]
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	4619      	mov	r1, r3
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f006 fc5a 	bl	800e276 <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	889b      	ldrh	r3, [r3, #4]
 80079c6:	b25b      	sxtb	r3, r3
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	da23      	bge.n	8007a14 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	889b      	ldrh	r3, [r3, #4]
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	f003 020f 	and.w	r2, r3, #15
 80079d6:	6879      	ldr	r1, [r7, #4]
 80079d8:	4613      	mov	r3, r2
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4413      	add	r3, r2
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	440b      	add	r3, r1
 80079e2:	3318      	adds	r3, #24
 80079e4:	2200      	movs	r2, #0
 80079e6:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	7c1b      	ldrb	r3, [r3, #16]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d107      	bne.n	8007a00 <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 80079f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079f4:	2202      	movs	r2, #2
 80079f6:	2181      	movs	r1, #129	; 0x81
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f006 fc16 	bl	800e22a <USBD_LL_OpenEP>
 80079fe:	e005      	b.n	8007a0c <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8007a00:	2340      	movs	r3, #64	; 0x40
 8007a02:	2202      	movs	r2, #2
 8007a04:	2181      	movs	r1, #129	; 0x81
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f006 fc0f 	bl	800e22a <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	62da      	str	r2, [r3, #44]	; 0x2c
 8007a12:	e024      	b.n	8007a5e <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	889b      	ldrh	r3, [r3, #4]
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	f003 020f 	and.w	r2, r3, #15
 8007a1e:	6879      	ldr	r1, [r7, #4]
 8007a20:	4613      	mov	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	440b      	add	r3, r1
 8007a2a:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007a2e:	2200      	movs	r2, #0
 8007a30:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	7c1b      	ldrb	r3, [r3, #16]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d107      	bne.n	8007a4a <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8007a3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a3e:	2202      	movs	r2, #2
 8007a40:	2101      	movs	r1, #1
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f006 fbf1 	bl	800e22a <USBD_LL_OpenEP>
 8007a48:	e005      	b.n	8007a56 <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8007a4a:	2340      	movs	r3, #64	; 0x40
 8007a4c:	2202      	movs	r2, #2
 8007a4e:	2101      	movs	r1, #1
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f006 fbea 	bl	800e22a <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	889b      	ldrh	r3, [r3, #4]
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fa52 	bl	8007f10 <MSC_BOT_CplClrFeature>
          break;
 8007a6c:	e006      	b.n	8007a7c <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f002 f83c 	bl	8009aee <USBD_CtlError>
          ret = USBD_FAIL;
 8007a76:	2302      	movs	r3, #2
 8007a78:	75fb      	strb	r3, [r7, #23]
          break;
 8007a7a:	bf00      	nop
      }
      break;
 8007a7c:	e006      	b.n	8007a8c <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f002 f834 	bl	8009aee <USBD_CtlError>
      ret = USBD_FAIL;
 8007a86:	2302      	movs	r3, #2
 8007a88:	75fb      	strb	r3, [r7, #23]
      break;
 8007a8a:	bf00      	nop
  }

  return ret;
 8007a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3718      	adds	r7, #24
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop

08007a98 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8007aa4:	78fb      	ldrb	r3, [r7, #3]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f8c1 	bl	8007c30 <MSC_BOT_DataIn>

  return USBD_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8007ac4:	78fb      	ldrb	r3, [r7, #3]
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f8e3 	bl	8007c94 <MSC_BOT_DataOut>

  return USBD_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8007ae6:	4b03      	ldr	r3, [pc, #12]	; (8007af4 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bc80      	pop	{r7}
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	2000005c 	.word	0x2000005c

08007af8 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2220      	movs	r2, #32
 8007b04:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8007b06:	4b03      	ldr	r3, [pc, #12]	; (8007b14 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bc80      	pop	{r7}
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	2000007c 	.word	0x2000007c

08007b18 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2220      	movs	r2, #32
 8007b24:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8007b26:	4b03      	ldr	r3, [pc, #12]	; (8007b34 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bc80      	pop	{r7}
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	2000009c 	.word	0x2000009c

08007b38 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	220a      	movs	r2, #10
 8007b44:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8007b46:	4b03      	ldr	r3, [pc, #12]	; (8007b54 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bc80      	pop	{r7}
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	200000bc 	.word	0x200000bc

08007b58 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d003      	beq.n	8007b70 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	370c      	adds	r7, #12
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bc80      	pop	{r7}
 8007b7a:	4770      	bx	lr

08007b7c <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b8a:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8007bb4:	2101      	movs	r1, #1
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f006 fb7c 	bl	800e2b4 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8007bbc:	2181      	movs	r1, #129	; 0x81
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f006 fb78 	bl	800e2b4 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8007bca:	231f      	movs	r3, #31
 8007bcc:	2101      	movs	r1, #1
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f006 fc3b 	bl	800e44a <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8007bd4:	bf00      	nop
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bea:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8007bfe:	231f      	movs	r3, #31
 8007c00:	2101      	movs	r1, #1
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f006 fc21 	bl	800e44a <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8007c08:	bf00      	nop
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c1e:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	721a      	strb	r2, [r3, #8]
}
 8007c26:	bf00      	nop
 8007c28:	3714      	adds	r7, #20
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bc80      	pop	{r7}
 8007c2e:	4770      	bx	lr

08007c30 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c42:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	7a1b      	ldrb	r3, [r3, #8]
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d005      	beq.n	8007c58 <MSC_BOT_DataIn+0x28>
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	db1a      	blt.n	8007c86 <MSC_BOT_DataIn+0x56>
 8007c50:	3b03      	subs	r3, #3
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d817      	bhi.n	8007c86 <MSC_BOT_DataIn+0x56>
 8007c56:	e011      	b.n	8007c7c <MSC_BOT_DataIn+0x4c>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8007c64:	461a      	mov	r2, r3
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f97a 	bl	8007f60 <SCSI_ProcessCmd>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	da0b      	bge.n	8007c8a <MSC_BOT_DataIn+0x5a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007c72:	2101      	movs	r1, #1
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f8f1 	bl	8007e5c <MSC_BOT_SendCSW>
      }
      break;
 8007c7a:	e006      	b.n	8007c8a <MSC_BOT_DataIn+0x5a>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f8ec 	bl	8007e5c <MSC_BOT_SendCSW>
      break;
 8007c84:	e002      	b.n	8007c8c <MSC_BOT_DataIn+0x5c>

    default:
      break;
 8007c86:	bf00      	nop
 8007c88:	e000      	b.n	8007c8c <MSC_BOT_DataIn+0x5c>
      break;
 8007c8a:	bf00      	nop
  }
}
 8007c8c:	bf00      	nop
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ca6:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	7a1b      	ldrb	r3, [r3, #8]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d002      	beq.n	8007cb6 <MSC_BOT_DataOut+0x22>
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d004      	beq.n	8007cbe <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8007cb4:	e015      	b.n	8007ce2 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f818 	bl	8007cec <MSC_BOT_CBW_Decode>
      break;
 8007cbc:	e011      	b.n	8007ce2 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8007cca:	461a      	mov	r2, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f947 	bl	8007f60 <SCSI_ProcessCmd>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	da03      	bge.n	8007ce0 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007cd8:	2101      	movs	r1, #1
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f8be 	bl	8007e5c <MSC_BOT_SendCSW>
      break;
 8007ce0:	bf00      	nop
  }
}
 8007ce2:	bf00      	nop
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
	...

08007cec <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cfa:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8007d14:	2101      	movs	r1, #1
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f006 fbba 	bl	800e490 <USBD_LL_GetRxDataSize>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b1f      	cmp	r3, #31
 8007d20:	d114      	bne.n	8007d4c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8007d28:	4a32      	ldr	r2, [pc, #200]	; (8007df4 <MSC_BOT_CBW_Decode+0x108>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d10e      	bne.n	8007d4c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d809      	bhi.n	8007d4c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d004      	beq.n	8007d4c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 8007d48:	2b10      	cmp	r3, #16
 8007d4a:	d90e      	bls.n	8007d6a <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007d52:	2320      	movs	r3, #32
 8007d54:	2205      	movs	r2, #5
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fc48 	bl	80085ec <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2202      	movs	r2, #2
 8007d60:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f8a6 	bl	8007eb4 <MSC_BOT_Abort>
 8007d68:	e041      	b.n	8007dee <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8007d76:	461a      	mov	r2, r3
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f8f1 	bl	8007f60 <SCSI_ProcessCmd>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	da0c      	bge.n	8007d9e <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	7a1b      	ldrb	r3, [r3, #8]
 8007d88:	2b05      	cmp	r3, #5
 8007d8a:	d104      	bne.n	8007d96 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007d8c:	2101      	movs	r1, #1
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f864 	bl	8007e5c <MSC_BOT_SendCSW>
 8007d94:	e02b      	b.n	8007dee <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f88c 	bl	8007eb4 <MSC_BOT_Abort>
 8007d9c:	e027      	b.n	8007dee <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	7a1b      	ldrb	r3, [r3, #8]
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d022      	beq.n	8007dec <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d01e      	beq.n	8007dec <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	d01a      	beq.n	8007dec <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	895b      	ldrh	r3, [r3, #10]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d009      	beq.n	8007dd2 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f103 010c 	add.w	r1, r3, #12
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	895b      	ldrh	r3, [r3, #10]
 8007dc8:	461a      	mov	r2, r3
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f814 	bl	8007df8 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8007dd0:	e00d      	b.n	8007dee <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	895b      	ldrh	r3, [r3, #10]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d104      	bne.n	8007de4 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007dda:	2100      	movs	r1, #0
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f83d 	bl	8007e5c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8007de2:	e004      	b.n	8007dee <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f865 	bl	8007eb4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8007dea:	e000      	b.n	8007dee <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8007dec:	bf00      	nop
    }
  }
}
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	43425355 	.word	0x43425355

08007df8 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	4613      	mov	r3, r2
 8007e04:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e0c:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007e14:	88fb      	ldrh	r3, [r7, #6]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d204      	bcs.n	8007e24 <MSC_BOT_SendData+0x2c>
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	e000      	b.n	8007e26 <MSC_BOT_SendData+0x2e>
 8007e24:	88fb      	ldrh	r3, [r7, #6]
 8007e26:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8007e2e:	88fb      	ldrh	r3, [r7, #6]
 8007e30:	1ad2      	subs	r2, r2, r3
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	2204      	movs	r2, #4
 8007e44:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8007e46:	8a7b      	ldrh	r3, [r7, #18]
 8007e48:	68ba      	ldr	r2, [r7, #8]
 8007e4a:	2181      	movs	r1, #129	; 0x81
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f006 fad9 	bl	800e404 <USBD_LL_Transmit>
}
 8007e52:	bf00      	nop
 8007e54:	3718      	adds	r7, #24
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
	...

08007e5c <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	460b      	mov	r3, r1
 8007e66:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e6e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4a0f      	ldr	r2, [pc, #60]	; (8007eb0 <MSC_BOT_SendCSW+0x54>)
 8007e74:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	78fa      	ldrb	r2, [r7, #3]
 8007e7c:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 8007e8c:	230d      	movs	r3, #13
 8007e8e:	2181      	movs	r1, #129	; 0x81
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f006 fab7 	bl	800e404 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8007e9c:	231f      	movs	r3, #31
 8007e9e:	2101      	movs	r1, #1
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f006 fad2 	bl	800e44a <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8007ea6:	bf00      	nop
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	53425355 	.word	0x53425355

08007eb4 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec2:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10c      	bne.n	8007ee8 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d007      	beq.n	8007ee8 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d103      	bne.n	8007ee8 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f006 fa05 	bl	800e2f2 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007ee8:	2181      	movs	r1, #129	; 0x81
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f006 fa01 	bl	800e2f2 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	7a5b      	ldrb	r3, [r3, #9]
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d107      	bne.n	8007f08 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8007efe:	231f      	movs	r3, #31
 8007f00:	2101      	movs	r1, #1
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f006 faa1 	bl	800e44a <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8007f08:	bf00      	nop
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	460b      	mov	r3, r1
 8007f1a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f22:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	7a5b      	ldrb	r3, [r3, #9]
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d107      	bne.n	8007f3c <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007f2c:	2181      	movs	r1, #129	; 0x81
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f006 f9df 	bl	800e2f2 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	725a      	strb	r2, [r3, #9]
 8007f3a:	e00d      	b.n	8007f58 <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8007f3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	da08      	bge.n	8007f56 <MSC_BOT_CplClrFeature+0x46>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	7a5b      	ldrb	r3, [r3, #9]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d004      	beq.n	8007f56 <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007f4c:	2101      	movs	r1, #1
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7ff ff84 	bl	8007e5c <MSC_BOT_SendCSW>
 8007f54:	e000      	b.n	8007f58 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 8007f56:	bf00      	nop
  }
}
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
	...

08007f60 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	607a      	str	r2, [r7, #4]
 8007f6c:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	2b5a      	cmp	r3, #90	; 0x5a
 8007f74:	f200 810e 	bhi.w	8008194 <SCSI_ProcessCmd+0x234>
 8007f78:	a201      	add	r2, pc, #4	; (adr r2, 8007f80 <SCSI_ProcessCmd+0x20>)
 8007f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7e:	bf00      	nop
 8007f80:	080080ed 	.word	0x080080ed
 8007f84:	08008195 	.word	0x08008195
 8007f88:	08008195 	.word	0x08008195
 8007f8c:	080080fb 	.word	0x080080fb
 8007f90:	08008195 	.word	0x08008195
 8007f94:	08008195 	.word	0x08008195
 8007f98:	08008195 	.word	0x08008195
 8007f9c:	08008195 	.word	0x08008195
 8007fa0:	08008195 	.word	0x08008195
 8007fa4:	08008195 	.word	0x08008195
 8007fa8:	08008195 	.word	0x08008195
 8007fac:	08008195 	.word	0x08008195
 8007fb0:	08008195 	.word	0x08008195
 8007fb4:	08008195 	.word	0x08008195
 8007fb8:	08008195 	.word	0x08008195
 8007fbc:	08008195 	.word	0x08008195
 8007fc0:	08008195 	.word	0x08008195
 8007fc4:	08008195 	.word	0x08008195
 8007fc8:	08008109 	.word	0x08008109
 8007fcc:	08008195 	.word	0x08008195
 8007fd0:	08008195 	.word	0x08008195
 8007fd4:	08008195 	.word	0x08008195
 8007fd8:	08008195 	.word	0x08008195
 8007fdc:	08008195 	.word	0x08008195
 8007fe0:	08008195 	.word	0x08008195
 8007fe4:	08008195 	.word	0x08008195
 8007fe8:	08008133 	.word	0x08008133
 8007fec:	08008117 	.word	0x08008117
 8007ff0:	08008195 	.word	0x08008195
 8007ff4:	08008195 	.word	0x08008195
 8007ff8:	08008125 	.word	0x08008125
 8007ffc:	08008195 	.word	0x08008195
 8008000:	08008195 	.word	0x08008195
 8008004:	08008195 	.word	0x08008195
 8008008:	08008195 	.word	0x08008195
 800800c:	0800814f 	.word	0x0800814f
 8008010:	08008195 	.word	0x08008195
 8008014:	0800815d 	.word	0x0800815d
 8008018:	08008195 	.word	0x08008195
 800801c:	08008195 	.word	0x08008195
 8008020:	0800816b 	.word	0x0800816b
 8008024:	08008195 	.word	0x08008195
 8008028:	08008179 	.word	0x08008179
 800802c:	08008195 	.word	0x08008195
 8008030:	08008195 	.word	0x08008195
 8008034:	08008195 	.word	0x08008195
 8008038:	08008195 	.word	0x08008195
 800803c:	08008187 	.word	0x08008187
 8008040:	08008195 	.word	0x08008195
 8008044:	08008195 	.word	0x08008195
 8008048:	08008195 	.word	0x08008195
 800804c:	08008195 	.word	0x08008195
 8008050:	08008195 	.word	0x08008195
 8008054:	08008195 	.word	0x08008195
 8008058:	08008195 	.word	0x08008195
 800805c:	08008195 	.word	0x08008195
 8008060:	08008195 	.word	0x08008195
 8008064:	08008195 	.word	0x08008195
 8008068:	08008195 	.word	0x08008195
 800806c:	08008195 	.word	0x08008195
 8008070:	08008195 	.word	0x08008195
 8008074:	08008195 	.word	0x08008195
 8008078:	08008195 	.word	0x08008195
 800807c:	08008195 	.word	0x08008195
 8008080:	08008195 	.word	0x08008195
 8008084:	08008195 	.word	0x08008195
 8008088:	08008195 	.word	0x08008195
 800808c:	08008195 	.word	0x08008195
 8008090:	08008195 	.word	0x08008195
 8008094:	08008195 	.word	0x08008195
 8008098:	08008195 	.word	0x08008195
 800809c:	08008195 	.word	0x08008195
 80080a0:	08008195 	.word	0x08008195
 80080a4:	08008195 	.word	0x08008195
 80080a8:	08008195 	.word	0x08008195
 80080ac:	08008195 	.word	0x08008195
 80080b0:	08008195 	.word	0x08008195
 80080b4:	08008195 	.word	0x08008195
 80080b8:	08008195 	.word	0x08008195
 80080bc:	08008195 	.word	0x08008195
 80080c0:	08008195 	.word	0x08008195
 80080c4:	08008195 	.word	0x08008195
 80080c8:	08008195 	.word	0x08008195
 80080cc:	08008195 	.word	0x08008195
 80080d0:	08008195 	.word	0x08008195
 80080d4:	08008195 	.word	0x08008195
 80080d8:	08008195 	.word	0x08008195
 80080dc:	08008195 	.word	0x08008195
 80080e0:	08008195 	.word	0x08008195
 80080e4:	08008195 	.word	0x08008195
 80080e8:	08008141 	.word	0x08008141
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 80080ec:	7afb      	ldrb	r3, [r7, #11]
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	4619      	mov	r1, r3
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f000 f85c 	bl	80081b0 <SCSI_TestUnitReady>
      break;
 80080f8:	e055      	b.n	80081a6 <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 80080fa:	7afb      	ldrb	r3, [r7, #11]
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	4619      	mov	r1, r3
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f000 fa09 	bl	8008518 <SCSI_RequestSense>
      break;
 8008106:	e04e      	b.n	80081a6 <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 8008108:	7afb      	ldrb	r3, [r7, #11]
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	4619      	mov	r1, r3
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f000 f888 	bl	8008224 <SCSI_Inquiry>
      break;
 8008114:	e047      	b.n	80081a6 <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8008116:	7afb      	ldrb	r3, [r7, #11]
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	4619      	mov	r1, r3
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f000 fa9e 	bl	800865e <SCSI_StartStopUnit>
      break;
 8008122:	e040      	b.n	80081a6 <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8008124:	7afb      	ldrb	r3, [r7, #11]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	4619      	mov	r1, r3
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f000 fa97 	bl	800865e <SCSI_StartStopUnit>
      break;
 8008130:	e039      	b.n	80081a6 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 8008132:	7afb      	ldrb	r3, [r7, #11]
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	4619      	mov	r1, r3
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f000 f99d 	bl	8008478 <SCSI_ModeSense6>
      break;
 800813e:	e032      	b.n	80081a6 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 8008140:	7afb      	ldrb	r3, [r7, #11]
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	4619      	mov	r1, r3
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f000 f9be 	bl	80084c8 <SCSI_ModeSense10>
      break;
 800814c:	e02b      	b.n	80081a6 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800814e:	7afb      	ldrb	r3, [r7, #11]
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	4619      	mov	r1, r3
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f000 f92a 	bl	80083ae <SCSI_ReadFormatCapacity>
      break;
 800815a:	e024      	b.n	80081a6 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 800815c:	7afb      	ldrb	r3, [r7, #11]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	4619      	mov	r1, r3
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f000 f8bc 	bl	80082e0 <SCSI_ReadCapacity10>
      break;
 8008168:	e01d      	b.n	80081a6 <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 800816a:	7afb      	ldrb	r3, [r7, #11]
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	4619      	mov	r1, r3
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	f000 fa88 	bl	8008686 <SCSI_Read10>
      break;
 8008176:	e016      	b.n	80081a6 <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 8008178:	7afb      	ldrb	r3, [r7, #11]
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	4619      	mov	r1, r3
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 fb0d 	bl	800879e <SCSI_Write10>
      break;
 8008184:	e00f      	b.n	80081a6 <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 8008186:	7afb      	ldrb	r3, [r7, #11]
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	4619      	mov	r1, r3
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f000 fbb6 	bl	80088fe <SCSI_Verify10>
      break;
 8008192:	e008      	b.n	80081a6 <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8008194:	7af9      	ldrb	r1, [r7, #11]
 8008196:	2320      	movs	r3, #32
 8008198:	2205      	movs	r2, #5
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f000 fa26 	bl	80085ec <SCSI_SenseCode>
      return -1;
 80081a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081a4:	e000      	b.n	80081a8 <SCSI_ProcessCmd+0x248>
  }

  return 0;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	460b      	mov	r3, r1
 80081ba:	607a      	str	r2, [r7, #4]
 80081bc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c4:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00a      	beq.n	80081e6 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80081d6:	2320      	movs	r3, #32
 80081d8:	2205      	movs	r2, #5
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f000 fa06 	bl	80085ec <SCSI_SenseCode>

    return -1;
 80081e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081e4:	e019      	b.n	800821a <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	7afa      	ldrb	r2, [r7, #11]
 80081f0:	4610      	mov	r0, r2
 80081f2:	4798      	blx	r3
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00b      	beq.n	8008212 <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80081fa:	7af9      	ldrb	r1, [r7, #11]
 80081fc:	233a      	movs	r3, #58	; 0x3a
 80081fe:	2202      	movs	r2, #2
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f000 f9f3 	bl	80085ec <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	2205      	movs	r2, #5
 800820a:	721a      	strb	r2, [r3, #8]

    return -1;
 800820c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008210:	e003      	b.n	800821a <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	2200      	movs	r2, #0
 8008216:	815a      	strh	r2, [r3, #10]

  return 0;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3718      	adds	r7, #24
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
	...

08008224 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8008224:	b480      	push	{r7}
 8008226:	b089      	sub	sp, #36	; 0x24
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	460b      	mov	r3, r1
 800822e:	607a      	str	r2, [r7, #4]
 8008230:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008238:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	3301      	adds	r3, #1
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	2b00      	cmp	r3, #0
 8008246:	d014      	beq.n	8008272 <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 8008248:	2307      	movs	r3, #7
 800824a:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	8bfa      	ldrh	r2, [r7, #30]
 8008250:	815a      	strh	r2, [r3, #10]

    while (len)
 8008252:	e00a      	b.n	800826a <SCSI_Inquiry+0x46>
    {
      len--;
 8008254:	8bfb      	ldrh	r3, [r7, #30]
 8008256:	3b01      	subs	r3, #1
 8008258:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 800825a:	8bfa      	ldrh	r2, [r7, #30]
 800825c:	8bfb      	ldrh	r3, [r7, #30]
 800825e:	491f      	ldr	r1, [pc, #124]	; (80082dc <SCSI_Inquiry+0xb8>)
 8008260:	5c89      	ldrb	r1, [r1, r2]
 8008262:	69ba      	ldr	r2, [r7, #24]
 8008264:	4413      	add	r3, r2
 8008266:	460a      	mov	r2, r1
 8008268:	731a      	strb	r2, [r3, #12]
    while (len)
 800826a:	8bfb      	ldrh	r3, [r7, #30]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1f1      	bne.n	8008254 <SCSI_Inquiry+0x30>
 8008270:	e02e      	b.n	80082d0 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008278:	69d9      	ldr	r1, [r3, #28]
 800827a:	7afa      	ldrb	r2, [r7, #11]
 800827c:	4613      	mov	r3, r2
 800827e:	00db      	lsls	r3, r3, #3
 8008280:	4413      	add	r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	440b      	add	r3, r1
 8008286:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	3304      	adds	r3, #4
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	b29b      	uxth	r3, r3
 8008290:	3305      	adds	r3, #5
 8008292:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	3304      	adds	r3, #4
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	b29b      	uxth	r3, r3
 800829c:	8bfa      	ldrh	r2, [r7, #30]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d303      	bcc.n	80082aa <SCSI_Inquiry+0x86>
    {
      len = params[4];
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	3304      	adds	r3, #4
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	8bfa      	ldrh	r2, [r7, #30]
 80082ae:	815a      	strh	r2, [r3, #10]

    while (len)
 80082b0:	e00b      	b.n	80082ca <SCSI_Inquiry+0xa6>
    {
      len--;
 80082b2:	8bfb      	ldrh	r3, [r7, #30]
 80082b4:	3b01      	subs	r3, #1
 80082b6:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 80082b8:	8bfb      	ldrh	r3, [r7, #30]
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	441a      	add	r2, r3
 80082be:	8bfb      	ldrh	r3, [r7, #30]
 80082c0:	7811      	ldrb	r1, [r2, #0]
 80082c2:	69ba      	ldr	r2, [r7, #24]
 80082c4:	4413      	add	r3, r2
 80082c6:	460a      	mov	r2, r1
 80082c8:	731a      	strb	r2, [r3, #12]
    while (len)
 80082ca:	8bfb      	ldrh	r3, [r7, #30]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1f0      	bne.n	80082b2 <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3724      	adds	r7, #36	; 0x24
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bc80      	pop	{r7}
 80082da:	4770      	bx	lr
 80082dc:	0800e69c 	.word	0x0800e69c

080082e0 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	460b      	mov	r3, r1
 80082ea:	607a      	str	r2, [r7, #4]
 80082ec:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f4:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	697a      	ldr	r2, [r7, #20]
 8008300:	f502 7118 	add.w	r1, r2, #608	; 0x260
 8008304:	697a      	ldr	r2, [r7, #20]
 8008306:	f202 225e 	addw	r2, r2, #606	; 0x25e
 800830a:	7af8      	ldrb	r0, [r7, #11]
 800830c:	4798      	blx	r3
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d008      	beq.n	8008326 <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008314:	7af9      	ldrb	r1, [r7, #11]
 8008316:	233a      	movs	r3, #58	; 0x3a
 8008318:	2202      	movs	r2, #2
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f000 f966 	bl	80085ec <SCSI_SenseCode>
    return -1;
 8008320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008324:	e03f      	b.n	80083a6 <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800832c:	3b01      	subs	r3, #1
 800832e:	0e1b      	lsrs	r3, r3, #24
 8008330:	b2da      	uxtb	r2, r3
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800833c:	3b01      	subs	r3, #1
 800833e:	0c1b      	lsrs	r3, r3, #16
 8008340:	b2da      	uxtb	r2, r3
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800834c:	3b01      	subs	r3, #1
 800834e:	0a1b      	lsrs	r3, r3, #8
 8008350:	b2da      	uxtb	r2, r3
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800835c:	b2db      	uxtb	r3, r3
 800835e:	3b01      	subs	r3, #1
 8008360:	b2da      	uxtb	r2, r3
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800836c:	161b      	asrs	r3, r3, #24
 800836e:	b2da      	uxtb	r2, r3
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800837a:	141b      	asrs	r3, r3, #16
 800837c:	b2da      	uxtb	r2, r3
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8008388:	0a1b      	lsrs	r3, r3, #8
 800838a:	b29b      	uxth	r3, r3
 800838c:	b2da      	uxtb	r2, r3
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8008398:	b2da      	uxtb	r2, r3
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	2208      	movs	r2, #8
 80083a2:	815a      	strh	r2, [r3, #10]
    return 0;
 80083a4:	2300      	movs	r3, #0
  }
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3718      	adds	r7, #24
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b088      	sub	sp, #32
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	60f8      	str	r0, [r7, #12]
 80083b6:	460b      	mov	r3, r1
 80083b8:	607a      	str	r2, [r7, #4]
 80083ba:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083c2:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 80083c4:	2300      	movs	r3, #0
 80083c6:	83fb      	strh	r3, [r7, #30]
 80083c8:	e007      	b.n	80083da <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 80083ca:	8bfb      	ldrh	r3, [r7, #30]
 80083cc:	69ba      	ldr	r2, [r7, #24]
 80083ce:	4413      	add	r3, r2
 80083d0:	2200      	movs	r2, #0
 80083d2:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 80083d4:	8bfb      	ldrh	r3, [r7, #30]
 80083d6:	3301      	adds	r3, #1
 80083d8:	83fb      	strh	r3, [r7, #30]
 80083da:	8bfb      	ldrh	r3, [r7, #30]
 80083dc:	2b0b      	cmp	r3, #11
 80083de:	d9f4      	bls.n	80083ca <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	f107 0216 	add.w	r2, r7, #22
 80083ec:	f107 0110 	add.w	r1, r7, #16
 80083f0:	7af8      	ldrb	r0, [r7, #11]
 80083f2:	4798      	blx	r3
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d008      	beq.n	800840c <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80083fa:	7af9      	ldrb	r1, [r7, #11]
 80083fc:	233a      	movs	r3, #58	; 0x3a
 80083fe:	2202      	movs	r2, #2
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f000 f8f3 	bl	80085ec <SCSI_SenseCode>
    return -1;
 8008406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800840a:	e030      	b.n	800846e <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	2208      	movs	r2, #8
 8008410:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	3b01      	subs	r3, #1
 8008416:	0e1b      	lsrs	r3, r3, #24
 8008418:	b2da      	uxtb	r2, r3
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	3b01      	subs	r3, #1
 8008422:	0c1b      	lsrs	r3, r3, #16
 8008424:	b2da      	uxtb	r2, r3
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	3b01      	subs	r3, #1
 800842e:	0a1b      	lsrs	r3, r3, #8
 8008430:	b2da      	uxtb	r2, r3
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	b2db      	uxtb	r3, r3
 800843a:	3b01      	subs	r3, #1
 800843c:	b2da      	uxtb	r2, r3
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	2202      	movs	r2, #2
 8008446:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8008448:	8afb      	ldrh	r3, [r7, #22]
 800844a:	141b      	asrs	r3, r3, #16
 800844c:	b2da      	uxtb	r2, r3
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8008452:	8afb      	ldrh	r3, [r7, #22]
 8008454:	0a1b      	lsrs	r3, r3, #8
 8008456:	b29b      	uxth	r3, r3
 8008458:	b2da      	uxtb	r2, r3
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 800845e:	8afb      	ldrh	r3, [r7, #22]
 8008460:	b2da      	uxtb	r2, r3
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	220c      	movs	r2, #12
 800846a:	815a      	strh	r2, [r3, #10]
    return 0;
 800846c:	2300      	movs	r3, #0
  }
}
 800846e:	4618      	mov	r0, r3
 8008470:	3720      	adds	r7, #32
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
	...

08008478 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8008478:	b480      	push	{r7}
 800847a:	b087      	sub	sp, #28
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	460b      	mov	r3, r1
 8008482:	607a      	str	r2, [r7, #4]
 8008484:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800848c:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 800848e:	2308      	movs	r3, #8
 8008490:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	8afa      	ldrh	r2, [r7, #22]
 8008496:	815a      	strh	r2, [r3, #10]

  while (len)
 8008498:	e00a      	b.n	80084b0 <SCSI_ModeSense6+0x38>
  {
    len--;
 800849a:	8afb      	ldrh	r3, [r7, #22]
 800849c:	3b01      	subs	r3, #1
 800849e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 80084a0:	8afa      	ldrh	r2, [r7, #22]
 80084a2:	8afb      	ldrh	r3, [r7, #22]
 80084a4:	4907      	ldr	r1, [pc, #28]	; (80084c4 <SCSI_ModeSense6+0x4c>)
 80084a6:	5c89      	ldrb	r1, [r1, r2]
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	4413      	add	r3, r2
 80084ac:	460a      	mov	r2, r1
 80084ae:	731a      	strb	r2, [r3, #12]
  while (len)
 80084b0:	8afb      	ldrh	r3, [r7, #22]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1f1      	bne.n	800849a <SCSI_ModeSense6+0x22>
  }
  return 0;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	371c      	adds	r7, #28
 80084bc:	46bd      	mov	sp, r7
 80084be:	bc80      	pop	{r7}
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	0800e6a4 	.word	0x0800e6a4

080084c8 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b087      	sub	sp, #28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	460b      	mov	r3, r1
 80084d2:	607a      	str	r2, [r7, #4]
 80084d4:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 80084d6:	2308      	movs	r3, #8
 80084d8:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084e0:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	8afa      	ldrh	r2, [r7, #22]
 80084e6:	815a      	strh	r2, [r3, #10]

  while (len)
 80084e8:	e00a      	b.n	8008500 <SCSI_ModeSense10+0x38>
  {
    len--;
 80084ea:	8afb      	ldrh	r3, [r7, #22]
 80084ec:	3b01      	subs	r3, #1
 80084ee:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 80084f0:	8afa      	ldrh	r2, [r7, #22]
 80084f2:	8afb      	ldrh	r3, [r7, #22]
 80084f4:	4907      	ldr	r1, [pc, #28]	; (8008514 <SCSI_ModeSense10+0x4c>)
 80084f6:	5c89      	ldrb	r1, [r1, r2]
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	4413      	add	r3, r2
 80084fc:	460a      	mov	r2, r1
 80084fe:	731a      	strb	r2, [r3, #12]
  while (len)
 8008500:	8afb      	ldrh	r3, [r7, #22]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1f1      	bne.n	80084ea <SCSI_ModeSense10+0x22>
  }

  return 0;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	371c      	adds	r7, #28
 800850c:	46bd      	mov	sp, r7
 800850e:	bc80      	pop	{r7}
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	0800e6ac 	.word	0x0800e6ac

08008518 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8008518:	b480      	push	{r7}
 800851a:	b087      	sub	sp, #28
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	460b      	mov	r3, r1
 8008522:	607a      	str	r2, [r7, #4]
 8008524:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800852c:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 800852e:	2300      	movs	r3, #0
 8008530:	75fb      	strb	r3, [r7, #23]
 8008532:	e007      	b.n	8008544 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8008534:	7dfb      	ldrb	r3, [r7, #23]
 8008536:	693a      	ldr	r2, [r7, #16]
 8008538:	4413      	add	r3, r2
 800853a:	2200      	movs	r2, #0
 800853c:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 800853e:	7dfb      	ldrb	r3, [r7, #23]
 8008540:	3301      	adds	r3, #1
 8008542:	75fb      	strb	r3, [r7, #23]
 8008544:	7dfb      	ldrb	r3, [r7, #23]
 8008546:	2b11      	cmp	r3, #17
 8008548:	d9f4      	bls.n	8008534 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	2270      	movs	r2, #112	; 0x70
 800854e:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	220c      	movs	r2, #12
 8008554:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8008562:	429a      	cmp	r2, r3
 8008564:	d02e      	beq.n	80085c4 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	3347      	adds	r3, #71	; 0x47
 8008570:	00db      	lsls	r3, r3, #3
 8008572:	4413      	add	r3, r2
 8008574:	791a      	ldrb	r2, [r3, #4]
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8008580:	693a      	ldr	r2, [r7, #16]
 8008582:	3347      	adds	r3, #71	; 0x47
 8008584:	00db      	lsls	r3, r3, #3
 8008586:	4413      	add	r3, r2
 8008588:	7a5a      	ldrb	r2, [r3, #9]
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	3347      	adds	r3, #71	; 0x47
 8008598:	00db      	lsls	r3, r3, #3
 800859a:	4413      	add	r3, r2
 800859c:	7a1a      	ldrb	r2, [r3, #8]
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80085a8:	3301      	adds	r3, #1
 80085aa:	b2da      	uxtb	r2, r3
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80085b8:	2b04      	cmp	r3, #4
 80085ba:	d103      	bne.n	80085c4 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	2212      	movs	r2, #18
 80085c8:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	3304      	adds	r3, #4
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	2b12      	cmp	r3, #18
 80085d2:	d805      	bhi.n	80085e0 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	3304      	adds	r3, #4
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	b29a      	uxth	r2, r3
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	371c      	adds	r7, #28
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bc80      	pop	{r7}
 80085ea:	4770      	bx	lr

080085ec <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	4608      	mov	r0, r1
 80085f6:	4611      	mov	r1, r2
 80085f8:	461a      	mov	r2, r3
 80085fa:	4603      	mov	r3, r0
 80085fc:	70fb      	strb	r3, [r7, #3]
 80085fe:	460b      	mov	r3, r1
 8008600:	70bb      	strb	r3, [r7, #2]
 8008602:	4613      	mov	r3, r2
 8008604:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800860c:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	3347      	adds	r3, #71	; 0x47
 8008618:	00db      	lsls	r3, r3, #3
 800861a:	4413      	add	r3, r2
 800861c:	78ba      	ldrb	r2, [r7, #2]
 800861e:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	3347      	adds	r3, #71	; 0x47
 800862a:	00db      	lsls	r3, r3, #3
 800862c:	4413      	add	r3, r2
 800862e:	2200      	movs	r2, #0
 8008630:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8008638:	3301      	adds	r3, #1
 800863a:	b2da      	uxtb	r2, r3
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8008648:	2b04      	cmp	r3, #4
 800864a:	d103      	bne.n	8008654 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 8008654:	bf00      	nop
 8008656:	3714      	adds	r7, #20
 8008658:	46bd      	mov	sp, r7
 800865a:	bc80      	pop	{r7}
 800865c:	4770      	bx	lr

0800865e <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800865e:	b480      	push	{r7}
 8008660:	b087      	sub	sp, #28
 8008662:	af00      	add	r7, sp, #0
 8008664:	60f8      	str	r0, [r7, #12]
 8008666:	460b      	mov	r3, r1
 8008668:	607a      	str	r2, [r7, #4]
 800866a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008672:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	2200      	movs	r2, #0
 8008678:	815a      	strh	r2, [r3, #10]
  return 0;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	371c      	adds	r7, #28
 8008680:	46bd      	mov	sp, r7
 8008682:	bc80      	pop	{r7}
 8008684:	4770      	bx	lr

08008686 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b086      	sub	sp, #24
 800868a:	af00      	add	r7, sp, #0
 800868c:	60f8      	str	r0, [r7, #12]
 800868e:	460b      	mov	r3, r1
 8008690:	607a      	str	r2, [r7, #4]
 8008692:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800869a:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	7a1b      	ldrb	r3, [r3, #8]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d16e      	bne.n	8008782 <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80086aa:	b25b      	sxtb	r3, r3
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	db0a      	blt.n	80086c6 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80086b6:	2320      	movs	r3, #32
 80086b8:	2205      	movs	r2, #5
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f7ff ff96 	bl	80085ec <SCSI_SenseCode>
      return -1;
 80086c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086c4:	e067      	b.n	8008796 <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	7afa      	ldrb	r2, [r7, #11]
 80086d0:	4610      	mov	r0, r2
 80086d2:	4798      	blx	r3
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d008      	beq.n	80086ec <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80086da:	7af9      	ldrb	r1, [r7, #11]
 80086dc:	233a      	movs	r3, #58	; 0x3a
 80086de:	2202      	movs	r2, #2
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f7ff ff83 	bl	80085ec <SCSI_SenseCode>
      return -1;
 80086e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086ea:	e054      	b.n	8008796 <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	3302      	adds	r3, #2
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	3303      	adds	r3, #3
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80086fc:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	3304      	adds	r3, #4
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008706:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	3205      	adds	r2, #5
 800870c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800870e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	3307      	adds	r3, #7
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	021b      	lsls	r3, r3, #8
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	3208      	adds	r2, #8
 8008722:	7812      	ldrb	r2, [r2, #0]
 8008724:	431a      	orrs	r2, r3
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008738:	7af9      	ldrb	r1, [r7, #11]
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f000 f912 	bl	8008964 <SCSI_CheckAddressRange>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	da02      	bge.n	800874c <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008746:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800874a:	e024      	b.n	8008796 <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	2202      	movs	r2, #2
 8008750:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800875e:	6979      	ldr	r1, [r7, #20]
 8008760:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 8008764:	fb01 f303 	mul.w	r3, r1, r3
 8008768:	429a      	cmp	r2, r3
 800876a:	d00a      	beq.n	8008782 <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8008772:	2320      	movs	r3, #32
 8008774:	2205      	movs	r2, #5
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f7ff ff38 	bl	80085ec <SCSI_SenseCode>
      return -1;
 800877c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008780:	e009      	b.n	8008796 <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008788:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 800878a:	7afb      	ldrb	r3, [r7, #11]
 800878c:	4619      	mov	r1, r3
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f000 f90a 	bl	80089a8 <SCSI_ProcessRead>
 8008794:	4603      	mov	r3, r0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3718      	adds	r7, #24
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b086      	sub	sp, #24
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	60f8      	str	r0, [r7, #12]
 80087a6:	460b      	mov	r3, r1
 80087a8:	607a      	str	r2, [r7, #4]
 80087aa:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087b2:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	7a1b      	ldrb	r3, [r3, #8]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f040 8096 	bne.w	80088ea <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80087c4:	b25b      	sxtb	r3, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	da0a      	bge.n	80087e0 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80087d0:	2320      	movs	r3, #32
 80087d2:	2205      	movs	r2, #5
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f7ff ff09 	bl	80085ec <SCSI_SenseCode>
      return -1;
 80087da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087de:	e08a      	b.n	80088f6 <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	7afa      	ldrb	r2, [r7, #11]
 80087ea:	4610      	mov	r0, r2
 80087ec:	4798      	blx	r3
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d008      	beq.n	8008806 <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80087f4:	7af9      	ldrb	r1, [r7, #11]
 80087f6:	233a      	movs	r3, #58	; 0x3a
 80087f8:	2202      	movs	r2, #2
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f7ff fef6 	bl	80085ec <SCSI_SenseCode>
      return -1;
 8008800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008804:	e077      	b.n	80088f6 <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	7afa      	ldrb	r2, [r7, #11]
 8008810:	4610      	mov	r0, r2
 8008812:	4798      	blx	r3
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d008      	beq.n	800882c <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800881a:	7af9      	ldrb	r1, [r7, #11]
 800881c:	2327      	movs	r3, #39	; 0x27
 800881e:	2202      	movs	r2, #2
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f7ff fee3 	bl	80085ec <SCSI_SenseCode>
      return -1;
 8008826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800882a:	e064      	b.n	80088f6 <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	3302      	adds	r3, #2
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	3303      	adds	r3, #3
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800883c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	3304      	adds	r3, #4
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008846:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	3205      	adds	r2, #5
 800884c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800884e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	3307      	adds	r3, #7
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	3208      	adds	r2, #8
 8008862:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8008864:	431a      	orrs	r2, r3
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008878:	7af9      	ldrb	r1, [r7, #11]
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f000 f872 	bl	8008964 <SCSI_CheckAddressRange>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	da02      	bge.n	800888c <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800888a:	e034      	b.n	80088f6 <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8008898:	fb02 f303 	mul.w	r3, r2, r3
 800889c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d00a      	beq.n	80088c0 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80088b0:	2320      	movs	r3, #32
 80088b2:	2205      	movs	r2, #5
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f7ff fe99 	bl	80085ec <SCSI_SenseCode>
      return -1;
 80088ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088be:	e01a      	b.n	80088f6 <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088c6:	bf28      	it	cs
 80088c8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80088cc:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	2201      	movs	r2, #1
 80088d2:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	f103 020c 	add.w	r2, r3, #12
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	b29b      	uxth	r3, r3
 80088de:	2101      	movs	r1, #1
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f005 fdb2 	bl	800e44a <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 80088e6:	2300      	movs	r3, #0
 80088e8:	e005      	b.n	80088f6 <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 80088ea:	7afb      	ldrb	r3, [r7, #11]
 80088ec:	4619      	mov	r1, r3
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f000 f8ce 	bl	8008a90 <SCSI_ProcessWrite>
 80088f4:	4603      	mov	r3, r0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3718      	adds	r7, #24
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b086      	sub	sp, #24
 8008902:	af00      	add	r7, sp, #0
 8008904:	60f8      	str	r0, [r7, #12]
 8008906:	460b      	mov	r3, r1
 8008908:	607a      	str	r2, [r7, #4]
 800890a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008912:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	3301      	adds	r3, #1
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	f003 0302 	and.w	r3, r3, #2
 800891e:	2b00      	cmp	r3, #0
 8008920:	d008      	beq.n	8008934 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8008922:	7af9      	ldrb	r1, [r7, #11]
 8008924:	2324      	movs	r3, #36	; 0x24
 8008926:	2205      	movs	r2, #5
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f7ff fe5f 	bl	80085ec <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800892e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008932:	e013      	b.n	800895c <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008940:	7af9      	ldrb	r1, [r7, #11]
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f000 f80e 	bl	8008964 <SCSI_CheckAddressRange>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	da02      	bge.n	8008954 <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 800894e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008952:	e003      	b.n	800895c <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	2200      	movs	r2, #0
 8008958:	815a      	strh	r2, [r3, #10]
  return 0;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3718      	adds	r7, #24
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b086      	sub	sp, #24
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	607a      	str	r2, [r7, #4]
 800896e:	603b      	str	r3, [r7, #0]
 8008970:	460b      	mov	r3, r1
 8008972:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800897a:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	441a      	add	r2, r3
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8008988:	429a      	cmp	r2, r3
 800898a:	d908      	bls.n	800899e <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800898c:	7af9      	ldrb	r1, [r7, #11]
 800898e:	2321      	movs	r3, #33	; 0x21
 8008990:	2205      	movs	r2, #5
 8008992:	68f8      	ldr	r0, [r7, #12]
 8008994:	f7ff fe2a 	bl	80085ec <SCSI_SenseCode>
    return -1;
 8008998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800899c:	e000      	b.n	80089a0 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3718      	adds	r7, #24
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 80089a8:	b590      	push	{r4, r7, lr}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	460b      	mov	r3, r1
 80089b2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ba:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 80089c8:	fb02 f303 	mul.w	r3, r2, r3
 80089cc:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089d4:	bf28      	it	cs
 80089d6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80089da:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089e2:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80089f6:	4618      	mov	r0, r3
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	78f8      	ldrb	r0, [r7, #3]
 8008a02:	47a0      	blx	r4
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	da08      	bge.n	8008a1c <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8008a0a:	78f9      	ldrb	r1, [r7, #3]
 8008a0c:	2311      	movs	r3, #17
 8008a0e:	2204      	movs	r2, #4
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f7ff fdeb 	bl	80085ec <SCSI_SenseCode>
    return -1;
 8008a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a1a:	e035      	b.n	8008a88 <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f103 020c 	add.w	r2, r3, #12
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	2181      	movs	r1, #129	; 0x81
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f005 fceb 	bl	800e404 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a42:	441a      	add	r2, r3
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8008a56:	4619      	mov	r1, r3
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a5e:	1ad2      	subs	r2, r2, r3
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	1ad2      	subs	r2, r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d102      	bne.n	8008a86 <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2203      	movs	r2, #3
 8008a84:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3714      	adds	r7, #20
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd90      	pop	{r4, r7, pc}

08008a90 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8008a90:	b590      	push	{r4, r7, lr}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	460b      	mov	r3, r1
 8008a9a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa2:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8008ab0:	fb02 f303 	mul.w	r3, r2, r3
 8008ab4:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008abc:	bf28      	it	cs
 8008abe:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008ac2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008aca:	695c      	ldr	r4, [r3, #20]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f103 010c 	add.w	r1, r3, #12
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8008ade:	4618      	mov	r0, r3
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	78f8      	ldrb	r0, [r7, #3]
 8008aea:	47a0      	blx	r4
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	da08      	bge.n	8008b04 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8008af2:	78f9      	ldrb	r1, [r7, #3]
 8008af4:	2303      	movs	r3, #3
 8008af6:	2204      	movs	r2, #4
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f7ff fd77 	bl	80085ec <SCSI_SenseCode>

    return -1;
 8008afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b02:	e045      	b.n	8008b90 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8008b10:	4619      	mov	r1, r3
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b18:	441a      	add	r2, r3
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b34:	1ad2      	subs	r2, r2, r3
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	1ad2      	subs	r2, r2, r3
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d104      	bne.n	8008b60 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008b56:	2100      	movs	r1, #0
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f7ff f97f 	bl	8007e5c <MSC_BOT_SendCSW>
 8008b5e:	e016      	b.n	8008b8e <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8008b6c:	fb02 f303 	mul.w	r3, r2, r3
 8008b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b74:	bf28      	it	cs
 8008b76:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008b7a:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f103 020c 	add.w	r2, r3, #12
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	2101      	movs	r1, #1
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f005 fc5e 	bl	800e44a <USBD_LL_PrepareReceive>
  }

  return 0;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3714      	adds	r7, #20
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd90      	pop	{r4, r7, pc}

08008b98 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d101      	bne.n	8008bb0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008bac:	2302      	movs	r3, #2
 8008bae:	e01a      	b.n	8008be6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d003      	beq.n	8008bc2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d003      	beq.n	8008bd0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	68ba      	ldr	r2, [r7, #8]
 8008bcc:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	79fa      	ldrb	r2, [r7, #7]
 8008bdc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f005 fab8 	bl	800e154 <USBD_LL_Init>

  return USBD_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008bee:	b480      	push	{r7}
 8008bf0:	b085      	sub	sp, #20
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
 8008bf6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d006      	beq.n	8008c10 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	683a      	ldr	r2, [r7, #0]
 8008c06:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	73fb      	strb	r3, [r7, #15]
 8008c0e:	e001      	b.n	8008c14 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008c10:	2302      	movs	r3, #2
 8008c12:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3714      	adds	r7, #20
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bc80      	pop	{r7}
 8008c1e:	4770      	bx	lr

08008c20 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f005 fae3 	bl	800e1f4 <USBD_LL_Start>

  return USBD_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	370c      	adds	r7, #12
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bc80      	pop	{r7}
 8008c4a:	4770      	bx	lr

08008c4c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	460b      	mov	r3, r1
 8008c56:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008c58:	2302      	movs	r3, #2
 8008c5a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00c      	beq.n	8008c80 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	78fa      	ldrb	r2, [r7, #3]
 8008c70:	4611      	mov	r1, r2
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	4798      	blx	r3
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d101      	bne.n	8008c80 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b082      	sub	sp, #8
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
 8008c92:	460b      	mov	r3, r1
 8008c94:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	78fa      	ldrb	r2, [r7, #3]
 8008ca0:	4611      	mov	r1, r2
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	4798      	blx	r3

  return USBD_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3708      	adds	r7, #8
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 fed7 	bl	8009a76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008ce4:	f003 031f 	and.w	r3, r3, #31
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d016      	beq.n	8008d1a <USBD_LL_SetupStage+0x6a>
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d81c      	bhi.n	8008d2a <USBD_LL_SetupStage+0x7a>
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d002      	beq.n	8008cfa <USBD_LL_SetupStage+0x4a>
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d008      	beq.n	8008d0a <USBD_LL_SetupStage+0x5a>
 8008cf8:	e017      	b.n	8008d2a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d00:	4619      	mov	r1, r3
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f9ca 	bl	800909c <USBD_StdDevReq>
      break;
 8008d08:	e01a      	b.n	8008d40 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d10:	4619      	mov	r1, r3
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fa2c 	bl	8009170 <USBD_StdItfReq>
      break;
 8008d18:	e012      	b.n	8008d40 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d20:	4619      	mov	r1, r3
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fa6c 	bl	8009200 <USBD_StdEPReq>
      break;
 8008d28:	e00a      	b.n	8008d40 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008d30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	4619      	mov	r1, r3
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f005 fada 	bl	800e2f2 <USBD_LL_StallEP>
      break;
 8008d3e:	bf00      	nop
  }

  return USBD_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b086      	sub	sp, #24
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	60f8      	str	r0, [r7, #12]
 8008d52:	460b      	mov	r3, r1
 8008d54:	607a      	str	r2, [r7, #4]
 8008d56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008d58:	7afb      	ldrb	r3, [r7, #11]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d14b      	bne.n	8008df6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008d64:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d6c:	2b03      	cmp	r3, #3
 8008d6e:	d134      	bne.n	8008dda <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	68da      	ldr	r2, [r3, #12]
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d919      	bls.n	8008db0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	68da      	ldr	r2, [r3, #12]
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	1ad2      	subs	r2, r2, r3
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	68da      	ldr	r2, [r3, #12]
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d203      	bcs.n	8008d9e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	e002      	b.n	8008da4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	461a      	mov	r2, r3
 8008da6:	6879      	ldr	r1, [r7, #4]
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f000 ff38 	bl	8009c1e <USBD_CtlContinueRx>
 8008dae:	e038      	b.n	8008e22 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00a      	beq.n	8008dd2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008dc2:	2b03      	cmp	r3, #3
 8008dc4:	d105      	bne.n	8008dd2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dcc:	691b      	ldr	r3, [r3, #16]
 8008dce:	68f8      	ldr	r0, [r7, #12]
 8008dd0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f000 ff35 	bl	8009c42 <USBD_CtlSendStatus>
 8008dd8:	e023      	b.n	8008e22 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008de0:	2b05      	cmp	r3, #5
 8008de2:	d11e      	bne.n	8008e22 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008dec:	2100      	movs	r1, #0
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	f005 fa7f 	bl	800e2f2 <USBD_LL_StallEP>
 8008df4:	e015      	b.n	8008e22 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00d      	beq.n	8008e1e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e08:	2b03      	cmp	r3, #3
 8008e0a:	d108      	bne.n	8008e1e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e12:	699b      	ldr	r3, [r3, #24]
 8008e14:	7afa      	ldrb	r2, [r7, #11]
 8008e16:	4611      	mov	r1, r2
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	4798      	blx	r3
 8008e1c:	e001      	b.n	8008e22 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008e1e:	2302      	movs	r3, #2
 8008e20:	e000      	b.n	8008e24 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008e22:	2300      	movs	r3, #0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3718      	adds	r7, #24
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b086      	sub	sp, #24
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	460b      	mov	r3, r1
 8008e36:	607a      	str	r2, [r7, #4]
 8008e38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008e3a:	7afb      	ldrb	r3, [r7, #11]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d17f      	bne.n	8008f40 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	3314      	adds	r3, #20
 8008e44:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	d15c      	bne.n	8008f0a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	68da      	ldr	r2, [r3, #12]
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	691b      	ldr	r3, [r3, #16]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d915      	bls.n	8008e88 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	68da      	ldr	r2, [r3, #12]
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	1ad2      	subs	r2, r2, r3
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	461a      	mov	r2, r3
 8008e72:	6879      	ldr	r1, [r7, #4]
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f000 fec0 	bl	8009bfa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	2100      	movs	r1, #0
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f005 fae2 	bl	800e44a <USBD_LL_PrepareReceive>
 8008e86:	e04e      	b.n	8008f26 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	697a      	ldr	r2, [r7, #20]
 8008e8e:	6912      	ldr	r2, [r2, #16]
 8008e90:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e94:	fb01 f202 	mul.w	r2, r1, r2
 8008e98:	1a9b      	subs	r3, r3, r2
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d11c      	bne.n	8008ed8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	689a      	ldr	r2, [r3, #8]
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d316      	bcc.n	8008ed8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	689a      	ldr	r2, [r3, #8]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d20f      	bcs.n	8008ed8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008eb8:	2200      	movs	r2, #0
 8008eba:	2100      	movs	r1, #0
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f000 fe9c 	bl	8009bfa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008eca:	2300      	movs	r3, #0
 8008ecc:	2200      	movs	r2, #0
 8008ece:	2100      	movs	r1, #0
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f005 faba 	bl	800e44a <USBD_LL_PrepareReceive>
 8008ed6:	e026      	b.n	8008f26 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00a      	beq.n	8008efa <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008eea:	2b03      	cmp	r3, #3
 8008eec:	d105      	bne.n	8008efa <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008efa:	2180      	movs	r1, #128	; 0x80
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f005 f9f8 	bl	800e2f2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008f02:	68f8      	ldr	r0, [r7, #12]
 8008f04:	f000 feb0 	bl	8009c68 <USBD_CtlReceiveStatus>
 8008f08:	e00d      	b.n	8008f26 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f10:	2b04      	cmp	r3, #4
 8008f12:	d004      	beq.n	8008f1e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d103      	bne.n	8008f26 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008f1e:	2180      	movs	r1, #128	; 0x80
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f005 f9e6 	bl	800e2f2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d11d      	bne.n	8008f6c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f7ff fe81 	bl	8008c38 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008f3e:	e015      	b.n	8008f6c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f46:	695b      	ldr	r3, [r3, #20]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00d      	beq.n	8008f68 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008f52:	2b03      	cmp	r3, #3
 8008f54:	d108      	bne.n	8008f68 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	7afa      	ldrb	r2, [r7, #11]
 8008f60:	4611      	mov	r1, r2
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	4798      	blx	r3
 8008f66:	e001      	b.n	8008f6c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008f68:	2302      	movs	r3, #2
 8008f6a:	e000      	b.n	8008f6e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3718      	adds	r7, #24
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b082      	sub	sp, #8
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f7e:	2340      	movs	r3, #64	; 0x40
 8008f80:	2200      	movs	r2, #0
 8008f82:	2100      	movs	r1, #0
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f005 f950 	bl	800e22a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2240      	movs	r2, #64	; 0x40
 8008f96:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f9a:	2340      	movs	r3, #64	; 0x40
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	2180      	movs	r1, #128	; 0x80
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f005 f942 	bl	800e22a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2240      	movs	r2, #64	; 0x40
 8008fb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d009      	beq.n	8008fee <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	6852      	ldr	r2, [r2, #4]
 8008fe6:	b2d2      	uxtb	r2, r2
 8008fe8:	4611      	mov	r1, r2
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	4798      	blx	r3
  }

  return USBD_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	460b      	mov	r3, r1
 8009002:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	78fa      	ldrb	r2, [r7, #3]
 8009008:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	bc80      	pop	{r7}
 8009014:	4770      	bx	lr

08009016 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009016:	b480      	push	{r7}
 8009018:	b083      	sub	sp, #12
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2204      	movs	r2, #4
 800902e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	bc80      	pop	{r7}
 800903c:	4770      	bx	lr

0800903e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800903e:	b480      	push	{r7}
 8009040:	b083      	sub	sp, #12
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800904c:	2b04      	cmp	r3, #4
 800904e:	d105      	bne.n	800905c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	370c      	adds	r7, #12
 8009062:	46bd      	mov	sp, r7
 8009064:	bc80      	pop	{r7}
 8009066:	4770      	bx	lr

08009068 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009076:	2b03      	cmp	r3, #3
 8009078:	d10b      	bne.n	8009092 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009080:	69db      	ldr	r3, [r3, #28]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d005      	beq.n	8009092 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800908c:	69db      	ldr	r3, [r3, #28]
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090a6:	2300      	movs	r3, #0
 80090a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090b2:	2b40      	cmp	r3, #64	; 0x40
 80090b4:	d005      	beq.n	80090c2 <USBD_StdDevReq+0x26>
 80090b6:	2b40      	cmp	r3, #64	; 0x40
 80090b8:	d84f      	bhi.n	800915a <USBD_StdDevReq+0xbe>
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d009      	beq.n	80090d2 <USBD_StdDevReq+0x36>
 80090be:	2b20      	cmp	r3, #32
 80090c0:	d14b      	bne.n	800915a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	6839      	ldr	r1, [r7, #0]
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	4798      	blx	r3
      break;
 80090d0:	e048      	b.n	8009164 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	785b      	ldrb	r3, [r3, #1]
 80090d6:	2b09      	cmp	r3, #9
 80090d8:	d839      	bhi.n	800914e <USBD_StdDevReq+0xb2>
 80090da:	a201      	add	r2, pc, #4	; (adr r2, 80090e0 <USBD_StdDevReq+0x44>)
 80090dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e0:	08009131 	.word	0x08009131
 80090e4:	08009145 	.word	0x08009145
 80090e8:	0800914f 	.word	0x0800914f
 80090ec:	0800913b 	.word	0x0800913b
 80090f0:	0800914f 	.word	0x0800914f
 80090f4:	08009113 	.word	0x08009113
 80090f8:	08009109 	.word	0x08009109
 80090fc:	0800914f 	.word	0x0800914f
 8009100:	08009127 	.word	0x08009127
 8009104:	0800911d 	.word	0x0800911d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009108:	6839      	ldr	r1, [r7, #0]
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 f9dc 	bl	80094c8 <USBD_GetDescriptor>
          break;
 8009110:	e022      	b.n	8009158 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009112:	6839      	ldr	r1, [r7, #0]
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fb3f 	bl	8009798 <USBD_SetAddress>
          break;
 800911a:	e01d      	b.n	8009158 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800911c:	6839      	ldr	r1, [r7, #0]
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 fb7e 	bl	8009820 <USBD_SetConfig>
          break;
 8009124:	e018      	b.n	8009158 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009126:	6839      	ldr	r1, [r7, #0]
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 fc07 	bl	800993c <USBD_GetConfig>
          break;
 800912e:	e013      	b.n	8009158 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009130:	6839      	ldr	r1, [r7, #0]
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 fc37 	bl	80099a6 <USBD_GetStatus>
          break;
 8009138:	e00e      	b.n	8009158 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800913a:	6839      	ldr	r1, [r7, #0]
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 fc65 	bl	8009a0c <USBD_SetFeature>
          break;
 8009142:	e009      	b.n	8009158 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009144:	6839      	ldr	r1, [r7, #0]
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 fc74 	bl	8009a34 <USBD_ClrFeature>
          break;
 800914c:	e004      	b.n	8009158 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800914e:	6839      	ldr	r1, [r7, #0]
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 fccc 	bl	8009aee <USBD_CtlError>
          break;
 8009156:	bf00      	nop
      }
      break;
 8009158:	e004      	b.n	8009164 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800915a:	6839      	ldr	r1, [r7, #0]
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 fcc6 	bl	8009aee <USBD_CtlError>
      break;
 8009162:	bf00      	nop
  }

  return ret;
 8009164:	7bfb      	ldrb	r3, [r7, #15]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop

08009170 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800917a:	2300      	movs	r3, #0
 800917c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009186:	2b40      	cmp	r3, #64	; 0x40
 8009188:	d005      	beq.n	8009196 <USBD_StdItfReq+0x26>
 800918a:	2b40      	cmp	r3, #64	; 0x40
 800918c:	d82e      	bhi.n	80091ec <USBD_StdItfReq+0x7c>
 800918e:	2b00      	cmp	r3, #0
 8009190:	d001      	beq.n	8009196 <USBD_StdItfReq+0x26>
 8009192:	2b20      	cmp	r3, #32
 8009194:	d12a      	bne.n	80091ec <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800919c:	3b01      	subs	r3, #1
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d81d      	bhi.n	80091de <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	889b      	ldrh	r3, [r3, #4]
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d813      	bhi.n	80091d4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	6839      	ldr	r1, [r7, #0]
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	4798      	blx	r3
 80091ba:	4603      	mov	r3, r0
 80091bc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	88db      	ldrh	r3, [r3, #6]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d110      	bne.n	80091e8 <USBD_StdItfReq+0x78>
 80091c6:	7bfb      	ldrb	r3, [r7, #15]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d10d      	bne.n	80091e8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 fd38 	bl	8009c42 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80091d2:	e009      	b.n	80091e8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fc89 	bl	8009aee <USBD_CtlError>
          break;
 80091dc:	e004      	b.n	80091e8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80091de:	6839      	ldr	r1, [r7, #0]
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fc84 	bl	8009aee <USBD_CtlError>
          break;
 80091e6:	e000      	b.n	80091ea <USBD_StdItfReq+0x7a>
          break;
 80091e8:	bf00      	nop
      }
      break;
 80091ea:	e004      	b.n	80091f6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80091ec:	6839      	ldr	r1, [r7, #0]
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fc7d 	bl	8009aee <USBD_CtlError>
      break;
 80091f4:	bf00      	nop
  }

  return USBD_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	889b      	ldrh	r3, [r3, #4]
 8009212:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800921c:	2b40      	cmp	r3, #64	; 0x40
 800921e:	d007      	beq.n	8009230 <USBD_StdEPReq+0x30>
 8009220:	2b40      	cmp	r3, #64	; 0x40
 8009222:	f200 8146 	bhi.w	80094b2 <USBD_StdEPReq+0x2b2>
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00a      	beq.n	8009240 <USBD_StdEPReq+0x40>
 800922a:	2b20      	cmp	r3, #32
 800922c:	f040 8141 	bne.w	80094b2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	6839      	ldr	r1, [r7, #0]
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	4798      	blx	r3
      break;
 800923e:	e13d      	b.n	80094bc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009248:	2b20      	cmp	r3, #32
 800924a:	d10a      	bne.n	8009262 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	6839      	ldr	r1, [r7, #0]
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	4798      	blx	r3
 800925a:	4603      	mov	r3, r0
 800925c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800925e:	7bfb      	ldrb	r3, [r7, #15]
 8009260:	e12d      	b.n	80094be <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	785b      	ldrb	r3, [r3, #1]
 8009266:	2b03      	cmp	r3, #3
 8009268:	d007      	beq.n	800927a <USBD_StdEPReq+0x7a>
 800926a:	2b03      	cmp	r3, #3
 800926c:	f300 811b 	bgt.w	80094a6 <USBD_StdEPReq+0x2a6>
 8009270:	2b00      	cmp	r3, #0
 8009272:	d072      	beq.n	800935a <USBD_StdEPReq+0x15a>
 8009274:	2b01      	cmp	r3, #1
 8009276:	d03a      	beq.n	80092ee <USBD_StdEPReq+0xee>
 8009278:	e115      	b.n	80094a6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009280:	2b02      	cmp	r3, #2
 8009282:	d002      	beq.n	800928a <USBD_StdEPReq+0x8a>
 8009284:	2b03      	cmp	r3, #3
 8009286:	d015      	beq.n	80092b4 <USBD_StdEPReq+0xb4>
 8009288:	e02b      	b.n	80092e2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800928a:	7bbb      	ldrb	r3, [r7, #14]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00c      	beq.n	80092aa <USBD_StdEPReq+0xaa>
 8009290:	7bbb      	ldrb	r3, [r7, #14]
 8009292:	2b80      	cmp	r3, #128	; 0x80
 8009294:	d009      	beq.n	80092aa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009296:	7bbb      	ldrb	r3, [r7, #14]
 8009298:	4619      	mov	r1, r3
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f005 f829 	bl	800e2f2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80092a0:	2180      	movs	r1, #128	; 0x80
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f005 f825 	bl	800e2f2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092a8:	e020      	b.n	80092ec <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80092aa:	6839      	ldr	r1, [r7, #0]
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 fc1e 	bl	8009aee <USBD_CtlError>
              break;
 80092b2:	e01b      	b.n	80092ec <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	885b      	ldrh	r3, [r3, #2]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d10e      	bne.n	80092da <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80092bc:	7bbb      	ldrb	r3, [r7, #14]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00b      	beq.n	80092da <USBD_StdEPReq+0xda>
 80092c2:	7bbb      	ldrb	r3, [r7, #14]
 80092c4:	2b80      	cmp	r3, #128	; 0x80
 80092c6:	d008      	beq.n	80092da <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	88db      	ldrh	r3, [r3, #6]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d104      	bne.n	80092da <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80092d0:	7bbb      	ldrb	r3, [r7, #14]
 80092d2:	4619      	mov	r1, r3
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f005 f80c 	bl	800e2f2 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 fcb1 	bl	8009c42 <USBD_CtlSendStatus>

              break;
 80092e0:	e004      	b.n	80092ec <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80092e2:	6839      	ldr	r1, [r7, #0]
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 fc02 	bl	8009aee <USBD_CtlError>
              break;
 80092ea:	bf00      	nop
          }
          break;
 80092ec:	e0e0      	b.n	80094b0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d002      	beq.n	80092fe <USBD_StdEPReq+0xfe>
 80092f8:	2b03      	cmp	r3, #3
 80092fa:	d015      	beq.n	8009328 <USBD_StdEPReq+0x128>
 80092fc:	e026      	b.n	800934c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092fe:	7bbb      	ldrb	r3, [r7, #14]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00c      	beq.n	800931e <USBD_StdEPReq+0x11e>
 8009304:	7bbb      	ldrb	r3, [r7, #14]
 8009306:	2b80      	cmp	r3, #128	; 0x80
 8009308:	d009      	beq.n	800931e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800930a:	7bbb      	ldrb	r3, [r7, #14]
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f004 ffef 	bl	800e2f2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009314:	2180      	movs	r1, #128	; 0x80
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f004 ffeb 	bl	800e2f2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800931c:	e01c      	b.n	8009358 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fbe4 	bl	8009aee <USBD_CtlError>
              break;
 8009326:	e017      	b.n	8009358 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	885b      	ldrh	r3, [r3, #2]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d112      	bne.n	8009356 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009330:	7bbb      	ldrb	r3, [r7, #14]
 8009332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009336:	2b00      	cmp	r3, #0
 8009338:	d004      	beq.n	8009344 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800933a:	7bbb      	ldrb	r3, [r7, #14]
 800933c:	4619      	mov	r1, r3
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f004 fff6 	bl	800e330 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 fc7c 	bl	8009c42 <USBD_CtlSendStatus>
              }
              break;
 800934a:	e004      	b.n	8009356 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800934c:	6839      	ldr	r1, [r7, #0]
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 fbcd 	bl	8009aee <USBD_CtlError>
              break;
 8009354:	e000      	b.n	8009358 <USBD_StdEPReq+0x158>
              break;
 8009356:	bf00      	nop
          }
          break;
 8009358:	e0aa      	b.n	80094b0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009360:	2b02      	cmp	r3, #2
 8009362:	d002      	beq.n	800936a <USBD_StdEPReq+0x16a>
 8009364:	2b03      	cmp	r3, #3
 8009366:	d032      	beq.n	80093ce <USBD_StdEPReq+0x1ce>
 8009368:	e097      	b.n	800949a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800936a:	7bbb      	ldrb	r3, [r7, #14]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d007      	beq.n	8009380 <USBD_StdEPReq+0x180>
 8009370:	7bbb      	ldrb	r3, [r7, #14]
 8009372:	2b80      	cmp	r3, #128	; 0x80
 8009374:	d004      	beq.n	8009380 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009376:	6839      	ldr	r1, [r7, #0]
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 fbb8 	bl	8009aee <USBD_CtlError>
                break;
 800937e:	e091      	b.n	80094a4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009380:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009384:	2b00      	cmp	r3, #0
 8009386:	da0b      	bge.n	80093a0 <USBD_StdEPReq+0x1a0>
 8009388:	7bbb      	ldrb	r3, [r7, #14]
 800938a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800938e:	4613      	mov	r3, r2
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	4413      	add	r3, r2
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	3310      	adds	r3, #16
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	4413      	add	r3, r2
 800939c:	3304      	adds	r3, #4
 800939e:	e00b      	b.n	80093b8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80093a0:	7bbb      	ldrb	r3, [r7, #14]
 80093a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093a6:	4613      	mov	r3, r2
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	4413      	add	r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	4413      	add	r3, r2
 80093b6:	3304      	adds	r3, #4
 80093b8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	2200      	movs	r2, #0
 80093be:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	2202      	movs	r2, #2
 80093c4:	4619      	mov	r1, r3
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 fbfb 	bl	8009bc2 <USBD_CtlSendData>
              break;
 80093cc:	e06a      	b.n	80094a4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80093ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	da11      	bge.n	80093fa <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80093d6:	7bbb      	ldrb	r3, [r7, #14]
 80093d8:	f003 020f 	and.w	r2, r3, #15
 80093dc:	6879      	ldr	r1, [r7, #4]
 80093de:	4613      	mov	r3, r2
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	4413      	add	r3, r2
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	440b      	add	r3, r1
 80093e8:	3318      	adds	r3, #24
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d117      	bne.n	8009420 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80093f0:	6839      	ldr	r1, [r7, #0]
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 fb7b 	bl	8009aee <USBD_CtlError>
                  break;
 80093f8:	e054      	b.n	80094a4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80093fa:	7bbb      	ldrb	r3, [r7, #14]
 80093fc:	f003 020f 	and.w	r2, r3, #15
 8009400:	6879      	ldr	r1, [r7, #4]
 8009402:	4613      	mov	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4413      	add	r3, r2
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	440b      	add	r3, r1
 800940c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d104      	bne.n	8009420 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009416:	6839      	ldr	r1, [r7, #0]
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 fb68 	bl	8009aee <USBD_CtlError>
                  break;
 800941e:	e041      	b.n	80094a4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009420:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009424:	2b00      	cmp	r3, #0
 8009426:	da0b      	bge.n	8009440 <USBD_StdEPReq+0x240>
 8009428:	7bbb      	ldrb	r3, [r7, #14]
 800942a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800942e:	4613      	mov	r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	4413      	add	r3, r2
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	3310      	adds	r3, #16
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	4413      	add	r3, r2
 800943c:	3304      	adds	r3, #4
 800943e:	e00b      	b.n	8009458 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009440:	7bbb      	ldrb	r3, [r7, #14]
 8009442:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009446:	4613      	mov	r3, r2
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	4413      	add	r3, r2
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	4413      	add	r3, r2
 8009456:	3304      	adds	r3, #4
 8009458:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800945a:	7bbb      	ldrb	r3, [r7, #14]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d002      	beq.n	8009466 <USBD_StdEPReq+0x266>
 8009460:	7bbb      	ldrb	r3, [r7, #14]
 8009462:	2b80      	cmp	r3, #128	; 0x80
 8009464:	d103      	bne.n	800946e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	2200      	movs	r2, #0
 800946a:	601a      	str	r2, [r3, #0]
 800946c:	e00e      	b.n	800948c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800946e:	7bbb      	ldrb	r3, [r7, #14]
 8009470:	4619      	mov	r1, r3
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f004 ff7b 	bl	800e36e <USBD_LL_IsStallEP>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d003      	beq.n	8009486 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	2201      	movs	r2, #1
 8009482:	601a      	str	r2, [r3, #0]
 8009484:	e002      	b.n	800948c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	2200      	movs	r2, #0
 800948a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	2202      	movs	r2, #2
 8009490:	4619      	mov	r1, r3
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fb95 	bl	8009bc2 <USBD_CtlSendData>
              break;
 8009498:	e004      	b.n	80094a4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800949a:	6839      	ldr	r1, [r7, #0]
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 fb26 	bl	8009aee <USBD_CtlError>
              break;
 80094a2:	bf00      	nop
          }
          break;
 80094a4:	e004      	b.n	80094b0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80094a6:	6839      	ldr	r1, [r7, #0]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 fb20 	bl	8009aee <USBD_CtlError>
          break;
 80094ae:	bf00      	nop
      }
      break;
 80094b0:	e004      	b.n	80094bc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80094b2:	6839      	ldr	r1, [r7, #0]
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 fb1a 	bl	8009aee <USBD_CtlError>
      break;
 80094ba:	bf00      	nop
  }

  return ret;
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
	...

080094c8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80094d2:	2300      	movs	r3, #0
 80094d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80094d6:	2300      	movs	r3, #0
 80094d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80094da:	2300      	movs	r3, #0
 80094dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	885b      	ldrh	r3, [r3, #2]
 80094e2:	0a1b      	lsrs	r3, r3, #8
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	3b01      	subs	r3, #1
 80094e8:	2b06      	cmp	r3, #6
 80094ea:	f200 8128 	bhi.w	800973e <USBD_GetDescriptor+0x276>
 80094ee:	a201      	add	r2, pc, #4	; (adr r2, 80094f4 <USBD_GetDescriptor+0x2c>)
 80094f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f4:	08009511 	.word	0x08009511
 80094f8:	08009529 	.word	0x08009529
 80094fc:	08009569 	.word	0x08009569
 8009500:	0800973f 	.word	0x0800973f
 8009504:	0800973f 	.word	0x0800973f
 8009508:	080096df 	.word	0x080096df
 800950c:	0800970b 	.word	0x0800970b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	7c12      	ldrb	r2, [r2, #16]
 800951c:	f107 0108 	add.w	r1, r7, #8
 8009520:	4610      	mov	r0, r2
 8009522:	4798      	blx	r3
 8009524:	60f8      	str	r0, [r7, #12]
      break;
 8009526:	e112      	b.n	800974e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	7c1b      	ldrb	r3, [r3, #16]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d10d      	bne.n	800954c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009538:	f107 0208 	add.w	r2, r7, #8
 800953c:	4610      	mov	r0, r2
 800953e:	4798      	blx	r3
 8009540:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	3301      	adds	r3, #1
 8009546:	2202      	movs	r2, #2
 8009548:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800954a:	e100      	b.n	800974e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009554:	f107 0208 	add.w	r2, r7, #8
 8009558:	4610      	mov	r0, r2
 800955a:	4798      	blx	r3
 800955c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	3301      	adds	r3, #1
 8009562:	2202      	movs	r2, #2
 8009564:	701a      	strb	r2, [r3, #0]
      break;
 8009566:	e0f2      	b.n	800974e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	885b      	ldrh	r3, [r3, #2]
 800956c:	b2db      	uxtb	r3, r3
 800956e:	2b05      	cmp	r3, #5
 8009570:	f200 80ac 	bhi.w	80096cc <USBD_GetDescriptor+0x204>
 8009574:	a201      	add	r2, pc, #4	; (adr r2, 800957c <USBD_GetDescriptor+0xb4>)
 8009576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957a:	bf00      	nop
 800957c:	08009595 	.word	0x08009595
 8009580:	080095c9 	.word	0x080095c9
 8009584:	080095fd 	.word	0x080095fd
 8009588:	08009631 	.word	0x08009631
 800958c:	08009665 	.word	0x08009665
 8009590:	08009699 	.word	0x08009699
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00b      	beq.n	80095b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	7c12      	ldrb	r2, [r2, #16]
 80095ac:	f107 0108 	add.w	r1, r7, #8
 80095b0:	4610      	mov	r0, r2
 80095b2:	4798      	blx	r3
 80095b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095b6:	e091      	b.n	80096dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095b8:	6839      	ldr	r1, [r7, #0]
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 fa97 	bl	8009aee <USBD_CtlError>
            err++;
 80095c0:	7afb      	ldrb	r3, [r7, #11]
 80095c2:	3301      	adds	r3, #1
 80095c4:	72fb      	strb	r3, [r7, #11]
          break;
 80095c6:	e089      	b.n	80096dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d00b      	beq.n	80095ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	7c12      	ldrb	r2, [r2, #16]
 80095e0:	f107 0108 	add.w	r1, r7, #8
 80095e4:	4610      	mov	r0, r2
 80095e6:	4798      	blx	r3
 80095e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095ea:	e077      	b.n	80096dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095ec:	6839      	ldr	r1, [r7, #0]
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 fa7d 	bl	8009aee <USBD_CtlError>
            err++;
 80095f4:	7afb      	ldrb	r3, [r7, #11]
 80095f6:	3301      	adds	r3, #1
 80095f8:	72fb      	strb	r3, [r7, #11]
          break;
 80095fa:	e06f      	b.n	80096dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00b      	beq.n	8009620 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	7c12      	ldrb	r2, [r2, #16]
 8009614:	f107 0108 	add.w	r1, r7, #8
 8009618:	4610      	mov	r0, r2
 800961a:	4798      	blx	r3
 800961c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800961e:	e05d      	b.n	80096dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009620:	6839      	ldr	r1, [r7, #0]
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 fa63 	bl	8009aee <USBD_CtlError>
            err++;
 8009628:	7afb      	ldrb	r3, [r7, #11]
 800962a:	3301      	adds	r3, #1
 800962c:	72fb      	strb	r3, [r7, #11]
          break;
 800962e:	e055      	b.n	80096dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00b      	beq.n	8009654 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	7c12      	ldrb	r2, [r2, #16]
 8009648:	f107 0108 	add.w	r1, r7, #8
 800964c:	4610      	mov	r0, r2
 800964e:	4798      	blx	r3
 8009650:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009652:	e043      	b.n	80096dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009654:	6839      	ldr	r1, [r7, #0]
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 fa49 	bl	8009aee <USBD_CtlError>
            err++;
 800965c:	7afb      	ldrb	r3, [r7, #11]
 800965e:	3301      	adds	r3, #1
 8009660:	72fb      	strb	r3, [r7, #11]
          break;
 8009662:	e03b      	b.n	80096dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800966a:	695b      	ldr	r3, [r3, #20]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00b      	beq.n	8009688 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009676:	695b      	ldr	r3, [r3, #20]
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	7c12      	ldrb	r2, [r2, #16]
 800967c:	f107 0108 	add.w	r1, r7, #8
 8009680:	4610      	mov	r0, r2
 8009682:	4798      	blx	r3
 8009684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009686:	e029      	b.n	80096dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009688:	6839      	ldr	r1, [r7, #0]
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 fa2f 	bl	8009aee <USBD_CtlError>
            err++;
 8009690:	7afb      	ldrb	r3, [r7, #11]
 8009692:	3301      	adds	r3, #1
 8009694:	72fb      	strb	r3, [r7, #11]
          break;
 8009696:	e021      	b.n	80096dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00b      	beq.n	80096bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096aa:	699b      	ldr	r3, [r3, #24]
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	7c12      	ldrb	r2, [r2, #16]
 80096b0:	f107 0108 	add.w	r1, r7, #8
 80096b4:	4610      	mov	r0, r2
 80096b6:	4798      	blx	r3
 80096b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096ba:	e00f      	b.n	80096dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096bc:	6839      	ldr	r1, [r7, #0]
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 fa15 	bl	8009aee <USBD_CtlError>
            err++;
 80096c4:	7afb      	ldrb	r3, [r7, #11]
 80096c6:	3301      	adds	r3, #1
 80096c8:	72fb      	strb	r3, [r7, #11]
          break;
 80096ca:	e007      	b.n	80096dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80096cc:	6839      	ldr	r1, [r7, #0]
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 fa0d 	bl	8009aee <USBD_CtlError>
          err++;
 80096d4:	7afb      	ldrb	r3, [r7, #11]
 80096d6:	3301      	adds	r3, #1
 80096d8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80096da:	e038      	b.n	800974e <USBD_GetDescriptor+0x286>
 80096dc:	e037      	b.n	800974e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	7c1b      	ldrb	r3, [r3, #16]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d109      	bne.n	80096fa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ee:	f107 0208 	add.w	r2, r7, #8
 80096f2:	4610      	mov	r0, r2
 80096f4:	4798      	blx	r3
 80096f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80096f8:	e029      	b.n	800974e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80096fa:	6839      	ldr	r1, [r7, #0]
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 f9f6 	bl	8009aee <USBD_CtlError>
        err++;
 8009702:	7afb      	ldrb	r3, [r7, #11]
 8009704:	3301      	adds	r3, #1
 8009706:	72fb      	strb	r3, [r7, #11]
      break;
 8009708:	e021      	b.n	800974e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	7c1b      	ldrb	r3, [r3, #16]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d10d      	bne.n	800972e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800971a:	f107 0208 	add.w	r2, r7, #8
 800971e:	4610      	mov	r0, r2
 8009720:	4798      	blx	r3
 8009722:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	3301      	adds	r3, #1
 8009728:	2207      	movs	r2, #7
 800972a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800972c:	e00f      	b.n	800974e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800972e:	6839      	ldr	r1, [r7, #0]
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f9dc 	bl	8009aee <USBD_CtlError>
        err++;
 8009736:	7afb      	ldrb	r3, [r7, #11]
 8009738:	3301      	adds	r3, #1
 800973a:	72fb      	strb	r3, [r7, #11]
      break;
 800973c:	e007      	b.n	800974e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800973e:	6839      	ldr	r1, [r7, #0]
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 f9d4 	bl	8009aee <USBD_CtlError>
      err++;
 8009746:	7afb      	ldrb	r3, [r7, #11]
 8009748:	3301      	adds	r3, #1
 800974a:	72fb      	strb	r3, [r7, #11]
      break;
 800974c:	bf00      	nop
  }

  if (err != 0U)
 800974e:	7afb      	ldrb	r3, [r7, #11]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d11c      	bne.n	800978e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009754:	893b      	ldrh	r3, [r7, #8]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d011      	beq.n	800977e <USBD_GetDescriptor+0x2b6>
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	88db      	ldrh	r3, [r3, #6]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00d      	beq.n	800977e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	88da      	ldrh	r2, [r3, #6]
 8009766:	893b      	ldrh	r3, [r7, #8]
 8009768:	4293      	cmp	r3, r2
 800976a:	bf28      	it	cs
 800976c:	4613      	movcs	r3, r2
 800976e:	b29b      	uxth	r3, r3
 8009770:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009772:	893b      	ldrh	r3, [r7, #8]
 8009774:	461a      	mov	r2, r3
 8009776:	68f9      	ldr	r1, [r7, #12]
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 fa22 	bl	8009bc2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	88db      	ldrh	r3, [r3, #6]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d104      	bne.n	8009790 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 fa5b 	bl	8009c42 <USBD_CtlSendStatus>
 800978c:	e000      	b.n	8009790 <USBD_GetDescriptor+0x2c8>
    return;
 800978e:	bf00      	nop
    }
  }
}
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop

08009798 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	889b      	ldrh	r3, [r3, #4]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d130      	bne.n	800980c <USBD_SetAddress+0x74>
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	88db      	ldrh	r3, [r3, #6]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d12c      	bne.n	800980c <USBD_SetAddress+0x74>
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	885b      	ldrh	r3, [r3, #2]
 80097b6:	2b7f      	cmp	r3, #127	; 0x7f
 80097b8:	d828      	bhi.n	800980c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	885b      	ldrh	r3, [r3, #2]
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097cc:	2b03      	cmp	r3, #3
 80097ce:	d104      	bne.n	80097da <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80097d0:	6839      	ldr	r1, [r7, #0]
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f98b 	bl	8009aee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097d8:	e01d      	b.n	8009816 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	7bfa      	ldrb	r2, [r7, #15]
 80097de:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80097e2:	7bfb      	ldrb	r3, [r7, #15]
 80097e4:	4619      	mov	r1, r3
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f004 fded 	bl	800e3c6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 fa28 	bl	8009c42 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80097f2:	7bfb      	ldrb	r3, [r7, #15]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d004      	beq.n	8009802 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2202      	movs	r2, #2
 80097fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009800:	e009      	b.n	8009816 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2201      	movs	r2, #1
 8009806:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800980a:	e004      	b.n	8009816 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 f96d 	bl	8009aee <USBD_CtlError>
  }
}
 8009814:	bf00      	nop
 8009816:	bf00      	nop
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
	...

08009820 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	885b      	ldrh	r3, [r3, #2]
 800982e:	b2da      	uxtb	r2, r3
 8009830:	4b41      	ldr	r3, [pc, #260]	; (8009938 <USBD_SetConfig+0x118>)
 8009832:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009834:	4b40      	ldr	r3, [pc, #256]	; (8009938 <USBD_SetConfig+0x118>)
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	2b01      	cmp	r3, #1
 800983a:	d904      	bls.n	8009846 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 f955 	bl	8009aee <USBD_CtlError>
 8009844:	e075      	b.n	8009932 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800984c:	2b02      	cmp	r3, #2
 800984e:	d002      	beq.n	8009856 <USBD_SetConfig+0x36>
 8009850:	2b03      	cmp	r3, #3
 8009852:	d023      	beq.n	800989c <USBD_SetConfig+0x7c>
 8009854:	e062      	b.n	800991c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009856:	4b38      	ldr	r3, [pc, #224]	; (8009938 <USBD_SetConfig+0x118>)
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d01a      	beq.n	8009894 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800985e:	4b36      	ldr	r3, [pc, #216]	; (8009938 <USBD_SetConfig+0x118>)
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	461a      	mov	r2, r3
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2203      	movs	r2, #3
 800986c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009870:	4b31      	ldr	r3, [pc, #196]	; (8009938 <USBD_SetConfig+0x118>)
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	4619      	mov	r1, r3
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f7ff f9e8 	bl	8008c4c <USBD_SetClassConfig>
 800987c:	4603      	mov	r3, r0
 800987e:	2b02      	cmp	r3, #2
 8009880:	d104      	bne.n	800988c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009882:	6839      	ldr	r1, [r7, #0]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 f932 	bl	8009aee <USBD_CtlError>
            return;
 800988a:	e052      	b.n	8009932 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 f9d8 	bl	8009c42 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009892:	e04e      	b.n	8009932 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 f9d4 	bl	8009c42 <USBD_CtlSendStatus>
        break;
 800989a:	e04a      	b.n	8009932 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800989c:	4b26      	ldr	r3, [pc, #152]	; (8009938 <USBD_SetConfig+0x118>)
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d112      	bne.n	80098ca <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2202      	movs	r2, #2
 80098a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80098ac:	4b22      	ldr	r3, [pc, #136]	; (8009938 <USBD_SetConfig+0x118>)
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	461a      	mov	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80098b6:	4b20      	ldr	r3, [pc, #128]	; (8009938 <USBD_SetConfig+0x118>)
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	4619      	mov	r1, r3
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f7ff f9e4 	bl	8008c8a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 f9bd 	bl	8009c42 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80098c8:	e033      	b.n	8009932 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80098ca:	4b1b      	ldr	r3, [pc, #108]	; (8009938 <USBD_SetConfig+0x118>)
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	461a      	mov	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d01d      	beq.n	8009914 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	4619      	mov	r1, r3
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f7ff f9d2 	bl	8008c8a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80098e6:	4b14      	ldr	r3, [pc, #80]	; (8009938 <USBD_SetConfig+0x118>)
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	461a      	mov	r2, r3
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80098f0:	4b11      	ldr	r3, [pc, #68]	; (8009938 <USBD_SetConfig+0x118>)
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	4619      	mov	r1, r3
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f7ff f9a8 	bl	8008c4c <USBD_SetClassConfig>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d104      	bne.n	800990c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009902:	6839      	ldr	r1, [r7, #0]
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 f8f2 	bl	8009aee <USBD_CtlError>
            return;
 800990a:	e012      	b.n	8009932 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f998 	bl	8009c42 <USBD_CtlSendStatus>
        break;
 8009912:	e00e      	b.n	8009932 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 f994 	bl	8009c42 <USBD_CtlSendStatus>
        break;
 800991a:	e00a      	b.n	8009932 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800991c:	6839      	ldr	r1, [r7, #0]
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 f8e5 	bl	8009aee <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009924:	4b04      	ldr	r3, [pc, #16]	; (8009938 <USBD_SetConfig+0x118>)
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	4619      	mov	r1, r3
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f7ff f9ad 	bl	8008c8a <USBD_ClrClassConfig>
        break;
 8009930:	bf00      	nop
    }
  }
}
 8009932:	3708      	adds	r7, #8
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	2000222c 	.word	0x2000222c

0800993c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	88db      	ldrh	r3, [r3, #6]
 800994a:	2b01      	cmp	r3, #1
 800994c:	d004      	beq.n	8009958 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800994e:	6839      	ldr	r1, [r7, #0]
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 f8cc 	bl	8009aee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009956:	e022      	b.n	800999e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800995e:	2b02      	cmp	r3, #2
 8009960:	dc02      	bgt.n	8009968 <USBD_GetConfig+0x2c>
 8009962:	2b00      	cmp	r3, #0
 8009964:	dc03      	bgt.n	800996e <USBD_GetConfig+0x32>
 8009966:	e015      	b.n	8009994 <USBD_GetConfig+0x58>
 8009968:	2b03      	cmp	r3, #3
 800996a:	d00b      	beq.n	8009984 <USBD_GetConfig+0x48>
 800996c:	e012      	b.n	8009994 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	3308      	adds	r3, #8
 8009978:	2201      	movs	r2, #1
 800997a:	4619      	mov	r1, r3
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 f920 	bl	8009bc2 <USBD_CtlSendData>
        break;
 8009982:	e00c      	b.n	800999e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	3304      	adds	r3, #4
 8009988:	2201      	movs	r2, #1
 800998a:	4619      	mov	r1, r3
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f918 	bl	8009bc2 <USBD_CtlSendData>
        break;
 8009992:	e004      	b.n	800999e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009994:	6839      	ldr	r1, [r7, #0]
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 f8a9 	bl	8009aee <USBD_CtlError>
        break;
 800999c:	bf00      	nop
}
 800999e:	bf00      	nop
 80099a0:	3708      	adds	r7, #8
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b082      	sub	sp, #8
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
 80099ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099b6:	3b01      	subs	r3, #1
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d81e      	bhi.n	80099fa <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	88db      	ldrh	r3, [r3, #6]
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d004      	beq.n	80099ce <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80099c4:	6839      	ldr	r1, [r7, #0]
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 f891 	bl	8009aee <USBD_CtlError>
        break;
 80099cc:	e01a      	b.n	8009a04 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2201      	movs	r2, #1
 80099d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d005      	beq.n	80099ea <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	f043 0202 	orr.w	r2, r3, #2
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	330c      	adds	r3, #12
 80099ee:	2202      	movs	r2, #2
 80099f0:	4619      	mov	r1, r3
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 f8e5 	bl	8009bc2 <USBD_CtlSendData>
      break;
 80099f8:	e004      	b.n	8009a04 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80099fa:	6839      	ldr	r1, [r7, #0]
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 f876 	bl	8009aee <USBD_CtlError>
      break;
 8009a02:	bf00      	nop
  }
}
 8009a04:	bf00      	nop
 8009a06:	3708      	adds	r7, #8
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	885b      	ldrh	r3, [r3, #2]
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d106      	bne.n	8009a2c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2201      	movs	r2, #1
 8009a22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 f90b 	bl	8009c42 <USBD_CtlSendStatus>
  }
}
 8009a2c:	bf00      	nop
 8009a2e:	3708      	adds	r7, #8
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a44:	3b01      	subs	r3, #1
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	d80b      	bhi.n	8009a62 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	885b      	ldrh	r3, [r3, #2]
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d10c      	bne.n	8009a6c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f8f1 	bl	8009c42 <USBD_CtlSendStatus>
      }
      break;
 8009a60:	e004      	b.n	8009a6c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009a62:	6839      	ldr	r1, [r7, #0]
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 f842 	bl	8009aee <USBD_CtlError>
      break;
 8009a6a:	e000      	b.n	8009a6e <USBD_ClrFeature+0x3a>
      break;
 8009a6c:	bf00      	nop
  }
}
 8009a6e:	bf00      	nop
 8009a70:	3708      	adds	r7, #8
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009a76:	b480      	push	{r7}
 8009a78:	b083      	sub	sp, #12
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
 8009a7e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	781a      	ldrb	r2, [r3, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	785a      	ldrb	r2, [r3, #1]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	3302      	adds	r3, #2
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	b29a      	uxth	r2, r3
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	3303      	adds	r3, #3
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	021b      	lsls	r3, r3, #8
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	4413      	add	r3, r2
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	3304      	adds	r3, #4
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	3305      	adds	r3, #5
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	021b      	lsls	r3, r3, #8
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	4413      	add	r3, r2
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	3306      	adds	r3, #6
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	b29a      	uxth	r2, r3
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	3307      	adds	r3, #7
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	021b      	lsls	r3, r3, #8
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	4413      	add	r3, r2
 8009ade:	b29a      	uxth	r2, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	80da      	strh	r2, [r3, #6]

}
 8009ae4:	bf00      	nop
 8009ae6:	370c      	adds	r7, #12
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bc80      	pop	{r7}
 8009aec:	4770      	bx	lr

08009aee <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b082      	sub	sp, #8
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
 8009af6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009af8:	2180      	movs	r1, #128	; 0x80
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f004 fbf9 	bl	800e2f2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009b00:	2100      	movs	r1, #0
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f004 fbf5 	bl	800e2f2 <USBD_LL_StallEP>
}
 8009b08:	bf00      	nop
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d032      	beq.n	8009b8c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009b26:	68f8      	ldr	r0, [r7, #12]
 8009b28:	f000 f834 	bl	8009b94 <USBD_GetLen>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	3301      	adds	r3, #1
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	005b      	lsls	r3, r3, #1
 8009b34:	b29a      	uxth	r2, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009b3a:	7dfb      	ldrb	r3, [r7, #23]
 8009b3c:	1c5a      	adds	r2, r3, #1
 8009b3e:	75fa      	strb	r2, [r7, #23]
 8009b40:	461a      	mov	r2, r3
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	4413      	add	r3, r2
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	7812      	ldrb	r2, [r2, #0]
 8009b4a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009b4c:	7dfb      	ldrb	r3, [r7, #23]
 8009b4e:	1c5a      	adds	r2, r3, #1
 8009b50:	75fa      	strb	r2, [r7, #23]
 8009b52:	461a      	mov	r2, r3
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	4413      	add	r3, r2
 8009b58:	2203      	movs	r2, #3
 8009b5a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009b5c:	e012      	b.n	8009b84 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	1c5a      	adds	r2, r3, #1
 8009b62:	60fa      	str	r2, [r7, #12]
 8009b64:	7dfa      	ldrb	r2, [r7, #23]
 8009b66:	1c51      	adds	r1, r2, #1
 8009b68:	75f9      	strb	r1, [r7, #23]
 8009b6a:	4611      	mov	r1, r2
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	440a      	add	r2, r1
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009b74:	7dfb      	ldrb	r3, [r7, #23]
 8009b76:	1c5a      	adds	r2, r3, #1
 8009b78:	75fa      	strb	r2, [r7, #23]
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	4413      	add	r3, r2
 8009b80:	2200      	movs	r2, #0
 8009b82:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d1e8      	bne.n	8009b5e <USBD_GetString+0x4e>
    }
  }
}
 8009b8c:	bf00      	nop
 8009b8e:	3718      	adds	r7, #24
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009ba0:	e005      	b.n	8009bae <USBD_GetLen+0x1a>
  {
    len++;
 8009ba2:	7bfb      	ldrb	r3, [r7, #15]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	3301      	adds	r3, #1
 8009bac:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d1f5      	bne.n	8009ba2 <USBD_GetLen+0xe>
  }

  return len;
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3714      	adds	r7, #20
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bc80      	pop	{r7}
 8009bc0:	4770      	bx	lr

08009bc2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b084      	sub	sp, #16
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	60f8      	str	r0, [r7, #12]
 8009bca:	60b9      	str	r1, [r7, #8]
 8009bcc:	4613      	mov	r3, r2
 8009bce:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2202      	movs	r2, #2
 8009bd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009bd8:	88fa      	ldrh	r2, [r7, #6]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009bde:	88fa      	ldrh	r2, [r7, #6]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009be4:	88fb      	ldrh	r3, [r7, #6]
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	2100      	movs	r1, #0
 8009bea:	68f8      	ldr	r0, [r7, #12]
 8009bec:	f004 fc0a 	bl	800e404 <USBD_LL_Transmit>

  return USBD_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b084      	sub	sp, #16
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	60f8      	str	r0, [r7, #12]
 8009c02:	60b9      	str	r1, [r7, #8]
 8009c04:	4613      	mov	r3, r2
 8009c06:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c08:	88fb      	ldrh	r3, [r7, #6]
 8009c0a:	68ba      	ldr	r2, [r7, #8]
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	f004 fbf8 	bl	800e404 <USBD_LL_Transmit>

  return USBD_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b084      	sub	sp, #16
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	60f8      	str	r0, [r7, #12]
 8009c26:	60b9      	str	r1, [r7, #8]
 8009c28:	4613      	mov	r3, r2
 8009c2a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c2c:	88fb      	ldrh	r3, [r7, #6]
 8009c2e:	68ba      	ldr	r2, [r7, #8]
 8009c30:	2100      	movs	r1, #0
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	f004 fc09 	bl	800e44a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b082      	sub	sp, #8
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2204      	movs	r2, #4
 8009c4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009c52:	2300      	movs	r3, #0
 8009c54:	2200      	movs	r2, #0
 8009c56:	2100      	movs	r1, #0
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f004 fbd3 	bl	800e404 <USBD_LL_Transmit>

  return USBD_OK;
 8009c5e:	2300      	movs	r3, #0
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2205      	movs	r2, #5
 8009c74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c78:	2300      	movs	r3, #0
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	2100      	movs	r1, #0
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f004 fbe3 	bl	800e44a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3708      	adds	r7, #8
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
	...

08009c90 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	4603      	mov	r3, r0
 8009c98:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009c9a:	79fb      	ldrb	r3, [r7, #7]
 8009c9c:	4a08      	ldr	r2, [pc, #32]	; (8009cc0 <disk_status+0x30>)
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	4413      	add	r3, r2
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	79fa      	ldrb	r2, [r7, #7]
 8009ca8:	4905      	ldr	r1, [pc, #20]	; (8009cc0 <disk_status+0x30>)
 8009caa:	440a      	add	r2, r1
 8009cac:	7a12      	ldrb	r2, [r2, #8]
 8009cae:	4610      	mov	r0, r2
 8009cb0:	4798      	blx	r3
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3710      	adds	r7, #16
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	20002450 	.word	0x20002450

08009cc4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	4603      	mov	r3, r0
 8009ccc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8009cd2:	79fb      	ldrb	r3, [r7, #7]
 8009cd4:	4a0d      	ldr	r2, [pc, #52]	; (8009d0c <disk_initialize+0x48>)
 8009cd6:	5cd3      	ldrb	r3, [r2, r3]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d111      	bne.n	8009d00 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8009cdc:	79fb      	ldrb	r3, [r7, #7]
 8009cde:	4a0b      	ldr	r2, [pc, #44]	; (8009d0c <disk_initialize+0x48>)
 8009ce0:	2101      	movs	r1, #1
 8009ce2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009ce4:	79fb      	ldrb	r3, [r7, #7]
 8009ce6:	4a09      	ldr	r2, [pc, #36]	; (8009d0c <disk_initialize+0x48>)
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	4413      	add	r3, r2
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	79fa      	ldrb	r2, [r7, #7]
 8009cf2:	4906      	ldr	r1, [pc, #24]	; (8009d0c <disk_initialize+0x48>)
 8009cf4:	440a      	add	r2, r1
 8009cf6:	7a12      	ldrb	r2, [r2, #8]
 8009cf8:	4610      	mov	r0, r2
 8009cfa:	4798      	blx	r3
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	20002450 	.word	0x20002450

08009d10 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009d10:	b590      	push	{r4, r7, lr}
 8009d12:	b087      	sub	sp, #28
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60b9      	str	r1, [r7, #8]
 8009d18:	607a      	str	r2, [r7, #4]
 8009d1a:	603b      	str	r3, [r7, #0]
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009d20:	7bfb      	ldrb	r3, [r7, #15]
 8009d22:	4a0a      	ldr	r2, [pc, #40]	; (8009d4c <disk_read+0x3c>)
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	4413      	add	r3, r2
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	689c      	ldr	r4, [r3, #8]
 8009d2c:	7bfb      	ldrb	r3, [r7, #15]
 8009d2e:	4a07      	ldr	r2, [pc, #28]	; (8009d4c <disk_read+0x3c>)
 8009d30:	4413      	add	r3, r2
 8009d32:	7a18      	ldrb	r0, [r3, #8]
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	68b9      	ldr	r1, [r7, #8]
 8009d3a:	47a0      	blx	r4
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	371c      	adds	r7, #28
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd90      	pop	{r4, r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	20002450 	.word	0x20002450

08009d50 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009d50:	b590      	push	{r4, r7, lr}
 8009d52:	b087      	sub	sp, #28
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60b9      	str	r1, [r7, #8]
 8009d58:	607a      	str	r2, [r7, #4]
 8009d5a:	603b      	str	r3, [r7, #0]
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
 8009d62:	4a0a      	ldr	r2, [pc, #40]	; (8009d8c <disk_write+0x3c>)
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4413      	add	r3, r2
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	68dc      	ldr	r4, [r3, #12]
 8009d6c:	7bfb      	ldrb	r3, [r7, #15]
 8009d6e:	4a07      	ldr	r2, [pc, #28]	; (8009d8c <disk_write+0x3c>)
 8009d70:	4413      	add	r3, r2
 8009d72:	7a18      	ldrb	r0, [r3, #8]
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	68b9      	ldr	r1, [r7, #8]
 8009d7a:	47a0      	blx	r4
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	371c      	adds	r7, #28
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd90      	pop	{r4, r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	20002450 	.word	0x20002450

08009d90 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	4603      	mov	r3, r0
 8009d98:	603a      	str	r2, [r7, #0]
 8009d9a:	71fb      	strb	r3, [r7, #7]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009da0:	79fb      	ldrb	r3, [r7, #7]
 8009da2:	4a09      	ldr	r2, [pc, #36]	; (8009dc8 <disk_ioctl+0x38>)
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	4413      	add	r3, r2
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	691b      	ldr	r3, [r3, #16]
 8009dac:	79fa      	ldrb	r2, [r7, #7]
 8009dae:	4906      	ldr	r1, [pc, #24]	; (8009dc8 <disk_ioctl+0x38>)
 8009db0:	440a      	add	r2, r1
 8009db2:	7a10      	ldrb	r0, [r2, #8]
 8009db4:	79b9      	ldrb	r1, [r7, #6]
 8009db6:	683a      	ldr	r2, [r7, #0]
 8009db8:	4798      	blx	r3
 8009dba:	4603      	mov	r3, r0
 8009dbc:	73fb      	strb	r3, [r7, #15]
  return res;
 8009dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	20002450 	.word	0x20002450

08009dcc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009dcc:	b480      	push	{r7}
 8009dce:	b087      	sub	sp, #28
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8009de0:	e007      	b.n	8009df2 <mem_cpy+0x26>
		*d++ = *s++;
 8009de2:	693a      	ldr	r2, [r7, #16]
 8009de4:	1c53      	adds	r3, r2, #1
 8009de6:	613b      	str	r3, [r7, #16]
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	1c59      	adds	r1, r3, #1
 8009dec:	6179      	str	r1, [r7, #20]
 8009dee:	7812      	ldrb	r2, [r2, #0]
 8009df0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	1e5a      	subs	r2, r3, #1
 8009df6:	607a      	str	r2, [r7, #4]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1f2      	bne.n	8009de2 <mem_cpy+0x16>
}
 8009dfc:	bf00      	nop
 8009dfe:	bf00      	nop
 8009e00:	371c      	adds	r7, #28
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bc80      	pop	{r7}
 8009e06:	4770      	bx	lr

08009e08 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009e08:	b480      	push	{r7}
 8009e0a:	b087      	sub	sp, #28
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8009e18:	e005      	b.n	8009e26 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	1c5a      	adds	r2, r3, #1
 8009e1e:	617a      	str	r2, [r7, #20]
 8009e20:	68ba      	ldr	r2, [r7, #8]
 8009e22:	b2d2      	uxtb	r2, r2
 8009e24:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	1e5a      	subs	r2, r3, #1
 8009e2a:	607a      	str	r2, [r7, #4]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d1f4      	bne.n	8009e1a <mem_set+0x12>
}
 8009e30:	bf00      	nop
 8009e32:	bf00      	nop
 8009e34:	371c      	adds	r7, #28
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bc80      	pop	{r7}
 8009e3a:	4770      	bx	lr

08009e3c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8009e3c:	b480      	push	{r7}
 8009e3e:	b089      	sub	sp, #36	; 0x24
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	61fb      	str	r3, [r7, #28]
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009e50:	2300      	movs	r3, #0
 8009e52:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8009e54:	bf00      	nop
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	1e5a      	subs	r2, r3, #1
 8009e5a:	607a      	str	r2, [r7, #4]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00d      	beq.n	8009e7c <mem_cmp+0x40>
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	1c5a      	adds	r2, r3, #1
 8009e64:	61fa      	str	r2, [r7, #28]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	4619      	mov	r1, r3
 8009e6a:	69bb      	ldr	r3, [r7, #24]
 8009e6c:	1c5a      	adds	r2, r3, #1
 8009e6e:	61ba      	str	r2, [r7, #24]
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	1acb      	subs	r3, r1, r3
 8009e74:	617b      	str	r3, [r7, #20]
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d0ec      	beq.n	8009e56 <mem_cmp+0x1a>
	return r;
 8009e7c:	697b      	ldr	r3, [r7, #20]
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3724      	adds	r7, #36	; 0x24
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bc80      	pop	{r7}
 8009e86:	4770      	bx	lr

08009e88 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009e92:	e002      	b.n	8009e9a <chk_chr+0x12>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	3301      	adds	r3, #1
 8009e98:	607b      	str	r3, [r7, #4]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d005      	beq.n	8009eae <chk_chr+0x26>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d1f2      	bne.n	8009e94 <chk_chr+0xc>
	return *str;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	781b      	ldrb	r3, [r3, #0]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	370c      	adds	r7, #12
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bc80      	pop	{r7}
 8009eba:	4770      	bx	lr

08009ebc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	60bb      	str	r3, [r7, #8]
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	60fb      	str	r3, [r7, #12]
 8009ece:	e03b      	b.n	8009f48 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8009ed0:	4931      	ldr	r1, [pc, #196]	; (8009f98 <chk_lock+0xdc>)
 8009ed2:	68fa      	ldr	r2, [r7, #12]
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	005b      	lsls	r3, r3, #1
 8009ed8:	4413      	add	r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	440b      	add	r3, r1
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d02c      	beq.n	8009f3e <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009ee4:	492c      	ldr	r1, [pc, #176]	; (8009f98 <chk_lock+0xdc>)
 8009ee6:	68fa      	ldr	r2, [r7, #12]
 8009ee8:	4613      	mov	r3, r2
 8009eea:	005b      	lsls	r3, r3, #1
 8009eec:	4413      	add	r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	440b      	add	r3, r1
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d120      	bne.n	8009f42 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8009f00:	4925      	ldr	r1, [pc, #148]	; (8009f98 <chk_lock+0xdc>)
 8009f02:	68fa      	ldr	r2, [r7, #12]
 8009f04:	4613      	mov	r3, r2
 8009f06:	005b      	lsls	r3, r3, #1
 8009f08:	4413      	add	r3, r2
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	440b      	add	r3, r1
 8009f0e:	3304      	adds	r3, #4
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f18:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d111      	bne.n	8009f42 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8009f1e:	491e      	ldr	r1, [pc, #120]	; (8009f98 <chk_lock+0xdc>)
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	4613      	mov	r3, r2
 8009f24:	005b      	lsls	r3, r3, #1
 8009f26:	4413      	add	r3, r2
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	440b      	add	r3, r1
 8009f2c:	3308      	adds	r3, #8
 8009f2e:	881a      	ldrh	r2, [r3, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f36:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d102      	bne.n	8009f42 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8009f3c:	e007      	b.n	8009f4e <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	3301      	adds	r3, #1
 8009f46:	60fb      	str	r3, [r7, #12]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d9c0      	bls.n	8009ed0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2b02      	cmp	r3, #2
 8009f52:	d109      	bne.n	8009f68 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d102      	bne.n	8009f60 <chk_lock+0xa4>
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	d101      	bne.n	8009f64 <chk_lock+0xa8>
 8009f60:	2300      	movs	r3, #0
 8009f62:	e013      	b.n	8009f8c <chk_lock+0xd0>
 8009f64:	2312      	movs	r3, #18
 8009f66:	e011      	b.n	8009f8c <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d10b      	bne.n	8009f86 <chk_lock+0xca>
 8009f6e:	490a      	ldr	r1, [pc, #40]	; (8009f98 <chk_lock+0xdc>)
 8009f70:	68fa      	ldr	r2, [r7, #12]
 8009f72:	4613      	mov	r3, r2
 8009f74:	005b      	lsls	r3, r3, #1
 8009f76:	4413      	add	r3, r2
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	440b      	add	r3, r1
 8009f7c:	330a      	adds	r3, #10
 8009f7e:	881b      	ldrh	r3, [r3, #0]
 8009f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f84:	d101      	bne.n	8009f8a <chk_lock+0xce>
 8009f86:	2310      	movs	r3, #16
 8009f88:	e000      	b.n	8009f8c <chk_lock+0xd0>
 8009f8a:	2300      	movs	r3, #0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3714      	adds	r7, #20
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bc80      	pop	{r7}
 8009f94:	4770      	bx	lr
 8009f96:	bf00      	nop
 8009f98:	20002238 	.word	0x20002238

08009f9c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	607b      	str	r3, [r7, #4]
 8009fa6:	e002      	b.n	8009fae <enq_lock+0x12>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	3301      	adds	r3, #1
 8009fac:	607b      	str	r3, [r7, #4]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d809      	bhi.n	8009fc8 <enq_lock+0x2c>
 8009fb4:	490a      	ldr	r1, [pc, #40]	; (8009fe0 <enq_lock+0x44>)
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	4613      	mov	r3, r2
 8009fba:	005b      	lsls	r3, r3, #1
 8009fbc:	4413      	add	r3, r2
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	440b      	add	r3, r1
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d1ef      	bne.n	8009fa8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2b02      	cmp	r3, #2
 8009fcc:	bf14      	ite	ne
 8009fce:	2301      	movne	r3, #1
 8009fd0:	2300      	moveq	r3, #0
 8009fd2:	b2db      	uxtb	r3, r3
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bc80      	pop	{r7}
 8009fdc:	4770      	bx	lr
 8009fde:	bf00      	nop
 8009fe0:	20002238 	.word	0x20002238

08009fe4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009fee:	2300      	movs	r3, #0
 8009ff0:	60fb      	str	r3, [r7, #12]
 8009ff2:	e02e      	b.n	800a052 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8009ff4:	4958      	ldr	r1, [pc, #352]	; (800a158 <inc_lock+0x174>)
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	4613      	mov	r3, r2
 8009ffa:	005b      	lsls	r3, r3, #1
 8009ffc:	4413      	add	r3, r2
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	440b      	add	r3, r1
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d11d      	bne.n	800a04c <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 800a010:	4951      	ldr	r1, [pc, #324]	; (800a158 <inc_lock+0x174>)
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	4613      	mov	r3, r2
 800a016:	005b      	lsls	r3, r3, #1
 800a018:	4413      	add	r3, r2
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	440b      	add	r3, r1
 800a01e:	3304      	adds	r3, #4
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a028:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d10e      	bne.n	800a04c <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 800a02e:	494a      	ldr	r1, [pc, #296]	; (800a158 <inc_lock+0x174>)
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	4613      	mov	r3, r2
 800a034:	005b      	lsls	r3, r3, #1
 800a036:	4413      	add	r3, r2
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	440b      	add	r3, r1
 800a03c:	3308      	adds	r3, #8
 800a03e:	881a      	ldrh	r2, [r3, #0]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a046:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 800a048:	429a      	cmp	r2, r3
 800a04a:	d006      	beq.n	800a05a <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	3301      	adds	r3, #1
 800a050:	60fb      	str	r3, [r7, #12]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2b01      	cmp	r3, #1
 800a056:	d9cd      	bls.n	8009ff4 <inc_lock+0x10>
 800a058:	e000      	b.n	800a05c <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 800a05a:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2b02      	cmp	r3, #2
 800a060:	d148      	bne.n	800a0f4 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a062:	2300      	movs	r3, #0
 800a064:	60fb      	str	r3, [r7, #12]
 800a066:	e002      	b.n	800a06e <inc_lock+0x8a>
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	3301      	adds	r3, #1
 800a06c:	60fb      	str	r3, [r7, #12]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2b01      	cmp	r3, #1
 800a072:	d809      	bhi.n	800a088 <inc_lock+0xa4>
 800a074:	4938      	ldr	r1, [pc, #224]	; (800a158 <inc_lock+0x174>)
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	4613      	mov	r3, r2
 800a07a:	005b      	lsls	r3, r3, #1
 800a07c:	4413      	add	r3, r2
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	440b      	add	r3, r1
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d1ef      	bne.n	800a068 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2b02      	cmp	r3, #2
 800a08c:	d101      	bne.n	800a092 <inc_lock+0xae>
 800a08e:	2300      	movs	r3, #0
 800a090:	e05d      	b.n	800a14e <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a098:	6819      	ldr	r1, [r3, #0]
 800a09a:	482f      	ldr	r0, [pc, #188]	; (800a158 <inc_lock+0x174>)
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	4613      	mov	r3, r2
 800a0a0:	005b      	lsls	r3, r3, #1
 800a0a2:	4413      	add	r3, r2
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	4403      	add	r3, r0
 800a0a8:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0b0:	6899      	ldr	r1, [r3, #8]
 800a0b2:	4829      	ldr	r0, [pc, #164]	; (800a158 <inc_lock+0x174>)
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	005b      	lsls	r3, r3, #1
 800a0ba:	4413      	add	r3, r2
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	4403      	add	r3, r0
 800a0c0:	3304      	adds	r3, #4
 800a0c2:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0ca:	88d8      	ldrh	r0, [r3, #6]
 800a0cc:	4922      	ldr	r1, [pc, #136]	; (800a158 <inc_lock+0x174>)
 800a0ce:	68fa      	ldr	r2, [r7, #12]
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	005b      	lsls	r3, r3, #1
 800a0d4:	4413      	add	r3, r2
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	440b      	add	r3, r1
 800a0da:	3308      	adds	r3, #8
 800a0dc:	4602      	mov	r2, r0
 800a0de:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800a0e0:	491d      	ldr	r1, [pc, #116]	; (800a158 <inc_lock+0x174>)
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	4613      	mov	r3, r2
 800a0e6:	005b      	lsls	r3, r3, #1
 800a0e8:	4413      	add	r3, r2
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	440b      	add	r3, r1
 800a0ee:	330a      	adds	r3, #10
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d00c      	beq.n	800a114 <inc_lock+0x130>
 800a0fa:	4917      	ldr	r1, [pc, #92]	; (800a158 <inc_lock+0x174>)
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	4613      	mov	r3, r2
 800a100:	005b      	lsls	r3, r3, #1
 800a102:	4413      	add	r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	440b      	add	r3, r1
 800a108:	330a      	adds	r3, #10
 800a10a:	881b      	ldrh	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d001      	beq.n	800a114 <inc_lock+0x130>
 800a110:	2300      	movs	r3, #0
 800a112:	e01c      	b.n	800a14e <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d10b      	bne.n	800a132 <inc_lock+0x14e>
 800a11a:	490f      	ldr	r1, [pc, #60]	; (800a158 <inc_lock+0x174>)
 800a11c:	68fa      	ldr	r2, [r7, #12]
 800a11e:	4613      	mov	r3, r2
 800a120:	005b      	lsls	r3, r3, #1
 800a122:	4413      	add	r3, r2
 800a124:	009b      	lsls	r3, r3, #2
 800a126:	440b      	add	r3, r1
 800a128:	330a      	adds	r3, #10
 800a12a:	881b      	ldrh	r3, [r3, #0]
 800a12c:	3301      	adds	r3, #1
 800a12e:	b299      	uxth	r1, r3
 800a130:	e001      	b.n	800a136 <inc_lock+0x152>
 800a132:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a136:	4808      	ldr	r0, [pc, #32]	; (800a158 <inc_lock+0x174>)
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	4613      	mov	r3, r2
 800a13c:	005b      	lsls	r3, r3, #1
 800a13e:	4413      	add	r3, r2
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	4403      	add	r3, r0
 800a144:	330a      	adds	r3, #10
 800a146:	460a      	mov	r2, r1
 800a148:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	3301      	adds	r3, #1
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3714      	adds	r7, #20
 800a152:	46bd      	mov	sp, r7
 800a154:	bc80      	pop	{r7}
 800a156:	4770      	bx	lr
 800a158:	20002238 	.word	0x20002238

0800a15c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	3b01      	subs	r3, #1
 800a168:	607b      	str	r3, [r7, #4]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d82e      	bhi.n	800a1ce <dec_lock+0x72>
		n = Files[i].ctr;
 800a170:	491b      	ldr	r1, [pc, #108]	; (800a1e0 <dec_lock+0x84>)
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	4613      	mov	r3, r2
 800a176:	005b      	lsls	r3, r3, #1
 800a178:	4413      	add	r3, r2
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	440b      	add	r3, r1
 800a17e:	330a      	adds	r3, #10
 800a180:	881b      	ldrh	r3, [r3, #0]
 800a182:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a184:	89fb      	ldrh	r3, [r7, #14]
 800a186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a18a:	d101      	bne.n	800a190 <dec_lock+0x34>
 800a18c:	2300      	movs	r3, #0
 800a18e:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800a190:	89fb      	ldrh	r3, [r7, #14]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d002      	beq.n	800a19c <dec_lock+0x40>
 800a196:	89fb      	ldrh	r3, [r7, #14]
 800a198:	3b01      	subs	r3, #1
 800a19a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a19c:	4910      	ldr	r1, [pc, #64]	; (800a1e0 <dec_lock+0x84>)
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	005b      	lsls	r3, r3, #1
 800a1a4:	4413      	add	r3, r2
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	440b      	add	r3, r1
 800a1aa:	330a      	adds	r3, #10
 800a1ac:	89fa      	ldrh	r2, [r7, #14]
 800a1ae:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a1b0:	89fb      	ldrh	r3, [r7, #14]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d108      	bne.n	800a1c8 <dec_lock+0x6c>
 800a1b6:	490a      	ldr	r1, [pc, #40]	; (800a1e0 <dec_lock+0x84>)
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	005b      	lsls	r3, r3, #1
 800a1be:	4413      	add	r3, r2
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	440b      	add	r3, r1
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	737b      	strb	r3, [r7, #13]
 800a1cc:	e001      	b.n	800a1d2 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a1ce:	2302      	movs	r3, #2
 800a1d0:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a1d2:	7b7b      	ldrb	r3, [r7, #13]
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3714      	adds	r7, #20
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bc80      	pop	{r7}
 800a1dc:	4770      	bx	lr
 800a1de:	bf00      	nop
 800a1e0:	20002238 	.word	0x20002238

0800a1e4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b085      	sub	sp, #20
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	60fb      	str	r3, [r7, #12]
 800a1f0:	e016      	b.n	800a220 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a1f2:	4910      	ldr	r1, [pc, #64]	; (800a234 <clear_lock+0x50>)
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	005b      	lsls	r3, r3, #1
 800a1fa:	4413      	add	r3, r2
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	440b      	add	r3, r1
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	429a      	cmp	r2, r3
 800a206:	d108      	bne.n	800a21a <clear_lock+0x36>
 800a208:	490a      	ldr	r1, [pc, #40]	; (800a234 <clear_lock+0x50>)
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	4613      	mov	r3, r2
 800a20e:	005b      	lsls	r3, r3, #1
 800a210:	4413      	add	r3, r2
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	440b      	add	r3, r1
 800a216:	2200      	movs	r2, #0
 800a218:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	3301      	adds	r3, #1
 800a21e:	60fb      	str	r3, [r7, #12]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2b01      	cmp	r3, #1
 800a224:	d9e5      	bls.n	800a1f2 <clear_lock+0xe>
	}
}
 800a226:	bf00      	nop
 800a228:	bf00      	nop
 800a22a:	3714      	adds	r7, #20
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bc80      	pop	{r7}
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	20002238 	.word	0x20002238

0800a238 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b086      	sub	sp, #24
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a240:	2300      	movs	r3, #0
 800a242:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a24a:	791b      	ldrb	r3, [r3, #4]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d040      	beq.n	800a2d2 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a258:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a260:	7858      	ldrb	r0, [r3, #1]
 800a262:	6879      	ldr	r1, [r7, #4]
 800a264:	2301      	movs	r3, #1
 800a266:	697a      	ldr	r2, [r7, #20]
 800a268:	f7ff fd72 	bl	8009d50 <disk_write>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d002      	beq.n	800a278 <sync_window+0x40>
			res = FR_DISK_ERR;
 800a272:	2301      	movs	r3, #1
 800a274:	73fb      	strb	r3, [r7, #15]
 800a276:	e02c      	b.n	800a2d2 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a27e:	2200      	movs	r2, #0
 800a280:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a288:	6a1b      	ldr	r3, [r3, #32]
 800a28a:	697a      	ldr	r2, [r7, #20]
 800a28c:	1ad2      	subs	r2, r2, r3
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a294:	699b      	ldr	r3, [r3, #24]
 800a296:	429a      	cmp	r2, r3
 800a298:	d21b      	bcs.n	800a2d2 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2a0:	78db      	ldrb	r3, [r3, #3]
 800a2a2:	613b      	str	r3, [r7, #16]
 800a2a4:	e012      	b.n	800a2cc <sync_window+0x94>
					wsect += fs->fsize;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	697a      	ldr	r2, [r7, #20]
 800a2b0:	4413      	add	r3, r2
 800a2b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ba:	7858      	ldrb	r0, [r3, #1]
 800a2bc:	6879      	ldr	r1, [r7, #4]
 800a2be:	2301      	movs	r3, #1
 800a2c0:	697a      	ldr	r2, [r7, #20]
 800a2c2:	f7ff fd45 	bl	8009d50 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	613b      	str	r3, [r7, #16]
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d8e9      	bhi.n	800a2a6 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 800a2d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3718      	adds	r7, #24
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f2:	683a      	ldr	r2, [r7, #0]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d01e      	beq.n	800a336 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f7ff ff9d 	bl	800a238 <sync_window>
 800a2fe:	4603      	mov	r3, r0
 800a300:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a302:	7bfb      	ldrb	r3, [r7, #15]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d116      	bne.n	800a336 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a30e:	7858      	ldrb	r0, [r3, #1]
 800a310:	6879      	ldr	r1, [r7, #4]
 800a312:	2301      	movs	r3, #1
 800a314:	683a      	ldr	r2, [r7, #0]
 800a316:	f7ff fcfb 	bl	8009d10 <disk_read>
 800a31a:	4603      	mov	r3, r0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d004      	beq.n	800a32a <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a324:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a326:	2301      	movs	r3, #1
 800a328:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a330:	461a      	mov	r2, r3
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 800a336:	7bfb      	ldrb	r3, [r7, #15]
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f7ff ff75 	bl	800a238 <sync_window>
 800a34e:	4603      	mov	r3, r0
 800a350:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a352:	7bfb      	ldrb	r3, [r7, #15]
 800a354:	2b00      	cmp	r3, #0
 800a356:	f040 80ad 	bne.w	800a4b4 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	2b03      	cmp	r3, #3
 800a364:	f040 8098 	bne.w	800a498 <sync_fs+0x158>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a36e:	795b      	ldrb	r3, [r3, #5]
 800a370:	2b01      	cmp	r3, #1
 800a372:	f040 8091 	bne.w	800a498 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a37e:	895b      	ldrh	r3, [r3, #10]
 800a380:	461a      	mov	r2, r3
 800a382:	2100      	movs	r1, #0
 800a384:	f7ff fd40 	bl	8009e08 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2255      	movs	r2, #85	; 0x55
 800a38c:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	22aa      	movs	r2, #170	; 0xaa
 800a394:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2252      	movs	r2, #82	; 0x52
 800a39c:	701a      	strb	r2, [r3, #0]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2252      	movs	r2, #82	; 0x52
 800a3a2:	705a      	strb	r2, [r3, #1]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2261      	movs	r2, #97	; 0x61
 800a3a8:	709a      	strb	r2, [r3, #2]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2241      	movs	r2, #65	; 0x41
 800a3ae:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2272      	movs	r2, #114	; 0x72
 800a3b4:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2272      	movs	r2, #114	; 0x72
 800a3bc:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2241      	movs	r2, #65	; 0x41
 800a3c4:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2261      	movs	r2, #97	; 0x61
 800a3cc:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	b2da      	uxtb	r2, r3
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	0a1b      	lsrs	r3, r3, #8
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	b2da      	uxtb	r2, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3fc:	691b      	ldr	r3, [r3, #16]
 800a3fe:	0c1b      	lsrs	r3, r3, #16
 800a400:	b2da      	uxtb	r2, r3
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a40e:	691b      	ldr	r3, [r3, #16]
 800a410:	0e1b      	lsrs	r3, r3, #24
 800a412:	b2da      	uxtb	r2, r3
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	b2da      	uxtb	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	b29b      	uxth	r3, r3
 800a434:	0a1b      	lsrs	r3, r3, #8
 800a436:	b29b      	uxth	r3, r3
 800a438:	b2da      	uxtb	r2, r3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	0c1b      	lsrs	r3, r3, #16
 800a44a:	b2da      	uxtb	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	0e1b      	lsrs	r3, r3, #24
 800a45c:	b2da      	uxtb	r2, r3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a46a:	69db      	ldr	r3, [r3, #28]
 800a46c:	3301      	adds	r3, #1
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a474:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a47c:	7858      	ldrb	r0, [r3, #1]
 800a47e:	6879      	ldr	r1, [r7, #4]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a488:	2301      	movs	r3, #1
 800a48a:	f7ff fc61 	bl	8009d50 <disk_write>
			fs->fsi_flag = 0;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a494:	2200      	movs	r2, #0
 800a496:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a49e:	785b      	ldrb	r3, [r3, #1]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	2100      	movs	r1, #0
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7ff fc73 	bl	8009d90 <disk_ioctl>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d001      	beq.n	800a4b4 <sync_fs+0x174>
			res = FR_DISK_ERR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3710      	adds	r7, #16
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a4be:	b480      	push	{r7}
 800a4c0:	b083      	sub	sp, #12
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
 800a4c6:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	3b02      	subs	r3, #2
 800a4cc:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4d4:	695b      	ldr	r3, [r3, #20]
 800a4d6:	3b02      	subs	r3, #2
 800a4d8:	683a      	ldr	r2, [r7, #0]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d301      	bcc.n	800a4e2 <clust2sect+0x24>
 800a4de:	2300      	movs	r3, #0
 800a4e0:	e00c      	b.n	800a4fc <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4e8:	789b      	ldrb	r3, [r3, #2]
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	fb03 f202 	mul.w	r2, r3, r2
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4fa:	4413      	add	r3, r2
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	bc80      	pop	{r7}
 800a504:	4770      	bx	lr

0800a506 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800a506:	b580      	push	{r7, lr}
 800a508:	b086      	sub	sp, #24
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
 800a50e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	2b01      	cmp	r3, #1
 800a514:	d906      	bls.n	800a524 <get_fat+0x1e>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a51c:	695b      	ldr	r3, [r3, #20]
 800a51e:	683a      	ldr	r2, [r7, #0]
 800a520:	429a      	cmp	r2, r3
 800a522:	d302      	bcc.n	800a52a <get_fat+0x24>
		val = 1;	/* Internal error */
 800a524:	2301      	movs	r3, #1
 800a526:	617b      	str	r3, [r7, #20]
 800a528:	e0e4      	b.n	800a6f4 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a52a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a52e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	2b03      	cmp	r3, #3
 800a53a:	f000 8098 	beq.w	800a66e <get_fat+0x168>
 800a53e:	2b03      	cmp	r3, #3
 800a540:	f300 80ce 	bgt.w	800a6e0 <get_fat+0x1da>
 800a544:	2b01      	cmp	r3, #1
 800a546:	d002      	beq.n	800a54e <get_fat+0x48>
 800a548:	2b02      	cmp	r3, #2
 800a54a:	d05f      	beq.n	800a60c <get_fat+0x106>
 800a54c:	e0c8      	b.n	800a6e0 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	60fb      	str	r3, [r7, #12]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	085b      	lsrs	r3, r3, #1
 800a556:	68fa      	ldr	r2, [r7, #12]
 800a558:	4413      	add	r3, r2
 800a55a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a562:	6a1a      	ldr	r2, [r3, #32]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a56a:	895b      	ldrh	r3, [r3, #10]
 800a56c:	4619      	mov	r1, r3
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	fbb3 f3f1 	udiv	r3, r3, r1
 800a574:	4413      	add	r3, r2
 800a576:	4619      	mov	r1, r3
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f7ff feaf 	bl	800a2dc <move_window>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	f040 80b0 	bne.w	800a6e6 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	1c5a      	adds	r2, r3, #1
 800a58a:	60fa      	str	r2, [r7, #12]
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a592:	8952      	ldrh	r2, [r2, #10]
 800a594:	fbb3 f1f2 	udiv	r1, r3, r2
 800a598:	fb01 f202 	mul.w	r2, r1, r2
 800a59c:	1a9b      	subs	r3, r3, r2
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	5cd3      	ldrb	r3, [r2, r3]
 800a5a2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5aa:	6a1a      	ldr	r2, [r3, #32]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5b2:	895b      	ldrh	r3, [r3, #10]
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	fbb3 f3f1 	udiv	r3, r3, r1
 800a5bc:	4413      	add	r3, r2
 800a5be:	4619      	mov	r1, r3
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f7ff fe8b 	bl	800a2dc <move_window>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f040 808e 	bne.w	800a6ea <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5d4:	895b      	ldrh	r3, [r3, #10]
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5de:	fb01 f202 	mul.w	r2, r1, r2
 800a5e2:	1a9b      	subs	r3, r3, r2
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	5cd3      	ldrb	r3, [r2, r3]
 800a5e8:	021b      	lsls	r3, r3, #8
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	f003 0301 	and.w	r3, r3, #1
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d002      	beq.n	800a602 <get_fat+0xfc>
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	091b      	lsrs	r3, r3, #4
 800a600:	e002      	b.n	800a608 <get_fat+0x102>
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a608:	617b      	str	r3, [r7, #20]
			break;
 800a60a:	e073      	b.n	800a6f4 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a612:	6a1a      	ldr	r2, [r3, #32]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a61a:	895b      	ldrh	r3, [r3, #10]
 800a61c:	085b      	lsrs	r3, r3, #1
 800a61e:	b29b      	uxth	r3, r3
 800a620:	4619      	mov	r1, r3
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	fbb3 f3f1 	udiv	r3, r3, r1
 800a628:	4413      	add	r3, r2
 800a62a:	4619      	mov	r1, r3
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f7ff fe55 	bl	800a2dc <move_window>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d15a      	bne.n	800a6ee <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	005b      	lsls	r3, r3, #1
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a642:	8952      	ldrh	r2, [r2, #10]
 800a644:	fbb3 f1f2 	udiv	r1, r3, r2
 800a648:	fb01 f202 	mul.w	r2, r1, r2
 800a64c:	1a9b      	subs	r3, r3, r2
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	4413      	add	r3, r2
 800a652:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	3301      	adds	r3, #1
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	021b      	lsls	r3, r3, #8
 800a65c:	b21a      	sxth	r2, r3
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	b21b      	sxth	r3, r3
 800a664:	4313      	orrs	r3, r2
 800a666:	b21b      	sxth	r3, r3
 800a668:	b29b      	uxth	r3, r3
 800a66a:	617b      	str	r3, [r7, #20]
			break;
 800a66c:	e042      	b.n	800a6f4 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a674:	6a1a      	ldr	r2, [r3, #32]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a67c:	895b      	ldrh	r3, [r3, #10]
 800a67e:	089b      	lsrs	r3, r3, #2
 800a680:	b29b      	uxth	r3, r3
 800a682:	4619      	mov	r1, r3
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	fbb3 f3f1 	udiv	r3, r3, r1
 800a68a:	4413      	add	r3, r2
 800a68c:	4619      	mov	r1, r3
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f7ff fe24 	bl	800a2dc <move_window>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	d12b      	bne.n	800a6f2 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a6a4:	8952      	ldrh	r2, [r2, #10]
 800a6a6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6aa:	fb01 f202 	mul.w	r2, r1, r2
 800a6ae:	1a9b      	subs	r3, r3, r2
 800a6b0:	687a      	ldr	r2, [r7, #4]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	3303      	adds	r3, #3
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	061a      	lsls	r2, r3, #24
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	3302      	adds	r3, #2
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	041b      	lsls	r3, r3, #16
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	693a      	ldr	r2, [r7, #16]
 800a6ca:	3201      	adds	r2, #1
 800a6cc:	7812      	ldrb	r2, [r2, #0]
 800a6ce:	0212      	lsls	r2, r2, #8
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	693a      	ldr	r2, [r7, #16]
 800a6d4:	7812      	ldrb	r2, [r2, #0]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a6dc:	617b      	str	r3, [r7, #20]
			break;
 800a6de:	e009      	b.n	800a6f4 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	617b      	str	r3, [r7, #20]
 800a6e4:	e006      	b.n	800a6f4 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a6e6:	bf00      	nop
 800a6e8:	e004      	b.n	800a6f4 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a6ea:	bf00      	nop
 800a6ec:	e002      	b.n	800a6f4 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a6ee:	bf00      	nop
 800a6f0:	e000      	b.n	800a6f4 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a6f2:	bf00      	nop
		}
	}

	return val;
 800a6f4:	697b      	ldr	r3, [r7, #20]
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3718      	adds	r7, #24
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b088      	sub	sp, #32
 800a702:	af00      	add	r7, sp, #0
 800a704:	60f8      	str	r0, [r7, #12]
 800a706:	60b9      	str	r1, [r7, #8]
 800a708:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d906      	bls.n	800a71e <put_fat+0x20>
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a716:	695b      	ldr	r3, [r3, #20]
 800a718:	68ba      	ldr	r2, [r7, #8]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d302      	bcc.n	800a724 <put_fat+0x26>
		res = FR_INT_ERR;
 800a71e:	2302      	movs	r3, #2
 800a720:	77fb      	strb	r3, [r7, #31]
 800a722:	e13a      	b.n	800a99a <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	2b03      	cmp	r3, #3
 800a72e:	f000 80d0 	beq.w	800a8d2 <put_fat+0x1d4>
 800a732:	2b03      	cmp	r3, #3
 800a734:	f300 8127 	bgt.w	800a986 <put_fat+0x288>
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d003      	beq.n	800a744 <put_fat+0x46>
 800a73c:	2b02      	cmp	r3, #2
 800a73e:	f000 808f 	beq.w	800a860 <put_fat+0x162>
 800a742:	e120      	b.n	800a986 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	617b      	str	r3, [r7, #20]
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	085b      	lsrs	r3, r3, #1
 800a74c:	697a      	ldr	r2, [r7, #20]
 800a74e:	4413      	add	r3, r2
 800a750:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a758:	6a1a      	ldr	r2, [r3, #32]
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a760:	895b      	ldrh	r3, [r3, #10]
 800a762:	4619      	mov	r1, r3
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	fbb3 f3f1 	udiv	r3, r3, r1
 800a76a:	4413      	add	r3, r2
 800a76c:	4619      	mov	r1, r3
 800a76e:	68f8      	ldr	r0, [r7, #12]
 800a770:	f7ff fdb4 	bl	800a2dc <move_window>
 800a774:	4603      	mov	r3, r0
 800a776:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a778:	7ffb      	ldrb	r3, [r7, #31]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f040 8106 	bne.w	800a98c <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	1c5a      	adds	r2, r3, #1
 800a784:	617a      	str	r2, [r7, #20]
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a78c:	8952      	ldrh	r2, [r2, #10]
 800a78e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a792:	fb01 f202 	mul.w	r2, r1, r2
 800a796:	1a9b      	subs	r3, r3, r2
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	4413      	add	r3, r2
 800a79c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	f003 0301 	and.w	r3, r3, #1
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d00d      	beq.n	800a7c4 <put_fat+0xc6>
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	b25b      	sxtb	r3, r3
 800a7ae:	f003 030f 	and.w	r3, r3, #15
 800a7b2:	b25a      	sxtb	r2, r3
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	011b      	lsls	r3, r3, #4
 800a7ba:	b25b      	sxtb	r3, r3
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	b25b      	sxtb	r3, r3
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	e001      	b.n	800a7c8 <put_fat+0xca>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	69ba      	ldr	r2, [r7, #24]
 800a7ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7dc:	6a1a      	ldr	r2, [r3, #32]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7e4:	895b      	ldrh	r3, [r3, #10]
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	fbb3 f3f1 	udiv	r3, r3, r1
 800a7ee:	4413      	add	r3, r2
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f7ff fd72 	bl	800a2dc <move_window>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a7fc:	7ffb      	ldrb	r3, [r7, #31]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f040 80c6 	bne.w	800a990 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a80a:	895b      	ldrh	r3, [r3, #10]
 800a80c:	461a      	mov	r2, r3
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	fbb3 f1f2 	udiv	r1, r3, r2
 800a814:	fb01 f202 	mul.w	r2, r1, r2
 800a818:	1a9b      	subs	r3, r3, r2
 800a81a:	68fa      	ldr	r2, [r7, #12]
 800a81c:	4413      	add	r3, r2
 800a81e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	2b00      	cmp	r3, #0
 800a828:	d003      	beq.n	800a832 <put_fat+0x134>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	091b      	lsrs	r3, r3, #4
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	e00e      	b.n	800a850 <put_fat+0x152>
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	b25b      	sxtb	r3, r3
 800a838:	f023 030f 	bic.w	r3, r3, #15
 800a83c:	b25a      	sxtb	r2, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	0a1b      	lsrs	r3, r3, #8
 800a842:	b25b      	sxtb	r3, r3
 800a844:	f003 030f 	and.w	r3, r3, #15
 800a848:	b25b      	sxtb	r3, r3
 800a84a:	4313      	orrs	r3, r2
 800a84c:	b25b      	sxtb	r3, r3
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	69ba      	ldr	r2, [r7, #24]
 800a852:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a85a:	2201      	movs	r2, #1
 800a85c:	711a      	strb	r2, [r3, #4]
			break;
 800a85e:	e09c      	b.n	800a99a <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a866:	6a1a      	ldr	r2, [r3, #32]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a86e:	895b      	ldrh	r3, [r3, #10]
 800a870:	085b      	lsrs	r3, r3, #1
 800a872:	b29b      	uxth	r3, r3
 800a874:	4619      	mov	r1, r3
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	fbb3 f3f1 	udiv	r3, r3, r1
 800a87c:	4413      	add	r3, r2
 800a87e:	4619      	mov	r1, r3
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f7ff fd2b 	bl	800a2dc <move_window>
 800a886:	4603      	mov	r3, r0
 800a888:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a88a:	7ffb      	ldrb	r3, [r7, #31]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	f040 8081 	bne.w	800a994 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	005b      	lsls	r3, r3, #1
 800a896:	68fa      	ldr	r2, [r7, #12]
 800a898:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a89c:	8952      	ldrh	r2, [r2, #10]
 800a89e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8a2:	fb01 f202 	mul.w	r2, r1, r2
 800a8a6:	1a9b      	subs	r3, r3, r2
 800a8a8:	68fa      	ldr	r2, [r7, #12]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	b2da      	uxtb	r2, r3
 800a8b2:	69bb      	ldr	r3, [r7, #24]
 800a8b4:	701a      	strb	r2, [r3, #0]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	0a1b      	lsrs	r3, r3, #8
 800a8bc:	b29a      	uxth	r2, r3
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	b2d2      	uxtb	r2, r2
 800a8c4:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	711a      	strb	r2, [r3, #4]
			break;
 800a8d0:	e063      	b.n	800a99a <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8d8:	6a1a      	ldr	r2, [r3, #32]
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8e0:	895b      	ldrh	r3, [r3, #10]
 800a8e2:	089b      	lsrs	r3, r3, #2
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	fbb3 f3f1 	udiv	r3, r3, r1
 800a8ee:	4413      	add	r3, r2
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f7ff fcf2 	bl	800a2dc <move_window>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a8fc:	7ffb      	ldrb	r3, [r7, #31]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d14a      	bne.n	800a998 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	009b      	lsls	r3, r3, #2
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a90c:	8952      	ldrh	r2, [r2, #10]
 800a90e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a912:	fb01 f202 	mul.w	r2, r1, r2
 800a916:	1a9b      	subs	r3, r3, r2
 800a918:	68fa      	ldr	r2, [r7, #12]
 800a91a:	4413      	add	r3, r2
 800a91c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	3303      	adds	r3, #3
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	061a      	lsls	r2, r3, #24
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	3302      	adds	r3, #2
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	041b      	lsls	r3, r3, #16
 800a92e:	4313      	orrs	r3, r2
 800a930:	69ba      	ldr	r2, [r7, #24]
 800a932:	3201      	adds	r2, #1
 800a934:	7812      	ldrb	r2, [r2, #0]
 800a936:	0212      	lsls	r2, r2, #8
 800a938:	4313      	orrs	r3, r2
 800a93a:	69ba      	ldr	r2, [r7, #24]
 800a93c:	7812      	ldrb	r2, [r2, #0]
 800a93e:	4313      	orrs	r3, r2
 800a940:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	4313      	orrs	r3, r2
 800a948:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	b2da      	uxtb	r2, r3
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	701a      	strb	r2, [r3, #0]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	b29b      	uxth	r3, r3
 800a956:	0a1b      	lsrs	r3, r3, #8
 800a958:	b29a      	uxth	r2, r3
 800a95a:	69bb      	ldr	r3, [r7, #24]
 800a95c:	3301      	adds	r3, #1
 800a95e:	b2d2      	uxtb	r2, r2
 800a960:	701a      	strb	r2, [r3, #0]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	0c1a      	lsrs	r2, r3, #16
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	3302      	adds	r3, #2
 800a96a:	b2d2      	uxtb	r2, r2
 800a96c:	701a      	strb	r2, [r3, #0]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	0e1a      	lsrs	r2, r3, #24
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	3303      	adds	r3, #3
 800a976:	b2d2      	uxtb	r2, r2
 800a978:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a980:	2201      	movs	r2, #1
 800a982:	711a      	strb	r2, [r3, #4]
			break;
 800a984:	e009      	b.n	800a99a <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 800a986:	2302      	movs	r3, #2
 800a988:	77fb      	strb	r3, [r7, #31]
 800a98a:	e006      	b.n	800a99a <put_fat+0x29c>
			if (res != FR_OK) break;
 800a98c:	bf00      	nop
 800a98e:	e004      	b.n	800a99a <put_fat+0x29c>
			if (res != FR_OK) break;
 800a990:	bf00      	nop
 800a992:	e002      	b.n	800a99a <put_fat+0x29c>
			if (res != FR_OK) break;
 800a994:	bf00      	nop
 800a996:	e000      	b.n	800a99a <put_fat+0x29c>
			if (res != FR_OK) break;
 800a998:	bf00      	nop
		}
	}

	return res;
 800a99a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3720      	adds	r7, #32
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d906      	bls.n	800a9c2 <remove_chain+0x1e>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9ba:	695b      	ldr	r3, [r3, #20]
 800a9bc:	683a      	ldr	r2, [r7, #0]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d302      	bcc.n	800a9c8 <remove_chain+0x24>
		res = FR_INT_ERR;
 800a9c2:	2302      	movs	r3, #2
 800a9c4:	73fb      	strb	r3, [r7, #15]
 800a9c6:	e049      	b.n	800aa5c <remove_chain+0xb8>

	} else {
		res = FR_OK;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a9cc:	e03b      	b.n	800aa46 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800a9ce:	6839      	ldr	r1, [r7, #0]
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f7ff fd98 	bl	800a506 <get_fat>
 800a9d6:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d03b      	beq.n	800aa56 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d102      	bne.n	800a9ea <remove_chain+0x46>
 800a9e4:	2302      	movs	r3, #2
 800a9e6:	73fb      	strb	r3, [r7, #15]
 800a9e8:	e038      	b.n	800aa5c <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9f0:	d102      	bne.n	800a9f8 <remove_chain+0x54>
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	73fb      	strb	r3, [r7, #15]
 800a9f6:	e031      	b.n	800aa5c <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	6839      	ldr	r1, [r7, #0]
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f7ff fe7e 	bl	800a6fe <put_fat>
 800aa02:	4603      	mov	r3, r0
 800aa04:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800aa06:	7bfb      	ldrb	r3, [r7, #15]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d126      	bne.n	800aa5a <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa18:	d013      	beq.n	800aa42 <remove_chain+0x9e>
				fs->free_clust++;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	3301      	adds	r3, #1
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa2a:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa32:	795b      	ldrb	r3, [r3, #5]
 800aa34:	f043 0301 	orr.w	r3, r3, #1
 800aa38:	b2da      	uxtb	r2, r3
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa40:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa4c:	695b      	ldr	r3, [r3, #20]
 800aa4e:	683a      	ldr	r2, [r7, #0]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d3bc      	bcc.n	800a9ce <remove_chain+0x2a>
 800aa54:	e002      	b.n	800aa5c <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 800aa56:	bf00      	nop
 800aa58:	e000      	b.n	800aa5c <remove_chain+0xb8>
			if (res != FR_OK) break;
 800aa5a:	bf00      	nop
		}
	}

	return res;
 800aa5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b086      	sub	sp, #24
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
 800aa6e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d111      	bne.n	800aa9a <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d006      	beq.n	800aa94 <create_chain+0x2e>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa8c:	695b      	ldr	r3, [r3, #20]
 800aa8e:	693a      	ldr	r2, [r7, #16]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d31d      	bcc.n	800aad0 <create_chain+0x6a>
 800aa94:	2301      	movs	r3, #1
 800aa96:	613b      	str	r3, [r7, #16]
 800aa98:	e01a      	b.n	800aad0 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800aa9a:	6839      	ldr	r1, [r7, #0]
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f7ff fd32 	bl	800a506 <get_fat>
 800aaa2:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d801      	bhi.n	800aaae <create_chain+0x48>
 800aaaa:	2301      	movs	r3, #1
 800aaac:	e07f      	b.n	800abae <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aab4:	d101      	bne.n	800aaba <create_chain+0x54>
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	e079      	b.n	800abae <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aac0:	695b      	ldr	r3, [r3, #20]
 800aac2:	68ba      	ldr	r2, [r7, #8]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d201      	bcs.n	800aacc <create_chain+0x66>
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	e070      	b.n	800abae <create_chain+0x148>
		scl = clst;
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	3301      	adds	r3, #1
 800aad8:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aae0:	695b      	ldr	r3, [r3, #20]
 800aae2:	697a      	ldr	r2, [r7, #20]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d307      	bcc.n	800aaf8 <create_chain+0x92>
			ncl = 2;
 800aae8:	2302      	movs	r3, #2
 800aaea:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800aaec:	697a      	ldr	r2, [r7, #20]
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d901      	bls.n	800aaf8 <create_chain+0x92>
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	e05a      	b.n	800abae <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800aaf8:	6979      	ldr	r1, [r7, #20]
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f7ff fd03 	bl	800a506 <get_fat>
 800ab00:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d00e      	beq.n	800ab26 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab0e:	d002      	beq.n	800ab16 <create_chain+0xb0>
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d101      	bne.n	800ab1a <create_chain+0xb4>
			return cs;
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	e049      	b.n	800abae <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 800ab1a:	697a      	ldr	r2, [r7, #20]
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d1d8      	bne.n	800aad4 <create_chain+0x6e>
 800ab22:	2300      	movs	r3, #0
 800ab24:	e043      	b.n	800abae <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 800ab26:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800ab28:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800ab2c:	6979      	ldr	r1, [r7, #20]
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f7ff fde5 	bl	800a6fe <put_fat>
 800ab34:	4603      	mov	r3, r0
 800ab36:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800ab38:	7bfb      	ldrb	r3, [r7, #15]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d109      	bne.n	800ab52 <create_chain+0xec>
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d006      	beq.n	800ab52 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800ab44:	697a      	ldr	r2, [r7, #20]
 800ab46:	6839      	ldr	r1, [r7, #0]
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f7ff fdd8 	bl	800a6fe <put_fat>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800ab52:	7bfb      	ldrb	r3, [r7, #15]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d121      	bne.n	800ab9c <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab5e:	461a      	mov	r2, r3
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab6a:	691b      	ldr	r3, [r3, #16]
 800ab6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab70:	d01c      	beq.n	800abac <create_chain+0x146>
			fs->free_clust--;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab78:	691b      	ldr	r3, [r3, #16]
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ab82:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab8a:	795b      	ldrb	r3, [r3, #5]
 800ab8c:	f043 0301 	orr.w	r3, r3, #1
 800ab90:	b2da      	uxtb	r2, r3
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab98:	715a      	strb	r2, [r3, #5]
 800ab9a:	e007      	b.n	800abac <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800ab9c:	7bfb      	ldrb	r3, [r7, #15]
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d102      	bne.n	800aba8 <create_chain+0x142>
 800aba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aba6:	e000      	b.n	800abaa <create_chain+0x144>
 800aba8:	2301      	movs	r3, #1
 800abaa:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800abac:	697b      	ldr	r3, [r7, #20]
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3718      	adds	r7, #24
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}

0800abb6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800abb6:	b480      	push	{r7}
 800abb8:	b087      	sub	sp, #28
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
 800abbe:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc8:	3304      	adds	r3, #4
 800abca:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abd8:	895b      	ldrh	r3, [r3, #10]
 800abda:	461a      	mov	r2, r3
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	fbb3 f3f2 	udiv	r3, r3, r2
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800abe8:	6812      	ldr	r2, [r2, #0]
 800abea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800abee:	7892      	ldrb	r2, [r2, #2]
 800abf0:	fbb3 f3f2 	udiv	r3, r3, r2
 800abf4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	1d1a      	adds	r2, r3, #4
 800abfa:	613a      	str	r2, [r7, #16]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d101      	bne.n	800ac0a <clmt_clust+0x54>
 800ac06:	2300      	movs	r3, #0
 800ac08:	e010      	b.n	800ac2c <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 800ac0a:	697a      	ldr	r2, [r7, #20]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d307      	bcc.n	800ac22 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 800ac12:	697a      	ldr	r2, [r7, #20]
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	1ad3      	subs	r3, r2, r3
 800ac18:	617b      	str	r3, [r7, #20]
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	3304      	adds	r3, #4
 800ac1e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ac20:	e7e9      	b.n	800abf6 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 800ac22:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	681a      	ldr	r2, [r3, #0]
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	4413      	add	r3, r2
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	371c      	adds	r7, #28
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bc80      	pop	{r7}
 800ac34:	4770      	bx	lr

0800ac36 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b086      	sub	sp, #24
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
 800ac3e:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	b29a      	uxth	r2, r3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac4a:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d009      	beq.n	800ac70 <dir_sdi+0x3a>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac68:	695b      	ldr	r3, [r3, #20]
 800ac6a:	697a      	ldr	r2, [r7, #20]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d301      	bcc.n	800ac74 <dir_sdi+0x3e>
		return FR_INT_ERR;
 800ac70:	2302      	movs	r3, #2
 800ac72:	e0aa      	b.n	800adca <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d110      	bne.n	800ac9c <dir_sdi+0x66>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	2b03      	cmp	r3, #3
 800ac8a:	d107      	bne.n	800ac9c <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac9a:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d115      	bne.n	800acce <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acae:	891b      	ldrh	r3, [r3, #8]
 800acb0:	461a      	mov	r2, r3
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d301      	bcc.n	800acbc <dir_sdi+0x86>
			return FR_INT_ERR;
 800acb8:	2302      	movs	r3, #2
 800acba:	e086      	b.n	800adca <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acca:	613b      	str	r3, [r7, #16]
 800accc:	e043      	b.n	800ad56 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acda:	895b      	ldrh	r3, [r3, #10]
 800acdc:	095b      	lsrs	r3, r3, #5
 800acde:	b29b      	uxth	r3, r3
 800ace0:	461a      	mov	r2, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acee:	789b      	ldrb	r3, [r3, #2]
 800acf0:	fb02 f303 	mul.w	r3, r2, r3
 800acf4:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800acf6:	e021      	b.n	800ad3c <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	6979      	ldr	r1, [r7, #20]
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7ff fbff 	bl	800a506 <get_fat>
 800ad08:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad10:	d101      	bne.n	800ad16 <dir_sdi+0xe0>
 800ad12:	2301      	movs	r3, #1
 800ad14:	e059      	b.n	800adca <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d909      	bls.n	800ad30 <dir_sdi+0xfa>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad28:	695b      	ldr	r3, [r3, #20]
 800ad2a:	697a      	ldr	r2, [r7, #20]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d301      	bcc.n	800ad34 <dir_sdi+0xfe>
				return FR_INT_ERR;
 800ad30:	2302      	movs	r3, #2
 800ad32:	e04a      	b.n	800adca <dir_sdi+0x194>
			idx -= ic;
 800ad34:	683a      	ldr	r2, [r7, #0]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	1ad3      	subs	r3, r2, r3
 800ad3a:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800ad3c:	683a      	ldr	r2, [r7, #0]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d2d9      	bcs.n	800acf8 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	6979      	ldr	r1, [r7, #20]
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7ff fbb5 	bl	800a4be <clust2sect>
 800ad54:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d101      	bne.n	800ad6c <dir_sdi+0x136>
 800ad68:	2302      	movs	r3, #2
 800ad6a:	e02e      	b.n	800adca <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad78:	895b      	ldrh	r3, [r3, #10]
 800ad7a:	095b      	lsrs	r3, r3, #5
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	461a      	mov	r2, r3
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	4413      	add	r3, r2
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad90:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ada8:	895b      	ldrh	r3, [r3, #10]
 800adaa:	095b      	lsrs	r3, r3, #5
 800adac:	b29b      	uxth	r3, r3
 800adae:	461a      	mov	r2, r3
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	fbb3 f1f2 	udiv	r1, r3, r2
 800adb6:	fb01 f202 	mul.w	r2, r1, r2
 800adba:	1a9b      	subs	r3, r3, r2
 800adbc:	015b      	lsls	r3, r3, #5
 800adbe:	4403      	add	r3, r0
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800adc6:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800adc8:	2300      	movs	r3, #0
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3718      	adds	r7, #24
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800add2:	b590      	push	{r4, r7, lr}
 800add4:	b087      	sub	sp, #28
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
 800adda:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ade2:	88db      	ldrh	r3, [r3, #6]
 800ade4:	3301      	adds	r3, #1
 800ade6:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	b29b      	uxth	r3, r3
 800adec:	2b00      	cmp	r3, #0
 800adee:	d005      	beq.n	800adfc <dir_next+0x2a>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adf6:	691b      	ldr	r3, [r3, #16]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d101      	bne.n	800ae00 <dir_next+0x2e>
		return FR_NO_FILE;
 800adfc:	2304      	movs	r3, #4
 800adfe:	e12e      	b.n	800b05e <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae0c:	895b      	ldrh	r3, [r3, #10]
 800ae0e:	095b      	lsrs	r3, r3, #5
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	461a      	mov	r2, r3
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae1a:	fb01 f202 	mul.w	r2, r1, r2
 800ae1e:	1a9b      	subs	r3, r3, r2
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	f040 80fa 	bne.w	800b01a <dir_next+0x248>
		dp->sect++;					/* Next sector */
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae2c:	691b      	ldr	r3, [r3, #16]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	687a      	ldr	r2, [r7, #4]
 800ae32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ae36:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d10d      	bne.n	800ae60 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae50:	891b      	ldrh	r3, [r3, #8]
 800ae52:	461a      	mov	r2, r3
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	4293      	cmp	r3, r2
 800ae58:	f0c0 80df 	bcc.w	800b01a <dir_next+0x248>
				return FR_NO_FILE;
 800ae5c:	2304      	movs	r3, #4
 800ae5e:	e0fe      	b.n	800b05e <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae6c:	895b      	ldrh	r3, [r3, #10]
 800ae6e:	095b      	lsrs	r3, r3, #5
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	461a      	mov	r2, r3
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ae80:	6812      	ldr	r2, [r2, #0]
 800ae82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ae86:	7892      	ldrb	r2, [r2, #2]
 800ae88:	3a01      	subs	r2, #1
 800ae8a:	4013      	ands	r3, r2
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	f040 80c4 	bne.w	800b01a <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aea0:	68db      	ldr	r3, [r3, #12]
 800aea2:	4619      	mov	r1, r3
 800aea4:	4610      	mov	r0, r2
 800aea6:	f7ff fb2e 	bl	800a506 <get_fat>
 800aeaa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d801      	bhi.n	800aeb6 <dir_next+0xe4>
 800aeb2:	2302      	movs	r3, #2
 800aeb4:	e0d3      	b.n	800b05e <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aebc:	d101      	bne.n	800aec2 <dir_next+0xf0>
 800aebe:	2301      	movs	r3, #1
 800aec0:	e0cd      	b.n	800b05e <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aece:	695b      	ldr	r3, [r3, #20]
 800aed0:	697a      	ldr	r2, [r7, #20]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	f0c0 808e 	bcc.w	800aff4 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d101      	bne.n	800aee2 <dir_next+0x110>
 800aede:	2304      	movs	r3, #4
 800aee0:	e0bd      	b.n	800b05e <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aef0:	68db      	ldr	r3, [r3, #12]
 800aef2:	4619      	mov	r1, r3
 800aef4:	4610      	mov	r0, r2
 800aef6:	f7ff fdb6 	bl	800aa66 <create_chain>
 800aefa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d101      	bne.n	800af06 <dir_next+0x134>
 800af02:	2307      	movs	r3, #7
 800af04:	e0ab      	b.n	800b05e <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d101      	bne.n	800af10 <dir_next+0x13e>
 800af0c:	2302      	movs	r3, #2
 800af0e:	e0a6      	b.n	800b05e <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af16:	d101      	bne.n	800af1c <dir_next+0x14a>
 800af18:	2301      	movs	r3, #1
 800af1a:	e0a0      	b.n	800b05e <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4618      	mov	r0, r3
 800af26:	f7ff f987 	bl	800a238 <sync_window>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d001      	beq.n	800af34 <dir_next+0x162>
 800af30:	2301      	movs	r3, #1
 800af32:	e094      	b.n	800b05e <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4618      	mov	r0, r3
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af4a:	895b      	ldrh	r3, [r3, #10]
 800af4c:	461a      	mov	r2, r3
 800af4e:	2100      	movs	r1, #0
 800af50:	f7fe ff5a 	bl	8009e08 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af62:	681c      	ldr	r4, [r3, #0]
 800af64:	6979      	ldr	r1, [r7, #20]
 800af66:	4610      	mov	r0, r2
 800af68:	f7ff faa9 	bl	800a4be <clust2sect>
 800af6c:	4603      	mov	r3, r0
 800af6e:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 800af72:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800af74:	2300      	movs	r3, #0
 800af76:	613b      	str	r3, [r7, #16]
 800af78:	e021      	b.n	800afbe <dir_next+0x1ec>
						dp->fs->wflag = 1;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af86:	2201      	movs	r2, #1
 800af88:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4618      	mov	r0, r3
 800af94:	f7ff f950 	bl	800a238 <sync_window>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d001      	beq.n	800afa2 <dir_next+0x1d0>
 800af9e:	2301      	movs	r3, #1
 800afa0:	e05d      	b.n	800b05e <dir_next+0x28c>
						dp->fs->winsect++;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800afae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800afb0:	3201      	adds	r2, #1
 800afb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afb6:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	3301      	adds	r3, #1
 800afbc:	613b      	str	r3, [r7, #16]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afca:	789b      	ldrb	r3, [r3, #2]
 800afcc:	461a      	mov	r2, r3
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d3d2      	bcc.n	800af7a <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afe0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	1acb      	subs	r3, r1, r3
 800afee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aff2:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800affa:	461a      	mov	r2, r3
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	6979      	ldr	r1, [r7, #20]
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7ff fa57 	bl	800a4be <clust2sect>
 800b010:	4602      	mov	r2, r0
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b018:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	b29a      	uxth	r2, r3
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b024:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4618      	mov	r0, r3
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b03c:	895b      	ldrh	r3, [r3, #10]
 800b03e:	095b      	lsrs	r3, r3, #5
 800b040:	b29b      	uxth	r3, r3
 800b042:	461a      	mov	r2, r3
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	fbb3 f1f2 	udiv	r1, r3, r2
 800b04a:	fb01 f202 	mul.w	r2, r1, r2
 800b04e:	1a9b      	subs	r3, r3, r2
 800b050:	015b      	lsls	r3, r3, #5
 800b052:	4403      	add	r3, r0
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b05a:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800b05c:	2300      	movs	r3, #0
}
 800b05e:	4618      	mov	r0, r3
 800b060:	371c      	adds	r7, #28
 800b062:	46bd      	mov	sp, r7
 800b064:	bd90      	pop	{r4, r7, pc}

0800b066 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b084      	sub	sp, #16
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
 800b06e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800b070:	2100      	movs	r1, #0
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f7ff fddf 	bl	800ac36 <dir_sdi>
 800b078:	4603      	mov	r3, r0
 800b07a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b07c:	7bfb      	ldrb	r3, [r7, #15]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d135      	bne.n	800b0ee <dir_alloc+0x88>
		n = 0;
 800b082:	2300      	movs	r3, #0
 800b084:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b094:	691b      	ldr	r3, [r3, #16]
 800b096:	4619      	mov	r1, r3
 800b098:	4610      	mov	r0, r2
 800b09a:	f7ff f91f 	bl	800a2dc <move_window>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800b0a2:	7bfb      	ldrb	r3, [r7, #15]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d121      	bne.n	800b0ec <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0ae:	695b      	ldr	r3, [r3, #20]
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	2be5      	cmp	r3, #229	; 0xe5
 800b0b4:	d006      	beq.n	800b0c4 <dir_alloc+0x5e>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0bc:	695b      	ldr	r3, [r3, #20]
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d107      	bne.n	800b0d4 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	60bb      	str	r3, [r7, #8]
 800b0ca:	68ba      	ldr	r2, [r7, #8]
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d102      	bne.n	800b0d8 <dir_alloc+0x72>
 800b0d2:	e00c      	b.n	800b0ee <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800b0d8:	2101      	movs	r1, #1
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f7ff fe79 	bl	800add2 <dir_next>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800b0e4:	7bfb      	ldrb	r3, [r7, #15]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d0cd      	beq.n	800b086 <dir_alloc+0x20>
 800b0ea:	e000      	b.n	800b0ee <dir_alloc+0x88>
			if (res != FR_OK) break;
 800b0ec:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b0ee:	7bfb      	ldrb	r3, [r7, #15]
 800b0f0:	2b04      	cmp	r3, #4
 800b0f2:	d101      	bne.n	800b0f8 <dir_alloc+0x92>
 800b0f4:	2307      	movs	r3, #7
 800b0f6:	73fb      	strb	r3, [r7, #15]
	return res;
 800b0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800b102:	b480      	push	{r7}
 800b104:	b085      	sub	sp, #20
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
 800b10a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	331b      	adds	r3, #27
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	021b      	lsls	r3, r3, #8
 800b114:	b21a      	sxth	r2, r3
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	331a      	adds	r3, #26
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	b21b      	sxth	r3, r3
 800b11e:	4313      	orrs	r3, r2
 800b120:	b21b      	sxth	r3, r3
 800b122:	b29b      	uxth	r3, r3
 800b124:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	2b03      	cmp	r3, #3
 800b130:	d10f      	bne.n	800b152 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	3315      	adds	r3, #21
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	021b      	lsls	r3, r3, #8
 800b13a:	b21a      	sxth	r2, r3
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	3314      	adds	r3, #20
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	b21b      	sxth	r3, r3
 800b144:	4313      	orrs	r3, r2
 800b146:	b21b      	sxth	r3, r3
 800b148:	b29b      	uxth	r3, r3
 800b14a:	041b      	lsls	r3, r3, #16
 800b14c:	68fa      	ldr	r2, [r7, #12]
 800b14e:	4313      	orrs	r3, r2
 800b150:	60fb      	str	r3, [r7, #12]

	return cl;
 800b152:	68fb      	ldr	r3, [r7, #12]
}
 800b154:	4618      	mov	r0, r3
 800b156:	3714      	adds	r7, #20
 800b158:	46bd      	mov	sp, r7
 800b15a:	bc80      	pop	{r7}
 800b15c:	4770      	bx	lr

0800b15e <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800b15e:	b480      	push	{r7}
 800b160:	b083      	sub	sp, #12
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
 800b166:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	331a      	adds	r3, #26
 800b16c:	683a      	ldr	r2, [r7, #0]
 800b16e:	b2d2      	uxtb	r2, r2
 800b170:	701a      	strb	r2, [r3, #0]
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	b29b      	uxth	r3, r3
 800b176:	0a1b      	lsrs	r3, r3, #8
 800b178:	b29a      	uxth	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	331b      	adds	r3, #27
 800b17e:	b2d2      	uxtb	r2, r2
 800b180:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	0c1a      	lsrs	r2, r3, #16
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	3314      	adds	r3, #20
 800b18a:	b2d2      	uxtb	r2, r2
 800b18c:	701a      	strb	r2, [r3, #0]
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	0c1b      	lsrs	r3, r3, #16
 800b192:	b29b      	uxth	r3, r3
 800b194:	0a1b      	lsrs	r3, r3, #8
 800b196:	b29a      	uxth	r2, r3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	3315      	adds	r3, #21
 800b19c:	b2d2      	uxtb	r2, r2
 800b19e:	701a      	strb	r2, [r3, #0]
}
 800b1a0:	bf00      	nop
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bc80      	pop	{r7}
 800b1a8:	4770      	bx	lr
	...

0800b1ac <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b086      	sub	sp, #24
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1be:	1e5a      	subs	r2, r3, #1
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	005b      	lsls	r3, r3, #1
 800b1c4:	4413      	add	r3, r2
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	4413      	add	r3, r2
 800b1ca:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	613b      	str	r3, [r7, #16]
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800b1d4:	4a2b      	ldr	r2, [pc, #172]	; (800b284 <cmp_lfn+0xd8>)
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	4413      	add	r3, r2
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	3301      	adds	r3, #1
 800b1de:	683a      	ldr	r2, [r7, #0]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	021b      	lsls	r3, r3, #8
 800b1e6:	b21a      	sxth	r2, r3
 800b1e8:	4926      	ldr	r1, [pc, #152]	; (800b284 <cmp_lfn+0xd8>)
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	440b      	add	r3, r1
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	440b      	add	r3, r1
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	b21b      	sxth	r3, r3
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	b21b      	sxth	r3, r3
 800b1fe:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800b200:	89fb      	ldrh	r3, [r7, #14]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d019      	beq.n	800b23a <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800b206:	89bb      	ldrh	r3, [r7, #12]
 800b208:	4618      	mov	r0, r3
 800b20a:	f002 fd0d 	bl	800dc28 <ff_wtoupper>
 800b20e:	4603      	mov	r3, r0
 800b210:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	2bfe      	cmp	r3, #254	; 0xfe
 800b216:	d80e      	bhi.n	800b236 <cmp_lfn+0x8a>
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	1c5a      	adds	r2, r3, #1
 800b21c:	617a      	str	r2, [r7, #20]
 800b21e:	005b      	lsls	r3, r3, #1
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	4413      	add	r3, r2
 800b224:	881b      	ldrh	r3, [r3, #0]
 800b226:	4618      	mov	r0, r3
 800b228:	f002 fcfe 	bl	800dc28 <ff_wtoupper>
 800b22c:	4603      	mov	r3, r0
 800b22e:	461a      	mov	r2, r3
 800b230:	89fb      	ldrh	r3, [r7, #14]
 800b232:	4293      	cmp	r3, r2
 800b234:	d008      	beq.n	800b248 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800b236:	2300      	movs	r3, #0
 800b238:	e01f      	b.n	800b27a <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800b23a:	89bb      	ldrh	r3, [r7, #12]
 800b23c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b240:	4293      	cmp	r3, r2
 800b242:	d001      	beq.n	800b248 <cmp_lfn+0x9c>
 800b244:	2300      	movs	r3, #0
 800b246:	e018      	b.n	800b27a <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	3301      	adds	r3, #1
 800b24c:	613b      	str	r3, [r7, #16]
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	2b0c      	cmp	r3, #12
 800b252:	d9bf      	bls.n	800b1d4 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d00b      	beq.n	800b278 <cmp_lfn+0xcc>
 800b260:	89fb      	ldrh	r3, [r7, #14]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d008      	beq.n	800b278 <cmp_lfn+0xcc>
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	005b      	lsls	r3, r3, #1
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	4413      	add	r3, r2
 800b26e:	881b      	ldrh	r3, [r3, #0]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d001      	beq.n	800b278 <cmp_lfn+0xcc>
		return 0;
 800b274:	2300      	movs	r3, #0
 800b276:	e000      	b.n	800b27a <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800b278:	2301      	movs	r3, #1
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3718      	adds	r7, #24
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	0800e734 	.word	0x0800e734

0800b288 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800b288:	b480      	push	{r7}
 800b28a:	b089      	sub	sp, #36	; 0x24
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	4611      	mov	r1, r2
 800b294:	461a      	mov	r2, r3
 800b296:	460b      	mov	r3, r1
 800b298:	71fb      	strb	r3, [r7, #7]
 800b29a:	4613      	mov	r3, r2
 800b29c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	330d      	adds	r3, #13
 800b2a2:	79ba      	ldrb	r2, [r7, #6]
 800b2a4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	330b      	adds	r3, #11
 800b2aa:	220f      	movs	r2, #15
 800b2ac:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	330c      	adds	r3, #12
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	331a      	adds	r3, #26
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	701a      	strb	r2, [r3, #0]
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	331b      	adds	r3, #27
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800b2c6:	79fb      	ldrb	r3, [r7, #7]
 800b2c8:	1e5a      	subs	r2, r3, #1
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	005b      	lsls	r3, r3, #1
 800b2ce:	4413      	add	r3, r2
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	4413      	add	r3, r2
 800b2d4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	82fb      	strh	r3, [r7, #22]
 800b2da:	2300      	movs	r3, #0
 800b2dc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800b2de:	8afb      	ldrh	r3, [r7, #22]
 800b2e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d007      	beq.n	800b2f8 <fit_lfn+0x70>
 800b2e8:	69fb      	ldr	r3, [r7, #28]
 800b2ea:	1c5a      	adds	r2, r3, #1
 800b2ec:	61fa      	str	r2, [r7, #28]
 800b2ee:	005b      	lsls	r3, r3, #1
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	881b      	ldrh	r3, [r3, #0]
 800b2f6:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800b2f8:	4a1c      	ldr	r2, [pc, #112]	; (800b36c <fit_lfn+0xe4>)
 800b2fa:	69bb      	ldr	r3, [r7, #24]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	461a      	mov	r2, r3
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	4413      	add	r3, r2
 800b306:	8afa      	ldrh	r2, [r7, #22]
 800b308:	b2d2      	uxtb	r2, r2
 800b30a:	701a      	strb	r2, [r3, #0]
 800b30c:	8afb      	ldrh	r3, [r7, #22]
 800b30e:	0a1b      	lsrs	r3, r3, #8
 800b310:	b299      	uxth	r1, r3
 800b312:	4a16      	ldr	r2, [pc, #88]	; (800b36c <fit_lfn+0xe4>)
 800b314:	69bb      	ldr	r3, [r7, #24]
 800b316:	4413      	add	r3, r2
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	3301      	adds	r3, #1
 800b31c:	68ba      	ldr	r2, [r7, #8]
 800b31e:	4413      	add	r3, r2
 800b320:	b2ca      	uxtb	r2, r1
 800b322:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800b324:	8afb      	ldrh	r3, [r7, #22]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d102      	bne.n	800b330 <fit_lfn+0xa8>
 800b32a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b32e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b330:	69bb      	ldr	r3, [r7, #24]
 800b332:	3301      	adds	r3, #1
 800b334:	61bb      	str	r3, [r7, #24]
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	2b0c      	cmp	r3, #12
 800b33a:	d9d0      	bls.n	800b2de <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800b33c:	8afb      	ldrh	r3, [r7, #22]
 800b33e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b342:	4293      	cmp	r3, r2
 800b344:	d006      	beq.n	800b354 <fit_lfn+0xcc>
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	005b      	lsls	r3, r3, #1
 800b34a:	68fa      	ldr	r2, [r7, #12]
 800b34c:	4413      	add	r3, r2
 800b34e:	881b      	ldrh	r3, [r3, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d103      	bne.n	800b35c <fit_lfn+0xd4>
 800b354:	79fb      	ldrb	r3, [r7, #7]
 800b356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b35a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	79fa      	ldrb	r2, [r7, #7]
 800b360:	701a      	strb	r2, [r3, #0]
}
 800b362:	bf00      	nop
 800b364:	3724      	adds	r7, #36	; 0x24
 800b366:	46bd      	mov	sp, r7
 800b368:	bc80      	pop	{r7}
 800b36a:	4770      	bx	lr
 800b36c:	0800e734 	.word	0x0800e734

0800b370 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b08c      	sub	sp, #48	; 0x30
 800b374:	af00      	add	r7, sp, #0
 800b376:	60f8      	str	r0, [r7, #12]
 800b378:	60b9      	str	r1, [r7, #8]
 800b37a:	607a      	str	r2, [r7, #4]
 800b37c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b37e:	220b      	movs	r2, #11
 800b380:	68b9      	ldr	r1, [r7, #8]
 800b382:	68f8      	ldr	r0, [r7, #12]
 800b384:	f7fe fd22 	bl	8009dcc <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	2b05      	cmp	r3, #5
 800b38c:	d92b      	bls.n	800b3e6 <gen_numname+0x76>
		sr = seq;
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b392:	e022      	b.n	800b3da <gen_numname+0x6a>
			wc = *lfn++;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	1c9a      	adds	r2, r3, #2
 800b398:	607a      	str	r2, [r7, #4]
 800b39a:	881b      	ldrh	r3, [r3, #0]
 800b39c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800b39e:	2300      	movs	r3, #0
 800b3a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3a2:	e017      	b.n	800b3d4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	005a      	lsls	r2, r3, #1
 800b3a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b3aa:	f003 0301 	and.w	r3, r3, #1
 800b3ae:	4413      	add	r3, r2
 800b3b0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b3b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b3b4:	085b      	lsrs	r3, r3, #1
 800b3b6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d005      	beq.n	800b3ce <gen_numname+0x5e>
 800b3c2:	69fb      	ldr	r3, [r7, #28]
 800b3c4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800b3c8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800b3cc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d6:	2b0f      	cmp	r3, #15
 800b3d8:	d9e4      	bls.n	800b3a4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	881b      	ldrh	r3, [r3, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d1d8      	bne.n	800b394 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b3e6:	2307      	movs	r3, #7
 800b3e8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	f003 030f 	and.w	r3, r3, #15
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	3330      	adds	r3, #48	; 0x30
 800b3f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800b3fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3fe:	2b39      	cmp	r3, #57	; 0x39
 800b400:	d904      	bls.n	800b40c <gen_numname+0x9c>
 800b402:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b406:	3307      	adds	r3, #7
 800b408:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800b40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b40e:	1e5a      	subs	r2, r3, #1
 800b410:	62ba      	str	r2, [r7, #40]	; 0x28
 800b412:	3330      	adds	r3, #48	; 0x30
 800b414:	443b      	add	r3, r7
 800b416:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b41a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	091b      	lsrs	r3, r3, #4
 800b422:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d1df      	bne.n	800b3ea <gen_numname+0x7a>
	ns[i] = '~';
 800b42a:	f107 0214 	add.w	r2, r7, #20
 800b42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b430:	4413      	add	r3, r2
 800b432:	227e      	movs	r2, #126	; 0x7e
 800b434:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b436:	2300      	movs	r3, #0
 800b438:	627b      	str	r3, [r7, #36]	; 0x24
 800b43a:	e002      	b.n	800b442 <gen_numname+0xd2>
 800b43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43e:	3301      	adds	r3, #1
 800b440:	627b      	str	r3, [r7, #36]	; 0x24
 800b442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b446:	429a      	cmp	r2, r3
 800b448:	d205      	bcs.n	800b456 <gen_numname+0xe6>
 800b44a:	68fa      	ldr	r2, [r7, #12]
 800b44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44e:	4413      	add	r3, r2
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	2b20      	cmp	r3, #32
 800b454:	d1f2      	bne.n	800b43c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b458:	2b07      	cmp	r3, #7
 800b45a:	d807      	bhi.n	800b46c <gen_numname+0xfc>
 800b45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b45e:	1c5a      	adds	r2, r3, #1
 800b460:	62ba      	str	r2, [r7, #40]	; 0x28
 800b462:	3330      	adds	r3, #48	; 0x30
 800b464:	443b      	add	r3, r7
 800b466:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b46a:	e000      	b.n	800b46e <gen_numname+0xfe>
 800b46c:	2120      	movs	r1, #32
 800b46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b470:	1c5a      	adds	r2, r3, #1
 800b472:	627a      	str	r2, [r7, #36]	; 0x24
 800b474:	68fa      	ldr	r2, [r7, #12]
 800b476:	4413      	add	r3, r2
 800b478:	460a      	mov	r2, r1
 800b47a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47e:	2b07      	cmp	r3, #7
 800b480:	d9e9      	bls.n	800b456 <gen_numname+0xe6>
}
 800b482:	bf00      	nop
 800b484:	bf00      	nop
 800b486:	3730      	adds	r7, #48	; 0x30
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b494:	2300      	movs	r3, #0
 800b496:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b498:	230b      	movs	r3, #11
 800b49a:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800b49c:	7bfb      	ldrb	r3, [r7, #15]
 800b49e:	b2da      	uxtb	r2, r3
 800b4a0:	0852      	lsrs	r2, r2, #1
 800b4a2:	01db      	lsls	r3, r3, #7
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	b2da      	uxtb	r2, r3
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	1c59      	adds	r1, r3, #1
 800b4ac:	6079      	str	r1, [r7, #4]
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	4413      	add	r3, r2
 800b4b2:	73fb      	strb	r3, [r7, #15]
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	3b01      	subs	r3, #1
 800b4b8:	60bb      	str	r3, [r7, #8]
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d1ed      	bne.n	800b49c <sum_sfn+0x10>
	return sum;
 800b4c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3714      	adds	r7, #20
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bc80      	pop	{r7}
 800b4ca:	4770      	bx	lr

0800b4cc <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b086      	sub	sp, #24
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f7ff fbad 	bl	800ac36 <dir_sdi>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b4e0:	7dfb      	ldrb	r3, [r7, #23]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d001      	beq.n	800b4ea <dir_find+0x1e>
 800b4e6:	7dfb      	ldrb	r3, [r7, #23]
 800b4e8:	e0b8      	b.n	800b65c <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800b4ea:	23ff      	movs	r3, #255	; 0xff
 800b4ec:	753b      	strb	r3, [r7, #20]
 800b4ee:	7d3b      	ldrb	r3, [r7, #20]
 800b4f0:	757b      	strb	r3, [r7, #21]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4fc:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b50c:	691b      	ldr	r3, [r3, #16]
 800b50e:	4619      	mov	r1, r3
 800b510:	4610      	mov	r0, r2
 800b512:	f7fe fee3 	bl	800a2dc <move_window>
 800b516:	4603      	mov	r3, r0
 800b518:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b51a:	7dfb      	ldrb	r3, [r7, #23]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	f040 8097 	bne.w	800b650 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b528:	695b      	ldr	r3, [r3, #20]
 800b52a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b532:	7dbb      	ldrb	r3, [r7, #22]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d102      	bne.n	800b53e <dir_find+0x72>
 800b538:	2304      	movs	r3, #4
 800b53a:	75fb      	strb	r3, [r7, #23]
 800b53c:	e08d      	b.n	800b65a <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	330b      	adds	r3, #11
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b548:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b54a:	7dbb      	ldrb	r3, [r7, #22]
 800b54c:	2be5      	cmp	r3, #229	; 0xe5
 800b54e:	d007      	beq.n	800b560 <dir_find+0x94>
 800b550:	7bfb      	ldrb	r3, [r7, #15]
 800b552:	f003 0308 	and.w	r3, r3, #8
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00b      	beq.n	800b572 <dir_find+0xa6>
 800b55a:	7bfb      	ldrb	r3, [r7, #15]
 800b55c:	2b0f      	cmp	r3, #15
 800b55e:	d008      	beq.n	800b572 <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800b560:	23ff      	movs	r3, #255	; 0xff
 800b562:	757b      	strb	r3, [r7, #21]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b56a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b56e:	849a      	strh	r2, [r3, #36]	; 0x24
 800b570:	e063      	b.n	800b63a <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b572:	7bfb      	ldrb	r3, [r7, #15]
 800b574:	2b0f      	cmp	r3, #15
 800b576:	d137      	bne.n	800b5e8 <dir_find+0x11c>
				if (dp->lfn) {
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b57e:	6a1b      	ldr	r3, [r3, #32]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d05a      	beq.n	800b63a <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b584:	7dbb      	ldrb	r3, [r7, #22]
 800b586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d010      	beq.n	800b5b0 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	7b5b      	ldrb	r3, [r3, #13]
 800b592:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800b594:	7dbb      	ldrb	r3, [r7, #22]
 800b596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b59a:	75bb      	strb	r3, [r7, #22]
 800b59c:	7dbb      	ldrb	r3, [r7, #22]
 800b59e:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5a6:	88da      	ldrh	r2, [r3, #6]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5ae:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800b5b0:	7dba      	ldrb	r2, [r7, #22]
 800b5b2:	7d7b      	ldrb	r3, [r7, #21]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d114      	bne.n	800b5e2 <dir_find+0x116>
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	330d      	adds	r3, #13
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	7d3a      	ldrb	r2, [r7, #20]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d10e      	bne.n	800b5e2 <dir_find+0x116>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5ca:	6a1b      	ldr	r3, [r3, #32]
 800b5cc:	6939      	ldr	r1, [r7, #16]
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f7ff fdec 	bl	800b1ac <cmp_lfn>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d003      	beq.n	800b5e2 <dir_find+0x116>
 800b5da:	7d7b      	ldrb	r3, [r7, #21]
 800b5dc:	3b01      	subs	r3, #1
 800b5de:	b2db      	uxtb	r3, r3
 800b5e0:	e000      	b.n	800b5e4 <dir_find+0x118>
 800b5e2:	23ff      	movs	r3, #255	; 0xff
 800b5e4:	757b      	strb	r3, [r7, #21]
 800b5e6:	e028      	b.n	800b63a <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800b5e8:	7d7b      	ldrb	r3, [r7, #21]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d107      	bne.n	800b5fe <dir_find+0x132>
 800b5ee:	6938      	ldr	r0, [r7, #16]
 800b5f0:	f7ff ff4c 	bl	800b48c <sum_sfn>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	7d3b      	ldrb	r3, [r7, #20]
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d02a      	beq.n	800b654 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b604:	699b      	ldr	r3, [r3, #24]
 800b606:	330b      	adds	r3, #11
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	f003 0301 	and.w	r3, r3, #1
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d10b      	bne.n	800b62a <dir_find+0x15e>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b618:	699b      	ldr	r3, [r3, #24]
 800b61a:	220b      	movs	r2, #11
 800b61c:	4619      	mov	r1, r3
 800b61e:	6938      	ldr	r0, [r7, #16]
 800b620:	f7fe fc0c 	bl	8009e3c <mem_cmp>
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d016      	beq.n	800b658 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800b62a:	23ff      	movs	r3, #255	; 0xff
 800b62c:	757b      	strb	r3, [r7, #21]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b634:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b638:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800b63a:	2100      	movs	r1, #0
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f7ff fbc8 	bl	800add2 <dir_next>
 800b642:	4603      	mov	r3, r0
 800b644:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b646:	7dfb      	ldrb	r3, [r7, #23]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	f43f af58 	beq.w	800b4fe <dir_find+0x32>
 800b64e:	e004      	b.n	800b65a <dir_find+0x18e>
		if (res != FR_OK) break;
 800b650:	bf00      	nop
 800b652:	e002      	b.n	800b65a <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800b654:	bf00      	nop
 800b656:	e000      	b.n	800b65a <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800b658:	bf00      	nop

	return res;
 800b65a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3718      	adds	r7, #24
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b08c      	sub	sp, #48	; 0x30
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b672:	699b      	ldr	r3, [r3, #24]
 800b674:	623b      	str	r3, [r7, #32]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b67c:	6a1b      	ldr	r3, [r3, #32]
 800b67e:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800b680:	f107 030c 	add.w	r3, r7, #12
 800b684:	220c      	movs	r2, #12
 800b686:	6a39      	ldr	r1, [r7, #32]
 800b688:	4618      	mov	r0, r3
 800b68a:	f7fe fb9f 	bl	8009dcc <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b68e:	7dfb      	ldrb	r3, [r7, #23]
 800b690:	f003 0301 	and.w	r3, r3, #1
 800b694:	2b00      	cmp	r3, #0
 800b696:	d03b      	beq.n	800b710 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800b698:	6a3b      	ldr	r3, [r7, #32]
 800b69a:	330b      	adds	r3, #11
 800b69c:	2200      	movs	r2, #0
 800b69e:	701a      	strb	r2, [r3, #0]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6b0:	e013      	b.n	800b6da <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800b6b2:	f107 010c 	add.w	r1, r7, #12
 800b6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b8:	69fa      	ldr	r2, [r7, #28]
 800b6ba:	6a38      	ldr	r0, [r7, #32]
 800b6bc:	f7ff fe58 	bl	800b370 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f7ff ff03 	bl	800b4cc <dir_find>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800b6cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d106      	bne.n	800b6e2 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800b6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6dc:	2b63      	cmp	r3, #99	; 0x63
 800b6de:	d9e8      	bls.n	800b6b2 <dir_register+0x4e>
 800b6e0:	e000      	b.n	800b6e4 <dir_register+0x80>
			if (res != FR_OK) break;
 800b6e2:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e6:	2b64      	cmp	r3, #100	; 0x64
 800b6e8:	d101      	bne.n	800b6ee <dir_register+0x8a>
 800b6ea:	2307      	movs	r3, #7
 800b6ec:	e0d8      	b.n	800b8a0 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b6ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6f2:	2b04      	cmp	r3, #4
 800b6f4:	d002      	beq.n	800b6fc <dir_register+0x98>
 800b6f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6fa:	e0d1      	b.n	800b8a0 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800b6fc:	6a3b      	ldr	r3, [r7, #32]
 800b6fe:	330b      	adds	r3, #11
 800b700:	7dfa      	ldrb	r2, [r7, #23]
 800b702:	701a      	strb	r2, [r3, #0]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b70a:	461a      	mov	r2, r3
 800b70c:	69fb      	ldr	r3, [r7, #28]
 800b70e:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800b710:	7dfb      	ldrb	r3, [r7, #23]
 800b712:	f003 0302 	and.w	r3, r3, #2
 800b716:	2b00      	cmp	r3, #0
 800b718:	d014      	beq.n	800b744 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 800b71a:	2300      	movs	r3, #0
 800b71c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b71e:	e002      	b.n	800b726 <dir_register+0xc2>
 800b720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b722:	3301      	adds	r3, #1
 800b724:	62bb      	str	r3, [r7, #40]	; 0x28
 800b726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b728:	005b      	lsls	r3, r3, #1
 800b72a:	69fa      	ldr	r2, [r7, #28]
 800b72c:	4413      	add	r3, r2
 800b72e:	881b      	ldrh	r3, [r3, #0]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d1f5      	bne.n	800b720 <dir_register+0xbc>
		nent = (n + 25) / 13;
 800b734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b736:	3319      	adds	r3, #25
 800b738:	4a5b      	ldr	r2, [pc, #364]	; (800b8a8 <dir_register+0x244>)
 800b73a:	fba2 2303 	umull	r2, r3, r2, r3
 800b73e:	089b      	lsrs	r3, r3, #2
 800b740:	627b      	str	r3, [r7, #36]	; 0x24
 800b742:	e001      	b.n	800b748 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800b744:	2301      	movs	r3, #1
 800b746:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b748:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f7ff fc8b 	bl	800b066 <dir_alloc>
 800b750:	4603      	mov	r3, r0
 800b752:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b756:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d15b      	bne.n	800b816 <dir_register+0x1b2>
 800b75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b760:	3b01      	subs	r3, #1
 800b762:	627b      	str	r3, [r7, #36]	; 0x24
 800b764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b766:	2b00      	cmp	r3, #0
 800b768:	d055      	beq.n	800b816 <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b770:	88db      	ldrh	r3, [r3, #6]
 800b772:	461a      	mov	r2, r3
 800b774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b776:	1ad3      	subs	r3, r2, r3
 800b778:	4619      	mov	r1, r3
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f7ff fa5b 	bl	800ac36 <dir_sdi>
 800b780:	4603      	mov	r3, r0
 800b782:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b786:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d143      	bne.n	800b816 <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b794:	699b      	ldr	r3, [r3, #24]
 800b796:	4618      	mov	r0, r3
 800b798:	f7ff fe78 	bl	800b48c <sum_sfn>
 800b79c:	4603      	mov	r3, r0
 800b79e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7a6:	681a      	ldr	r2, [r3, #0]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7ae:	691b      	ldr	r3, [r3, #16]
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	4610      	mov	r0, r2
 800b7b4:	f7fe fd92 	bl	800a2dc <move_window>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b7be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d126      	bne.n	800b814 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7cc:	6a18      	ldr	r0, [r3, #32]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7d4:	6959      	ldr	r1, [r3, #20]
 800b7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d8:	b2da      	uxtb	r2, r3
 800b7da:	7efb      	ldrb	r3, [r7, #27]
 800b7dc:	f7ff fd54 	bl	800b288 <fit_lfn>
				dp->fs->wflag = 1;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 800b7f0:	2100      	movs	r1, #0
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f7ff faed 	bl	800add2 <dir_next>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b7fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b802:	2b00      	cmp	r3, #0
 800b804:	d107      	bne.n	800b816 <dir_register+0x1b2>
 800b806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b808:	3b01      	subs	r3, #1
 800b80a:	627b      	str	r3, [r7, #36]	; 0x24
 800b80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d1c6      	bne.n	800b7a0 <dir_register+0x13c>
 800b812:	e000      	b.n	800b816 <dir_register+0x1b2>
				if (res != FR_OK) break;
 800b814:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800b816:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d13e      	bne.n	800b89c <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b824:	681a      	ldr	r2, [r3, #0]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b82c:	691b      	ldr	r3, [r3, #16]
 800b82e:	4619      	mov	r1, r3
 800b830:	4610      	mov	r0, r2
 800b832:	f7fe fd53 	bl	800a2dc <move_window>
 800b836:	4603      	mov	r3, r0
 800b838:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b83c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b840:	2b00      	cmp	r3, #0
 800b842:	d12b      	bne.n	800b89c <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b84a:	695b      	ldr	r3, [r3, #20]
 800b84c:	2220      	movs	r2, #32
 800b84e:	2100      	movs	r1, #0
 800b850:	4618      	mov	r0, r3
 800b852:	f7fe fad9 	bl	8009e08 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b85c:	6958      	ldr	r0, [r3, #20]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b864:	699b      	ldr	r3, [r3, #24]
 800b866:	220b      	movs	r2, #11
 800b868:	4619      	mov	r1, r3
 800b86a:	f7fe faaf 	bl	8009dcc <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b874:	699b      	ldr	r3, [r3, #24]
 800b876:	330b      	adds	r3, #11
 800b878:	781a      	ldrb	r2, [r3, #0]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b880:	695b      	ldr	r3, [r3, #20]
 800b882:	330c      	adds	r3, #12
 800b884:	f002 0218 	and.w	r2, r2, #24
 800b888:	b2d2      	uxtb	r2, r2
 800b88a:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b898:	2201      	movs	r2, #1
 800b89a:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 800b89c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3730      	adds	r7, #48	; 0x30
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	4ec4ec4f 	.word	0x4ec4ec4f

0800b8ac <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b08a      	sub	sp, #40	; 0x28
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	613b      	str	r3, [r7, #16]
 800b8bc:	e002      	b.n	800b8c4 <create_name+0x18>
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	613b      	str	r3, [r7, #16]
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	2b2f      	cmp	r3, #47	; 0x2f
 800b8ca:	d0f8      	beq.n	800b8be <create_name+0x12>
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	2b5c      	cmp	r3, #92	; 0x5c
 800b8d2:	d0f4      	beq.n	800b8be <create_name+0x12>
	lfn = dp->lfn;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8da:	6a1b      	ldr	r3, [r3, #32]
 800b8dc:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	617b      	str	r3, [r7, #20]
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b8e6:	69bb      	ldr	r3, [r7, #24]
 800b8e8:	1c5a      	adds	r2, r3, #1
 800b8ea:	61ba      	str	r2, [r7, #24]
 800b8ec:	693a      	ldr	r2, [r7, #16]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800b8f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8f6:	2b1f      	cmp	r3, #31
 800b8f8:	d92f      	bls.n	800b95a <create_name+0xae>
 800b8fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8fc:	2b2f      	cmp	r3, #47	; 0x2f
 800b8fe:	d02c      	beq.n	800b95a <create_name+0xae>
 800b900:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b902:	2b5c      	cmp	r3, #92	; 0x5c
 800b904:	d029      	beq.n	800b95a <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	2bfe      	cmp	r3, #254	; 0xfe
 800b90a:	d901      	bls.n	800b910 <create_name+0x64>
			return FR_INVALID_NAME;
 800b90c:	2306      	movs	r3, #6
 800b90e:	e186      	b.n	800bc1e <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b910:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b912:	b2db      	uxtb	r3, r3
 800b914:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b916:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b918:	2101      	movs	r1, #1
 800b91a:	4618      	mov	r0, r3
 800b91c:	f002 f94a 	bl	800dbb4 <ff_convert>
 800b920:	4603      	mov	r3, r0
 800b922:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b924:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b926:	2b00      	cmp	r3, #0
 800b928:	d101      	bne.n	800b92e <create_name+0x82>
 800b92a:	2306      	movs	r3, #6
 800b92c:	e177      	b.n	800bc1e <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800b92e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b930:	2b7f      	cmp	r3, #127	; 0x7f
 800b932:	d809      	bhi.n	800b948 <create_name+0x9c>
 800b934:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b936:	4619      	mov	r1, r3
 800b938:	488e      	ldr	r0, [pc, #568]	; (800bb74 <create_name+0x2c8>)
 800b93a:	f7fe faa5 	bl	8009e88 <chk_chr>
 800b93e:	4603      	mov	r3, r0
 800b940:	2b00      	cmp	r3, #0
 800b942:	d001      	beq.n	800b948 <create_name+0x9c>
			return FR_INVALID_NAME;
 800b944:	2306      	movs	r3, #6
 800b946:	e16a      	b.n	800bc1e <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	1c5a      	adds	r2, r3, #1
 800b94c:	617a      	str	r2, [r7, #20]
 800b94e:	005b      	lsls	r3, r3, #1
 800b950:	68fa      	ldr	r2, [r7, #12]
 800b952:	4413      	add	r3, r2
 800b954:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b956:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b958:	e7c5      	b.n	800b8e6 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b95a:	693a      	ldr	r2, [r7, #16]
 800b95c:	69bb      	ldr	r3, [r7, #24]
 800b95e:	441a      	add	r2, r3
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800b964:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b966:	2b1f      	cmp	r3, #31
 800b968:	d801      	bhi.n	800b96e <create_name+0xc2>
 800b96a:	2304      	movs	r3, #4
 800b96c:	e000      	b.n	800b970 <create_name+0xc4>
 800b96e:	2300      	movs	r3, #0
 800b970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800b974:	e011      	b.n	800b99a <create_name+0xee>
		w = lfn[di - 1];
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b97c:	3b01      	subs	r3, #1
 800b97e:	005b      	lsls	r3, r3, #1
 800b980:	68fa      	ldr	r2, [r7, #12]
 800b982:	4413      	add	r3, r2
 800b984:	881b      	ldrh	r3, [r3, #0]
 800b986:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b988:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b98a:	2b20      	cmp	r3, #32
 800b98c:	d002      	beq.n	800b994 <create_name+0xe8>
 800b98e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b990:	2b2e      	cmp	r3, #46	; 0x2e
 800b992:	d106      	bne.n	800b9a2 <create_name+0xf6>
		di--;
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	3b01      	subs	r3, #1
 800b998:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d1ea      	bne.n	800b976 <create_name+0xca>
 800b9a0:	e000      	b.n	800b9a4 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800b9a2:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d101      	bne.n	800b9ae <create_name+0x102>
 800b9aa:	2306      	movs	r3, #6
 800b9ac:	e137      	b.n	800bc1e <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	005b      	lsls	r3, r3, #1
 800b9b2:	68fa      	ldr	r2, [r7, #12]
 800b9b4:	4413      	add	r3, r2
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9c0:	699b      	ldr	r3, [r3, #24]
 800b9c2:	220b      	movs	r2, #11
 800b9c4:	2120      	movs	r1, #32
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f7fe fa1e 	bl	8009e08 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	61bb      	str	r3, [r7, #24]
 800b9d0:	e002      	b.n	800b9d8 <create_name+0x12c>
 800b9d2:	69bb      	ldr	r3, [r7, #24]
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	61bb      	str	r3, [r7, #24]
 800b9d8:	69bb      	ldr	r3, [r7, #24]
 800b9da:	005b      	lsls	r3, r3, #1
 800b9dc:	68fa      	ldr	r2, [r7, #12]
 800b9de:	4413      	add	r3, r2
 800b9e0:	881b      	ldrh	r3, [r3, #0]
 800b9e2:	2b20      	cmp	r3, #32
 800b9e4:	d0f5      	beq.n	800b9d2 <create_name+0x126>
 800b9e6:	69bb      	ldr	r3, [r7, #24]
 800b9e8:	005b      	lsls	r3, r3, #1
 800b9ea:	68fa      	ldr	r2, [r7, #12]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	881b      	ldrh	r3, [r3, #0]
 800b9f0:	2b2e      	cmp	r3, #46	; 0x2e
 800b9f2:	d0ee      	beq.n	800b9d2 <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b9f4:	69bb      	ldr	r3, [r7, #24]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d009      	beq.n	800ba0e <create_name+0x162>
 800b9fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9fe:	f043 0303 	orr.w	r3, r3, #3
 800ba02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ba06:	e002      	b.n	800ba0e <create_name+0x162>
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	3b01      	subs	r3, #1
 800ba0c:	617b      	str	r3, [r7, #20]
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d009      	beq.n	800ba28 <create_name+0x17c>
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	005b      	lsls	r3, r3, #1
 800ba1e:	68fa      	ldr	r2, [r7, #12]
 800ba20:	4413      	add	r3, r2
 800ba22:	881b      	ldrh	r3, [r3, #0]
 800ba24:	2b2e      	cmp	r3, #46	; 0x2e
 800ba26:	d1ef      	bne.n	800ba08 <create_name+0x15c>

	b = i = 0; ni = 8;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	623b      	str	r3, [r7, #32]
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ba32:	2308      	movs	r3, #8
 800ba34:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ba36:	69bb      	ldr	r3, [r7, #24]
 800ba38:	1c5a      	adds	r2, r3, #1
 800ba3a:	61ba      	str	r2, [r7, #24]
 800ba3c:	005b      	lsls	r3, r3, #1
 800ba3e:	68fa      	ldr	r2, [r7, #12]
 800ba40:	4413      	add	r3, r2
 800ba42:	881b      	ldrh	r3, [r3, #0]
 800ba44:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ba46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	f000 8091 	beq.w	800bb70 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ba4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba50:	2b20      	cmp	r3, #32
 800ba52:	d006      	beq.n	800ba62 <create_name+0x1b6>
 800ba54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba56:	2b2e      	cmp	r3, #46	; 0x2e
 800ba58:	d10a      	bne.n	800ba70 <create_name+0x1c4>
 800ba5a:	69ba      	ldr	r2, [r7, #24]
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d006      	beq.n	800ba70 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 800ba62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba66:	f043 0303 	orr.w	r3, r3, #3
 800ba6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ba6e:	e07e      	b.n	800bb6e <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ba70:	6a3a      	ldr	r2, [r7, #32]
 800ba72:	69fb      	ldr	r3, [r7, #28]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d203      	bcs.n	800ba80 <create_name+0x1d4>
 800ba78:	69ba      	ldr	r2, [r7, #24]
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d123      	bne.n	800bac8 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 800ba80:	69fb      	ldr	r3, [r7, #28]
 800ba82:	2b0b      	cmp	r3, #11
 800ba84:	d106      	bne.n	800ba94 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 800ba86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba8a:	f043 0303 	orr.w	r3, r3, #3
 800ba8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ba92:	e076      	b.n	800bb82 <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ba94:	69ba      	ldr	r2, [r7, #24]
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d005      	beq.n	800baa8 <create_name+0x1fc>
 800ba9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800baa0:	f043 0303 	orr.w	r3, r3, #3
 800baa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800baa8:	69ba      	ldr	r2, [r7, #24]
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	429a      	cmp	r2, r3
 800baae:	d867      	bhi.n	800bb80 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	61bb      	str	r3, [r7, #24]
 800bab4:	2308      	movs	r3, #8
 800bab6:	623b      	str	r3, [r7, #32]
 800bab8:	230b      	movs	r3, #11
 800baba:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800babc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bac0:	009b      	lsls	r3, r3, #2
 800bac2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bac6:	e052      	b.n	800bb6e <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800bac8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800baca:	2b7f      	cmp	r3, #127	; 0x7f
 800bacc:	d914      	bls.n	800baf8 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800bace:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bad0:	2100      	movs	r1, #0
 800bad2:	4618      	mov	r0, r3
 800bad4:	f002 f86e 	bl	800dbb4 <ff_convert>
 800bad8:	4603      	mov	r3, r0
 800bada:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800badc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d004      	beq.n	800baec <create_name+0x240>
 800bae2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bae4:	3b80      	subs	r3, #128	; 0x80
 800bae6:	4a24      	ldr	r2, [pc, #144]	; (800bb78 <create_name+0x2cc>)
 800bae8:	5cd3      	ldrb	r3, [r2, r3]
 800baea:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800baec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800baf0:	f043 0302 	orr.w	r3, r3, #2
 800baf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800baf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d007      	beq.n	800bb0e <create_name+0x262>
 800bafe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb00:	4619      	mov	r1, r3
 800bb02:	481e      	ldr	r0, [pc, #120]	; (800bb7c <create_name+0x2d0>)
 800bb04:	f7fe f9c0 	bl	8009e88 <chk_chr>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d008      	beq.n	800bb20 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800bb0e:	235f      	movs	r3, #95	; 0x5f
 800bb10:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bb12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb16:	f043 0303 	orr.w	r3, r3, #3
 800bb1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bb1e:	e01b      	b.n	800bb58 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800bb20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb22:	2b40      	cmp	r3, #64	; 0x40
 800bb24:	d909      	bls.n	800bb3a <create_name+0x28e>
 800bb26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb28:	2b5a      	cmp	r3, #90	; 0x5a
 800bb2a:	d806      	bhi.n	800bb3a <create_name+0x28e>
					b |= 2;
 800bb2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bb30:	f043 0302 	orr.w	r3, r3, #2
 800bb34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bb38:	e00e      	b.n	800bb58 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800bb3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb3c:	2b60      	cmp	r3, #96	; 0x60
 800bb3e:	d90b      	bls.n	800bb58 <create_name+0x2ac>
 800bb40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb42:	2b7a      	cmp	r3, #122	; 0x7a
 800bb44:	d808      	bhi.n	800bb58 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 800bb46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bb4a:	f043 0301 	orr.w	r3, r3, #1
 800bb4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bb52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb54:	3b20      	subs	r3, #32
 800bb56:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb5e:	699a      	ldr	r2, [r3, #24]
 800bb60:	6a3b      	ldr	r3, [r7, #32]
 800bb62:	1c59      	adds	r1, r3, #1
 800bb64:	6239      	str	r1, [r7, #32]
 800bb66:	4413      	add	r3, r2
 800bb68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bb6a:	b2d2      	uxtb	r2, r2
 800bb6c:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800bb6e:	e762      	b.n	800ba36 <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 800bb70:	bf00      	nop
 800bb72:	e006      	b.n	800bb82 <create_name+0x2d6>
 800bb74:	0800e5f0 	.word	0x0800e5f0
 800bb78:	0800e6b4 	.word	0x0800e6b4
 800bb7c:	0800e5fc 	.word	0x0800e5fc
			if (si > di) break;			/* No extension */
 800bb80:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb88:	699b      	ldr	r3, [r3, #24]
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	2be5      	cmp	r3, #229	; 0xe5
 800bb8e:	d105      	bne.n	800bb9c <create_name+0x2f0>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb96:	699b      	ldr	r3, [r3, #24]
 800bb98:	2205      	movs	r2, #5
 800bb9a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	2b08      	cmp	r3, #8
 800bba0:	d104      	bne.n	800bbac <create_name+0x300>
 800bba2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bba6:	009b      	lsls	r3, r3, #2
 800bba8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800bbac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bbb0:	f003 030c 	and.w	r3, r3, #12
 800bbb4:	2b0c      	cmp	r3, #12
 800bbb6:	d005      	beq.n	800bbc4 <create_name+0x318>
 800bbb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bbbc:	f003 0303 	and.w	r3, r3, #3
 800bbc0:	2b03      	cmp	r3, #3
 800bbc2:	d105      	bne.n	800bbd0 <create_name+0x324>
		cf |= NS_LFN;
 800bbc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbc8:	f043 0302 	orr.w	r3, r3, #2
 800bbcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800bbd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbd4:	f003 0302 	and.w	r3, r3, #2
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d117      	bne.n	800bc0c <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800bbdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bbe0:	f003 0303 	and.w	r3, r3, #3
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d105      	bne.n	800bbf4 <create_name+0x348>
 800bbe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbec:	f043 0310 	orr.w	r3, r3, #16
 800bbf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800bbf4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bbf8:	f003 030c 	and.w	r3, r3, #12
 800bbfc:	2b04      	cmp	r3, #4
 800bbfe:	d105      	bne.n	800bc0c <create_name+0x360>
 800bc00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc04:	f043 0308 	orr.w	r3, r3, #8
 800bc08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc12:	699b      	ldr	r3, [r3, #24]
 800bc14:	330b      	adds	r3, #11
 800bc16:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bc1a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800bc1c:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3728      	adds	r7, #40	; 0x28
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	bf00      	nop

0800bc28 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b084      	sub	sp, #16
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	2b2f      	cmp	r3, #47	; 0x2f
 800bc38:	d003      	beq.n	800bc42 <follow_path+0x1a>
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	2b5c      	cmp	r3, #92	; 0x5c
 800bc40:	d102      	bne.n	800bc48 <follow_path+0x20>
		path++;
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	3301      	adds	r3, #1
 800bc46:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc4e:	461a      	mov	r2, r3
 800bc50:	2300      	movs	r3, #0
 800bc52:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	2b1f      	cmp	r3, #31
 800bc5a:	d80c      	bhi.n	800bc76 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800bc5c:	2100      	movs	r1, #0
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f7fe ffe9 	bl	800ac36 <dir_sdi>
 800bc64:	4603      	mov	r3, r0
 800bc66:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc6e:	461a      	mov	r2, r3
 800bc70:	2300      	movs	r3, #0
 800bc72:	6153      	str	r3, [r2, #20]
 800bc74:	e049      	b.n	800bd0a <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bc76:	463b      	mov	r3, r7
 800bc78:	4619      	mov	r1, r3
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f7ff fe16 	bl	800b8ac <create_name>
 800bc80:	4603      	mov	r3, r0
 800bc82:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800bc84:	7bfb      	ldrb	r3, [r7, #15]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d13a      	bne.n	800bd00 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f7ff fc1e 	bl	800b4cc <dir_find>
 800bc90:	4603      	mov	r3, r0
 800bc92:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc9a:	699b      	ldr	r3, [r3, #24]
 800bc9c:	7adb      	ldrb	r3, [r3, #11]
 800bc9e:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800bca0:	7bfb      	ldrb	r3, [r7, #15]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d00a      	beq.n	800bcbc <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bca6:	7bfb      	ldrb	r3, [r7, #15]
 800bca8:	2b04      	cmp	r3, #4
 800bcaa:	d12b      	bne.n	800bd04 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bcac:	7bbb      	ldrb	r3, [r7, #14]
 800bcae:	f003 0304 	and.w	r3, r3, #4
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d126      	bne.n	800bd04 <follow_path+0xdc>
 800bcb6:	2305      	movs	r3, #5
 800bcb8:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800bcba:	e023      	b.n	800bd04 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bcbc:	7bbb      	ldrb	r3, [r7, #14]
 800bcbe:	f003 0304 	and.w	r3, r3, #4
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d120      	bne.n	800bd08 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bccc:	695b      	ldr	r3, [r3, #20]
 800bcce:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	330b      	adds	r3, #11
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	f003 0310 	and.w	r3, r3, #16
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d102      	bne.n	800bce4 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 800bcde:	2305      	movs	r3, #5
 800bce0:	73fb      	strb	r3, [r7, #15]
 800bce2:	e012      	b.n	800bd0a <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	68b9      	ldr	r1, [r7, #8]
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7ff fa07 	bl	800b102 <ld_clust>
 800bcf4:	4602      	mov	r2, r0
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcfc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bcfe:	e7ba      	b.n	800bc76 <follow_path+0x4e>
			if (res != FR_OK) break;
 800bd00:	bf00      	nop
 800bd02:	e002      	b.n	800bd0a <follow_path+0xe2>
				break;
 800bd04:	bf00      	nop
 800bd06:	e000      	b.n	800bd0a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bd08:	bf00      	nop
		}
	}

	return res;
 800bd0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3710      	adds	r7, #16
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b087      	sub	sp, #28
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bd1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd20:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d031      	beq.n	800bd8e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	617b      	str	r3, [r7, #20]
 800bd30:	e002      	b.n	800bd38 <get_ldnumber+0x24>
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	3301      	adds	r3, #1
 800bd36:	617b      	str	r3, [r7, #20]
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	2b1f      	cmp	r3, #31
 800bd3e:	d903      	bls.n	800bd48 <get_ldnumber+0x34>
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	2b3a      	cmp	r3, #58	; 0x3a
 800bd46:	d1f4      	bne.n	800bd32 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	2b3a      	cmp	r3, #58	; 0x3a
 800bd4e:	d11c      	bne.n	800bd8a <get_ldnumber+0x76>
			tp = *path;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	1c5a      	adds	r2, r3, #1
 800bd5a:	60fa      	str	r2, [r7, #12]
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	3b30      	subs	r3, #48	; 0x30
 800bd60:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	2b09      	cmp	r3, #9
 800bd66:	d80e      	bhi.n	800bd86 <get_ldnumber+0x72>
 800bd68:	68fa      	ldr	r2, [r7, #12]
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d10a      	bne.n	800bd86 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d107      	bne.n	800bd86 <get_ldnumber+0x72>
					vol = (int)i;
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	3301      	adds	r3, #1
 800bd7e:	617b      	str	r3, [r7, #20]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	697a      	ldr	r2, [r7, #20]
 800bd84:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	e002      	b.n	800bd90 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bd8e:	693b      	ldr	r3, [r7, #16]
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	371c      	adds	r7, #28
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bc80      	pop	{r7}
 800bd98:	4770      	bx	lr
	...

0800bd9c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdac:	2200      	movs	r2, #0
 800bdae:	711a      	strb	r2, [r3, #4]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bdbc:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800bdbe:	6839      	ldr	r1, [r7, #0]
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f7fe fa8b 	bl	800a2dc <move_window>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d001      	beq.n	800bdd0 <check_fs+0x34>
		return 3;
 800bdcc:	2303      	movs	r3, #3
 800bdce:	e04a      	b.n	800be66 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	021b      	lsls	r3, r3, #8
 800bddc:	b21a      	sxth	r2, r3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800bde4:	b21b      	sxth	r3, r3
 800bde6:	4313      	orrs	r3, r2
 800bde8:	b21b      	sxth	r3, r3
 800bdea:	4a21      	ldr	r2, [pc, #132]	; (800be70 <check_fs+0xd4>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d001      	beq.n	800bdf4 <check_fs+0x58>
		return 2;
 800bdf0:	2302      	movs	r3, #2
 800bdf2:	e038      	b.n	800be66 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	3336      	adds	r3, #54	; 0x36
 800bdf8:	3303      	adds	r3, #3
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	061a      	lsls	r2, r3, #24
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	3336      	adds	r3, #54	; 0x36
 800be02:	3302      	adds	r3, #2
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	041b      	lsls	r3, r3, #16
 800be08:	4313      	orrs	r3, r2
 800be0a:	687a      	ldr	r2, [r7, #4]
 800be0c:	3236      	adds	r2, #54	; 0x36
 800be0e:	3201      	adds	r2, #1
 800be10:	7812      	ldrb	r2, [r2, #0]
 800be12:	0212      	lsls	r2, r2, #8
 800be14:	4313      	orrs	r3, r2
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800be1c:	4313      	orrs	r3, r2
 800be1e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800be22:	4a14      	ldr	r2, [pc, #80]	; (800be74 <check_fs+0xd8>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d101      	bne.n	800be2c <check_fs+0x90>
		return 0;
 800be28:	2300      	movs	r3, #0
 800be2a:	e01c      	b.n	800be66 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	3352      	adds	r3, #82	; 0x52
 800be30:	3303      	adds	r3, #3
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	061a      	lsls	r2, r3, #24
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	3352      	adds	r3, #82	; 0x52
 800be3a:	3302      	adds	r3, #2
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	041b      	lsls	r3, r3, #16
 800be40:	4313      	orrs	r3, r2
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	3252      	adds	r2, #82	; 0x52
 800be46:	3201      	adds	r2, #1
 800be48:	7812      	ldrb	r2, [r2, #0]
 800be4a:	0212      	lsls	r2, r2, #8
 800be4c:	4313      	orrs	r3, r2
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800be54:	4313      	orrs	r3, r2
 800be56:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800be5a:	4a06      	ldr	r2, [pc, #24]	; (800be74 <check_fs+0xd8>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d101      	bne.n	800be64 <check_fs+0xc8>
		return 0;
 800be60:	2300      	movs	r3, #0
 800be62:	e000      	b.n	800be66 <check_fs+0xca>

	return 1;
 800be64:	2301      	movs	r3, #1
}
 800be66:	4618      	mov	r0, r3
 800be68:	3708      	adds	r7, #8
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	ffffaa55 	.word	0xffffaa55
 800be74:	00544146 	.word	0x00544146

0800be78 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b096      	sub	sp, #88	; 0x58
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	60b9      	str	r1, [r7, #8]
 800be82:	4613      	mov	r3, r2
 800be84:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2200      	movs	r2, #0
 800be8a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800be8c:	68b8      	ldr	r0, [r7, #8]
 800be8e:	f7ff ff41 	bl	800bd14 <get_ldnumber>
 800be92:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800be94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be96:	2b00      	cmp	r3, #0
 800be98:	da01      	bge.n	800be9e <find_volume+0x26>
 800be9a:	230b      	movs	r3, #11
 800be9c:	e311      	b.n	800c4c2 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800be9e:	4a98      	ldr	r2, [pc, #608]	; (800c100 <find_volume+0x288>)
 800bea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bea6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d101      	bne.n	800beb2 <find_volume+0x3a>
 800beae:	230c      	movs	r3, #12
 800beb0:	e307      	b.n	800c4c2 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800beb6:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800beb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d01c      	beq.n	800befe <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800beca:	785b      	ldrb	r3, [r3, #1]
 800becc:	4618      	mov	r0, r3
 800bece:	f7fd fedf 	bl	8009c90 <disk_status>
 800bed2:	4603      	mov	r3, r0
 800bed4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bed8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bedc:	f003 0301 	and.w	r3, r3, #1
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d10c      	bne.n	800befe <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800bee4:	79fb      	ldrb	r3, [r7, #7]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d007      	beq.n	800befa <find_volume+0x82>
 800beea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800beee:	f003 0304 	and.w	r3, r3, #4
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d001      	beq.n	800befa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bef6:	230a      	movs	r3, #10
 800bef8:	e2e3      	b.n	800c4c2 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 800befa:	2300      	movs	r3, #0
 800befc:	e2e1      	b.n	800c4c2 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800befe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf04:	2200      	movs	r2, #0
 800bf06:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bf08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf0a:	b2da      	uxtb	r2, r3
 800bf0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf12:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bf14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf1a:	785b      	ldrb	r3, [r3, #1]
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7fd fed1 	bl	8009cc4 <disk_initialize>
 800bf22:	4603      	mov	r3, r0
 800bf24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800bf28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf2c:	f003 0301 	and.w	r3, r3, #1
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d001      	beq.n	800bf38 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bf34:	2303      	movs	r3, #3
 800bf36:	e2c4      	b.n	800c4c2 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800bf38:	79fb      	ldrb	r3, [r7, #7]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d007      	beq.n	800bf4e <find_volume+0xd6>
 800bf3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf42:	f003 0304 	and.w	r3, r3, #4
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d001      	beq.n	800bf4e <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800bf4a:	230a      	movs	r3, #10
 800bf4c:	e2b9      	b.n	800c4c2 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800bf4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf54:	7858      	ldrb	r0, [r3, #1]
 800bf56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf5c:	330a      	adds	r3, #10
 800bf5e:	461a      	mov	r2, r3
 800bf60:	2102      	movs	r1, #2
 800bf62:	f7fd ff15 	bl	8009d90 <disk_ioctl>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d10d      	bne.n	800bf88 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800bf6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf72:	895b      	ldrh	r3, [r3, #10]
 800bf74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf78:	d306      	bcc.n	800bf88 <find_volume+0x110>
 800bf7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf80:	895b      	ldrh	r3, [r3, #10]
 800bf82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf86:	d901      	bls.n	800bf8c <find_volume+0x114>
 800bf88:	2301      	movs	r3, #1
 800bf8a:	e29a      	b.n	800c4c2 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800bf90:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bf92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bf94:	f7ff ff02 	bl	800bd9c <check_fs>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800bf9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d153      	bne.n	800c04e <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	643b      	str	r3, [r7, #64]	; 0x40
 800bfaa:	e028      	b.n	800bffe <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800bfac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfb0:	011b      	lsls	r3, r3, #4
 800bfb2:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bfb6:	4413      	add	r3, r2
 800bfb8:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800bfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbc:	3304      	adds	r3, #4
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d012      	beq.n	800bfea <find_volume+0x172>
 800bfc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc6:	330b      	adds	r3, #11
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	061a      	lsls	r2, r3, #24
 800bfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfce:	330a      	adds	r3, #10
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	041b      	lsls	r3, r3, #16
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfd8:	3209      	adds	r2, #9
 800bfda:	7812      	ldrb	r2, [r2, #0]
 800bfdc:	0212      	lsls	r2, r2, #8
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfe2:	3208      	adds	r2, #8
 800bfe4:	7812      	ldrb	r2, [r2, #0]
 800bfe6:	431a      	orrs	r2, r3
 800bfe8:	e000      	b.n	800bfec <find_volume+0x174>
 800bfea:	2200      	movs	r2, #0
 800bfec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	3358      	adds	r3, #88	; 0x58
 800bff2:	443b      	add	r3, r7
 800bff4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800bff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bffa:	3301      	adds	r3, #1
 800bffc:	643b      	str	r3, [r7, #64]	; 0x40
 800bffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c000:	2b03      	cmp	r3, #3
 800c002:	d9d3      	bls.n	800bfac <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800c004:	2300      	movs	r3, #0
 800c006:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d002      	beq.n	800c014 <find_volume+0x19c>
 800c00e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c010:	3b01      	subs	r3, #1
 800c012:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800c014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	3358      	adds	r3, #88	; 0x58
 800c01a:	443b      	add	r3, r7
 800c01c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c020:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800c022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c024:	2b00      	cmp	r3, #0
 800c026:	d005      	beq.n	800c034 <find_volume+0x1bc>
 800c028:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c02a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c02c:	f7ff feb6 	bl	800bd9c <check_fs>
 800c030:	4603      	mov	r3, r0
 800c032:	e000      	b.n	800c036 <find_volume+0x1be>
 800c034:	2302      	movs	r3, #2
 800c036:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800c03a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d005      	beq.n	800c04e <find_volume+0x1d6>
 800c042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c044:	3301      	adds	r3, #1
 800c046:	643b      	str	r3, [r7, #64]	; 0x40
 800c048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c04a:	2b03      	cmp	r3, #3
 800c04c:	d9e2      	bls.n	800c014 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c04e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c052:	2b03      	cmp	r3, #3
 800c054:	d101      	bne.n	800c05a <find_volume+0x1e2>
 800c056:	2301      	movs	r3, #1
 800c058:	e233      	b.n	800c4c2 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800c05a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d001      	beq.n	800c066 <find_volume+0x1ee>
 800c062:	230d      	movs	r3, #13
 800c064:	e22d      	b.n	800c4c2 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c068:	7b1b      	ldrb	r3, [r3, #12]
 800c06a:	021b      	lsls	r3, r3, #8
 800c06c:	b21a      	sxth	r2, r3
 800c06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c070:	7adb      	ldrb	r3, [r3, #11]
 800c072:	b21b      	sxth	r3, r3
 800c074:	4313      	orrs	r3, r2
 800c076:	b21a      	sxth	r2, r3
 800c078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c07a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c07e:	895b      	ldrh	r3, [r3, #10]
 800c080:	b21b      	sxth	r3, r3
 800c082:	429a      	cmp	r2, r3
 800c084:	d001      	beq.n	800c08a <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 800c086:	230d      	movs	r3, #13
 800c088:	e21b      	b.n	800c4c2 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800c08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08c:	7ddb      	ldrb	r3, [r3, #23]
 800c08e:	021b      	lsls	r3, r3, #8
 800c090:	b21a      	sxth	r2, r3
 800c092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c094:	7d9b      	ldrb	r3, [r3, #22]
 800c096:	b21b      	sxth	r3, r3
 800c098:	4313      	orrs	r3, r2
 800c09a:	b21b      	sxth	r3, r3
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800c0a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d112      	bne.n	800c0cc <find_volume+0x254>
 800c0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800c0ac:	061a      	lsls	r2, r3, #24
 800c0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c0b4:	041b      	lsls	r3, r3, #16
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0ba:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800c0be:	0212      	lsls	r2, r2, #8
 800c0c0:	4313      	orrs	r3, r2
 800c0c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0c4:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800c0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0d6:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800c0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0da:	7c1a      	ldrb	r2, [r3, #16]
 800c0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0e2:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800c0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0ea:	78db      	ldrb	r3, [r3, #3]
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d009      	beq.n	800c104 <find_volume+0x28c>
 800c0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0f6:	78db      	ldrb	r3, [r3, #3]
 800c0f8:	2b02      	cmp	r3, #2
 800c0fa:	d003      	beq.n	800c104 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 800c0fc:	230d      	movs	r3, #13
 800c0fe:	e1e0      	b.n	800c4c2 <find_volume+0x64a>
 800c100:	20002230 	.word	0x20002230
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800c104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c10a:	78db      	ldrb	r3, [r3, #3]
 800c10c:	461a      	mov	r2, r3
 800c10e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c110:	fb02 f303 	mul.w	r3, r2, r3
 800c114:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800c116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c118:	7b5a      	ldrb	r2, [r3, #13]
 800c11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c120:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800c122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c128:	789b      	ldrb	r3, [r3, #2]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d00c      	beq.n	800c148 <find_volume+0x2d0>
 800c12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c134:	789b      	ldrb	r3, [r3, #2]
 800c136:	461a      	mov	r2, r3
 800c138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c13a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c13e:	789b      	ldrb	r3, [r3, #2]
 800c140:	3b01      	subs	r3, #1
 800c142:	4013      	ands	r3, r2
 800c144:	2b00      	cmp	r3, #0
 800c146:	d001      	beq.n	800c14c <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 800c148:	230d      	movs	r3, #13
 800c14a:	e1ba      	b.n	800c4c2 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800c14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14e:	7c9b      	ldrb	r3, [r3, #18]
 800c150:	021b      	lsls	r3, r3, #8
 800c152:	b21a      	sxth	r2, r3
 800c154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c156:	7c5b      	ldrb	r3, [r3, #17]
 800c158:	b21b      	sxth	r3, r3
 800c15a:	4313      	orrs	r3, r2
 800c15c:	b21b      	sxth	r3, r3
 800c15e:	b29a      	uxth	r2, r3
 800c160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c166:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800c168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c16a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c16e:	891b      	ldrh	r3, [r3, #8]
 800c170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c172:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c176:	8952      	ldrh	r2, [r2, #10]
 800c178:	0952      	lsrs	r2, r2, #5
 800c17a:	b292      	uxth	r2, r2
 800c17c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c180:	fb01 f202 	mul.w	r2, r1, r2
 800c184:	1a9b      	subs	r3, r3, r2
 800c186:	b29b      	uxth	r3, r3
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d001      	beq.n	800c190 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 800c18c:	230d      	movs	r3, #13
 800c18e:	e198      	b.n	800c4c2 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800c190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c192:	7d1b      	ldrb	r3, [r3, #20]
 800c194:	021b      	lsls	r3, r3, #8
 800c196:	b21a      	sxth	r2, r3
 800c198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c19a:	7cdb      	ldrb	r3, [r3, #19]
 800c19c:	b21b      	sxth	r3, r3
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	b21b      	sxth	r3, r3
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800c1a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d112      	bne.n	800c1d2 <find_volume+0x35a>
 800c1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ae:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800c1b2:	061a      	lsls	r2, r3, #24
 800c1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800c1ba:	041b      	lsls	r3, r3, #16
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1c0:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800c1c4:	0212      	lsls	r2, r2, #8
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1ca:	f892 2020 	ldrb.w	r2, [r2, #32]
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800c1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d4:	7bdb      	ldrb	r3, [r3, #15]
 800c1d6:	021b      	lsls	r3, r3, #8
 800c1d8:	b21a      	sxth	r2, r3
 800c1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1dc:	7b9b      	ldrb	r3, [r3, #14]
 800c1de:	b21b      	sxth	r3, r3
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	b21b      	sxth	r3, r3
 800c1e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800c1e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d101      	bne.n	800c1f0 <find_volume+0x378>
 800c1ec:	230d      	movs	r3, #13
 800c1ee:	e168      	b.n	800c4c2 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800c1f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c1f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1f4:	4413      	add	r3, r2
 800c1f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c1fc:	8911      	ldrh	r1, [r2, #8]
 800c1fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c200:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c204:	8952      	ldrh	r2, [r2, #10]
 800c206:	0952      	lsrs	r2, r2, #5
 800c208:	b292      	uxth	r2, r2
 800c20a:	fbb1 f2f2 	udiv	r2, r1, r2
 800c20e:	b292      	uxth	r2, r2
 800c210:	4413      	add	r3, r2
 800c212:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c218:	429a      	cmp	r2, r3
 800c21a:	d201      	bcs.n	800c220 <find_volume+0x3a8>
 800c21c:	230d      	movs	r3, #13
 800c21e:	e150      	b.n	800c4c2 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800c220:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c224:	1ad3      	subs	r3, r2, r3
 800c226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c228:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c22c:	7892      	ldrb	r2, [r2, #2]
 800c22e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c232:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800c234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c236:	2b00      	cmp	r3, #0
 800c238:	d101      	bne.n	800c23e <find_volume+0x3c6>
 800c23a:	230d      	movs	r3, #13
 800c23c:	e141      	b.n	800c4c2 <find_volume+0x64a>
	fmt = FS_FAT12;
 800c23e:	2301      	movs	r3, #1
 800c240:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800c244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c246:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d902      	bls.n	800c254 <find_volume+0x3dc>
 800c24e:	2302      	movs	r3, #2
 800c250:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800c254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c256:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d902      	bls.n	800c264 <find_volume+0x3ec>
 800c25e:	2303      	movs	r3, #3
 800c260:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800c264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c266:	3302      	adds	r3, #2
 800c268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c26a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c26e:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 800c270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c276:	461a      	mov	r2, r3
 800c278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c27a:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800c27c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c27e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c280:	4413      	add	r3, r2
 800c282:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c284:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c288:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 800c28a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28e:	4413      	add	r3, r2
 800c290:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c292:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c296:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 800c298:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c29c:	2b03      	cmp	r3, #3
 800c29e:	d124      	bne.n	800c2ea <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800c2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2a6:	891b      	ldrh	r3, [r3, #8]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d001      	beq.n	800c2b0 <find_volume+0x438>
 800c2ac:	230d      	movs	r3, #13
 800c2ae:	e108      	b.n	800c4c2 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800c2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c2b6:	061a      	lsls	r2, r3, #24
 800c2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ba:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800c2be:	041b      	lsls	r3, r3, #16
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2c4:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800c2c8:	0212      	lsls	r2, r2, #8
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2ce:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c2da:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800c2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2e2:	695b      	ldr	r3, [r3, #20]
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	647b      	str	r3, [r7, #68]	; 0x44
 800c2e8:	e02b      	b.n	800c342 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800c2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2f0:	891b      	ldrh	r3, [r3, #8]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d101      	bne.n	800c2fa <find_volume+0x482>
 800c2f6:	230d      	movs	r3, #13
 800c2f8:	e0e3      	b.n	800c4c2 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800c2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c300:	6a1a      	ldr	r2, [r3, #32]
 800c302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c304:	4413      	add	r3, r2
 800c306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c308:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c30c:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c30e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c312:	2b02      	cmp	r3, #2
 800c314:	d105      	bne.n	800c322 <find_volume+0x4aa>
 800c316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c31c:	695b      	ldr	r3, [r3, #20]
 800c31e:	005b      	lsls	r3, r3, #1
 800c320:	e00e      	b.n	800c340 <find_volume+0x4c8>
 800c322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c328:	695a      	ldr	r2, [r3, #20]
 800c32a:	4613      	mov	r3, r2
 800c32c:	005b      	lsls	r3, r3, #1
 800c32e:	4413      	add	r3, r2
 800c330:	085a      	lsrs	r2, r3, #1
 800c332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c338:	695b      	ldr	r3, [r3, #20]
 800c33a:	f003 0301 	and.w	r3, r3, #1
 800c33e:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800c340:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800c342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c348:	699a      	ldr	r2, [r3, #24]
 800c34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c350:	895b      	ldrh	r3, [r3, #10]
 800c352:	4619      	mov	r1, r3
 800c354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c356:	440b      	add	r3, r1
 800c358:	3b01      	subs	r3, #1
 800c35a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c35c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800c360:	8949      	ldrh	r1, [r1, #10]
 800c362:	fbb3 f3f1 	udiv	r3, r3, r1
 800c366:	429a      	cmp	r2, r3
 800c368:	d201      	bcs.n	800c36e <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 800c36a:	230d      	movs	r3, #13
 800c36c:	e0a9      	b.n	800c4c2 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800c36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c374:	461a      	mov	r2, r3
 800c376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c37a:	6113      	str	r3, [r2, #16]
 800c37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c382:	691b      	ldr	r3, [r3, #16]
 800c384:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c386:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c38a:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800c38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c392:	2280      	movs	r2, #128	; 0x80
 800c394:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800c396:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c39a:	2b03      	cmp	r3, #3
 800c39c:	d17a      	bne.n	800c494 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800c39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c3a4:	021b      	lsls	r3, r3, #8
 800c3a6:	b21a      	sxth	r2, r3
 800c3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c3ae:	b21b      	sxth	r3, r3
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	b21b      	sxth	r3, r3
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	d16d      	bne.n	800c494 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 800c3b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	4619      	mov	r1, r3
 800c3be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c3c0:	f7fd ff8c 	bl	800a2dc <move_window>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d164      	bne.n	800c494 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 800c3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d6:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800c3da:	021b      	lsls	r3, r3, #8
 800c3dc:	b21a      	sxth	r2, r3
 800c3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800c3e4:	b21b      	sxth	r3, r3
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	b21b      	sxth	r3, r3
 800c3ea:	4a38      	ldr	r2, [pc, #224]	; (800c4cc <find_volume+0x654>)
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d151      	bne.n	800c494 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800c3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f2:	78db      	ldrb	r3, [r3, #3]
 800c3f4:	061a      	lsls	r2, r3, #24
 800c3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f8:	789b      	ldrb	r3, [r3, #2]
 800c3fa:	041b      	lsls	r3, r3, #16
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c400:	7852      	ldrb	r2, [r2, #1]
 800c402:	0212      	lsls	r2, r2, #8
 800c404:	4313      	orrs	r3, r2
 800c406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c408:	7812      	ldrb	r2, [r2, #0]
 800c40a:	4313      	orrs	r3, r2
 800c40c:	4a30      	ldr	r2, [pc, #192]	; (800c4d0 <find_volume+0x658>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d140      	bne.n	800c494 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800c412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c414:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800c418:	061a      	lsls	r2, r3, #24
 800c41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c41c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800c420:	041b      	lsls	r3, r3, #16
 800c422:	4313      	orrs	r3, r2
 800c424:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c426:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800c42a:	0212      	lsls	r2, r2, #8
 800c42c:	4313      	orrs	r3, r2
 800c42e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c430:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800c434:	4313      	orrs	r3, r2
 800c436:	4a27      	ldr	r2, [pc, #156]	; (800c4d4 <find_volume+0x65c>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d12b      	bne.n	800c494 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800c43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c43e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800c442:	061a      	lsls	r2, r3, #24
 800c444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c446:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800c44a:	041b      	lsls	r3, r3, #16
 800c44c:	4313      	orrs	r3, r2
 800c44e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c450:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800c454:	0212      	lsls	r2, r2, #8
 800c456:	4313      	orrs	r3, r2
 800c458:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c45a:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800c45e:	4313      	orrs	r3, r2
 800c460:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c462:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c466:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800c468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c46a:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800c46e:	061a      	lsls	r2, r3, #24
 800c470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c472:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800c476:	041b      	lsls	r3, r3, #16
 800c478:	4313      	orrs	r3, r2
 800c47a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c47c:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800c480:	0212      	lsls	r2, r2, #8
 800c482:	4313      	orrs	r3, r2
 800c484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c486:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800c48a:	4313      	orrs	r3, r2
 800c48c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c48e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c492:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800c494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c49a:	461a      	mov	r2, r3
 800c49c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c4a0:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800c4a2:	4b0d      	ldr	r3, [pc, #52]	; (800c4d8 <find_volume+0x660>)
 800c4a4:	881b      	ldrh	r3, [r3, #0]
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	b29a      	uxth	r2, r3
 800c4aa:	4b0b      	ldr	r3, [pc, #44]	; (800c4d8 <find_volume+0x660>)
 800c4ac:	801a      	strh	r2, [r3, #0]
 800c4ae:	4b0a      	ldr	r3, [pc, #40]	; (800c4d8 <find_volume+0x660>)
 800c4b0:	881a      	ldrh	r2, [r3, #0]
 800c4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4b8:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800c4ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c4bc:	f7fd fe92 	bl	800a1e4 <clear_lock>
#endif

	return FR_OK;
 800c4c0:	2300      	movs	r3, #0
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3758      	adds	r7, #88	; 0x58
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	ffffaa55 	.word	0xffffaa55
 800c4d0:	41615252 	.word	0x41615252
 800c4d4:	61417272 	.word	0x61417272
 800c4d8:	20002234 	.word	0x20002234

0800c4dc <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d02a      	beq.n	800c544 <validate+0x68>
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d024      	beq.n	800c544 <validate+0x68>
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d01b      	beq.n	800c544 <validate+0x68>
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c518:	88da      	ldrh	r2, [r3, #6]
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c520:	889b      	ldrh	r3, [r3, #4]
 800c522:	429a      	cmp	r2, r3
 800c524:	d10e      	bne.n	800c544 <validate+0x68>
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c532:	785b      	ldrb	r3, [r3, #1]
 800c534:	4618      	mov	r0, r3
 800c536:	f7fd fbab 	bl	8009c90 <disk_status>
 800c53a:	4603      	mov	r3, r0
 800c53c:	f003 0301 	and.w	r3, r3, #1
 800c540:	2b00      	cmp	r3, #0
 800c542:	d001      	beq.n	800c548 <validate+0x6c>
		return FR_INVALID_OBJECT;
 800c544:	2309      	movs	r3, #9
 800c546:	e000      	b.n	800c54a <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800c548:	2300      	movs	r3, #0
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3710      	adds	r7, #16
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
	...

0800c554 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b088      	sub	sp, #32
 800c558:	af00      	add	r7, sp, #0
 800c55a:	60f8      	str	r0, [r7, #12]
 800c55c:	60b9      	str	r1, [r7, #8]
 800c55e:	4613      	mov	r3, r2
 800c560:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800c566:	f107 0310 	add.w	r3, r7, #16
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7ff fbd2 	bl	800bd14 <get_ldnumber>
 800c570:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c572:	69fb      	ldr	r3, [r7, #28]
 800c574:	2b00      	cmp	r3, #0
 800c576:	da01      	bge.n	800c57c <f_mount+0x28>
 800c578:	230b      	movs	r3, #11
 800c57a:	e02f      	b.n	800c5dc <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c57c:	4a19      	ldr	r2, [pc, #100]	; (800c5e4 <f_mount+0x90>)
 800c57e:	69fb      	ldr	r3, [r7, #28]
 800c580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c584:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c586:	69bb      	ldr	r3, [r7, #24]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d007      	beq.n	800c59c <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800c58c:	69b8      	ldr	r0, [r7, #24]
 800c58e:	f7fd fe29 	bl	800a1e4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c592:	69bb      	ldr	r3, [r7, #24]
 800c594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c598:	2200      	movs	r2, #0
 800c59a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d004      	beq.n	800c5ac <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c5ac:	68fa      	ldr	r2, [r7, #12]
 800c5ae:	490d      	ldr	r1, [pc, #52]	; (800c5e4 <f_mount+0x90>)
 800c5b0:	69fb      	ldr	r3, [r7, #28]
 800c5b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d002      	beq.n	800c5c2 <f_mount+0x6e>
 800c5bc:	79fb      	ldrb	r3, [r7, #7]
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	d001      	beq.n	800c5c6 <f_mount+0x72>
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	e00a      	b.n	800c5dc <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800c5c6:	f107 0108 	add.w	r1, r7, #8
 800c5ca:	f107 030c 	add.w	r3, r7, #12
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f7ff fc51 	bl	800be78 <find_volume>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c5da:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3720      	adds	r7, #32
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	20002230 	.word	0x20002230

0800c5e8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800c5ee:	b086      	sub	sp, #24
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c5f6:	f843 0c4c 	str.w	r0, [r3, #-76]
 800c5fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c5fe:	f843 1c50 	str.w	r1, [r3, #-80]
 800c602:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c606:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800c60a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c60e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d101      	bne.n	800c61a <f_open+0x32>
 800c616:	2309      	movs	r3, #9
 800c618:	e2f7      	b.n	800cc0a <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 800c61a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c61e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c626:	461a      	mov	r2, r3
 800c628:	2300      	movs	r3, #0
 800c62a:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800c62c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c630:	461a      	mov	r2, r3
 800c632:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c636:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c63a:	f003 031f 	and.w	r3, r3, #31
 800c63e:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800c642:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c646:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c64a:	f023 0301 	bic.w	r3, r3, #1
 800c64e:	b2da      	uxtb	r2, r3
 800c650:	f107 0118 	add.w	r1, r7, #24
 800c654:	3910      	subs	r1, #16
 800c656:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c65a:	3b18      	subs	r3, #24
 800c65c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c660:	4618      	mov	r0, r3
 800c662:	f7ff fc09 	bl	800be78 <find_volume>
 800c666:	4603      	mov	r3, r0
 800c668:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c66c:	f102 0217 	add.w	r2, r2, #23
 800c670:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800c672:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c676:	f103 0317 	add.w	r3, r3, #23
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	f040 82bf 	bne.w	800cc00 <f_open+0x618>
		INIT_BUF(dj);
 800c682:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c686:	461a      	mov	r2, r3
 800c688:	f107 0318 	add.w	r3, r7, #24
 800c68c:	3b04      	subs	r3, #4
 800c68e:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 800c692:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c696:	461a      	mov	r2, r3
 800c698:	4bd4      	ldr	r3, [pc, #848]	; (800c9ec <f_open+0x404>)
 800c69a:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 800c69e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c6a2:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800c6a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c6aa:	3b18      	subs	r3, #24
 800c6ac:	4611      	mov	r1, r2
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7ff faba 	bl	800bc28 <follow_path>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c6ba:	f102 0217 	add.w	r2, r2, #23
 800c6be:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800c6c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c6c4:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 800c6c8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c6cc:	f102 0210 	add.w	r2, r2, #16
 800c6d0:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c6d2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c6d6:	f103 0317 	add.w	r3, r3, #23
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d126      	bne.n	800c72e <f_open+0x146>
			if (!dir)	/* Default directory itself */
 800c6e0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c6e4:	f103 0310 	add.w	r3, r3, #16
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d106      	bne.n	800c6fc <f_open+0x114>
				res = FR_INVALID_NAME;
 800c6ee:	2306      	movs	r3, #6
 800c6f0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c6f4:	f102 0217 	add.w	r2, r2, #23
 800c6f8:	7013      	strb	r3, [r2, #0]
 800c6fa:	e018      	b.n	800c72e <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c6fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c700:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c704:	f023 0301 	bic.w	r3, r3, #1
 800c708:	2b00      	cmp	r3, #0
 800c70a:	bf14      	ite	ne
 800c70c:	2301      	movne	r3, #1
 800c70e:	2300      	moveq	r3, #0
 800c710:	b2db      	uxtb	r3, r3
 800c712:	461a      	mov	r2, r3
 800c714:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c718:	3b18      	subs	r3, #24
 800c71a:	4611      	mov	r1, r2
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7fd fbcd 	bl	8009ebc <chk_lock>
 800c722:	4603      	mov	r3, r0
 800c724:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c728:	f102 0217 	add.w	r2, r2, #23
 800c72c:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c72e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c732:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c736:	f003 031c 	and.w	r3, r3, #28
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	f000 813c 	beq.w	800c9b8 <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 800c740:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c744:	f103 0317 	add.w	r3, r3, #23
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d02e      	beq.n	800c7ac <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800c74e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c752:	f103 0317 	add.w	r3, r3, #23
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	2b04      	cmp	r3, #4
 800c75a:	d112      	bne.n	800c782 <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c75c:	f7fd fc1e 	bl	8009f9c <enq_lock>
 800c760:	4603      	mov	r3, r0
 800c762:	2b00      	cmp	r3, #0
 800c764:	d007      	beq.n	800c776 <f_open+0x18e>
 800c766:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c76a:	3b18      	subs	r3, #24
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7fe ff79 	bl	800b664 <dir_register>
 800c772:	4603      	mov	r3, r0
 800c774:	e000      	b.n	800c778 <f_open+0x190>
 800c776:	2312      	movs	r3, #18
 800c778:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c77c:	f102 0217 	add.w	r2, r2, #23
 800c780:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c782:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c786:	461a      	mov	r2, r3
 800c788:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c78c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c790:	f043 0308 	orr.w	r3, r3, #8
 800c794:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 800c798:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c79c:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 800c7a0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c7a4:	f102 0210 	add.w	r2, r2, #16
 800c7a8:	6013      	str	r3, [r2, #0]
 800c7aa:	e01f      	b.n	800c7ec <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c7ac:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c7b0:	f103 0310 	add.w	r3, r3, #16
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	330b      	adds	r3, #11
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	f003 0311 	and.w	r3, r3, #17
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d006      	beq.n	800c7d0 <f_open+0x1e8>
					res = FR_DENIED;
 800c7c2:	2307      	movs	r3, #7
 800c7c4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c7c8:	f102 0217 	add.w	r2, r2, #23
 800c7cc:	7013      	strb	r3, [r2, #0]
 800c7ce:	e00d      	b.n	800c7ec <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800c7d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c7d4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c7d8:	f003 0304 	and.w	r3, r3, #4
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d005      	beq.n	800c7ec <f_open+0x204>
						res = FR_EXIST;
 800c7e0:	2308      	movs	r3, #8
 800c7e2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c7e6:	f102 0217 	add.w	r2, r2, #23
 800c7ea:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c7ec:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c7f0:	f103 0317 	add.w	r3, r3, #23
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	f040 8113 	bne.w	800ca22 <f_open+0x43a>
 800c7fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c800:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c804:	f003 0308 	and.w	r3, r3, #8
 800c808:	2b00      	cmp	r3, #0
 800c80a:	f000 810a 	beq.w	800ca22 <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 800c80e:	f7fa ff35 	bl	800767c <get_fattime>
 800c812:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c816:	f103 030c 	add.w	r3, r3, #12
 800c81a:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800c81c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c820:	f103 0310 	add.w	r3, r3, #16
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	330e      	adds	r3, #14
 800c828:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c82c:	f102 020c 	add.w	r2, r2, #12
 800c830:	6812      	ldr	r2, [r2, #0]
 800c832:	b2d2      	uxtb	r2, r2
 800c834:	701a      	strb	r2, [r3, #0]
 800c836:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c83a:	f103 030c 	add.w	r3, r3, #12
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	b29b      	uxth	r3, r3
 800c842:	0a1b      	lsrs	r3, r3, #8
 800c844:	b29a      	uxth	r2, r3
 800c846:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c84a:	f103 0310 	add.w	r3, r3, #16
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	330f      	adds	r3, #15
 800c852:	b2d2      	uxtb	r2, r2
 800c854:	701a      	strb	r2, [r3, #0]
 800c856:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c85a:	f103 030c 	add.w	r3, r3, #12
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	0c1a      	lsrs	r2, r3, #16
 800c862:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c866:	f103 0310 	add.w	r3, r3, #16
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	3310      	adds	r3, #16
 800c86e:	b2d2      	uxtb	r2, r2
 800c870:	701a      	strb	r2, [r3, #0]
 800c872:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c876:	f103 030c 	add.w	r3, r3, #12
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	0e1a      	lsrs	r2, r3, #24
 800c87e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c882:	f103 0310 	add.w	r3, r3, #16
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	3311      	adds	r3, #17
 800c88a:	b2d2      	uxtb	r2, r2
 800c88c:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800c88e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c892:	f103 0310 	add.w	r3, r3, #16
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	330b      	adds	r3, #11
 800c89a:	2200      	movs	r2, #0
 800c89c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800c89e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c8a2:	f103 0310 	add.w	r3, r3, #16
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	331c      	adds	r3, #28
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	701a      	strb	r2, [r3, #0]
 800c8ae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c8b2:	f103 0310 	add.w	r3, r3, #16
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	331d      	adds	r3, #29
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	701a      	strb	r2, [r3, #0]
 800c8be:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c8c2:	f103 0310 	add.w	r3, r3, #16
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	331e      	adds	r3, #30
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	701a      	strb	r2, [r3, #0]
 800c8ce:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c8d2:	f103 0310 	add.w	r3, r3, #16
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	331f      	adds	r3, #31
 800c8da:	2200      	movs	r2, #0
 800c8dc:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800c8de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c8e2:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800c8e6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c8ea:	f102 0210 	add.w	r2, r2, #16
 800c8ee:	6811      	ldr	r1, [r2, #0]
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f7fe fc06 	bl	800b102 <ld_clust>
 800c8f6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c8fa:	f103 0308 	add.w	r3, r3, #8
 800c8fe:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800c900:	2100      	movs	r1, #0
 800c902:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c906:	f103 0310 	add.w	r3, r3, #16
 800c90a:	6818      	ldr	r0, [r3, #0]
 800c90c:	f7fe fc27 	bl	800b15e <st_clust>
				dj.fs->wflag = 1;
 800c910:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c914:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800c918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c91c:	2201      	movs	r2, #1
 800c91e:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 800c920:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c924:	f103 0308 	add.w	r3, r3, #8
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d079      	beq.n	800ca22 <f_open+0x43a>
					dw = dj.fs->winsect;
 800c92e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c932:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800c936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c93c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c940:	f102 020c 	add.w	r2, r2, #12
 800c944:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800c946:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c94a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800c94e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c952:	f102 0208 	add.w	r2, r2, #8
 800c956:	6811      	ldr	r1, [r2, #0]
 800c958:	4618      	mov	r0, r3
 800c95a:	f7fe f823 	bl	800a9a4 <remove_chain>
 800c95e:	4603      	mov	r3, r0
 800c960:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c964:	f102 0217 	add.w	r2, r2, #23
 800c968:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800c96a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c96e:	f103 0317 	add.w	r3, r3, #23
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d154      	bne.n	800ca22 <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800c978:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c97c:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 800c980:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c984:	f103 0308 	add.w	r3, r3, #8
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	3b01      	subs	r3, #1
 800c98c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c990:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 800c992:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c996:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800c99a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c99e:	f102 020c 	add.w	r2, r2, #12
 800c9a2:	6811      	ldr	r1, [r2, #0]
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f7fd fc99 	bl	800a2dc <move_window>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c9b0:	f102 0217 	add.w	r2, r2, #23
 800c9b4:	7013      	strb	r3, [r2, #0]
 800c9b6:	e034      	b.n	800ca22 <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800c9b8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c9bc:	f103 0317 	add.w	r3, r3, #23
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d12d      	bne.n	800ca22 <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800c9c6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800c9ca:	f103 0310 	add.w	r3, r3, #16
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	330b      	adds	r3, #11
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	f003 0310 	and.w	r3, r3, #16
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d009      	beq.n	800c9f0 <f_open+0x408>
					res = FR_NO_FILE;
 800c9dc:	2304      	movs	r3, #4
 800c9de:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800c9e2:	f102 0217 	add.w	r2, r2, #23
 800c9e6:	7013      	strb	r3, [r2, #0]
 800c9e8:	e01b      	b.n	800ca22 <f_open+0x43a>
 800c9ea:	bf00      	nop
 800c9ec:	20002250 	.word	0x20002250
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800c9f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c9f4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c9f8:	f003 0302 	and.w	r3, r3, #2
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d010      	beq.n	800ca22 <f_open+0x43a>
 800ca00:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ca04:	f103 0310 	add.w	r3, r3, #16
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	330b      	adds	r3, #11
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	f003 0301 	and.w	r3, r3, #1
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d005      	beq.n	800ca22 <f_open+0x43a>
						res = FR_DENIED;
 800ca16:	2307      	movs	r3, #7
 800ca18:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ca1c:	f102 0217 	add.w	r2, r2, #23
 800ca20:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800ca22:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ca26:	f103 0317 	add.w	r3, r3, #23
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d157      	bne.n	800cae0 <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ca30:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ca34:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800ca38:	f003 0308 	and.w	r3, r3, #8
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d00a      	beq.n	800ca56 <f_open+0x46e>
				mode |= FA__WRITTEN;
 800ca40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ca44:	461a      	mov	r2, r3
 800ca46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ca4a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800ca4e:	f043 0320 	orr.w	r3, r3, #32
 800ca52:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800ca56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ca5a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800ca5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca64:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ca68:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800ca6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ca70:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 800ca72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ca76:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800ca7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca7e:	461a      	mov	r2, r3
 800ca80:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ca84:	f103 0310 	add.w	r3, r3, #16
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ca8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ca90:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800ca94:	f023 0301 	bic.w	r3, r3, #1
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	bf14      	ite	ne
 800ca9c:	2301      	movne	r3, #1
 800ca9e:	2300      	moveq	r3, #0
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	461a      	mov	r2, r3
 800caa4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800caa8:	3b18      	subs	r3, #24
 800caaa:	4611      	mov	r1, r2
 800caac:	4618      	mov	r0, r3
 800caae:	f7fd fa99 	bl	8009fe4 <inc_lock>
 800cab2:	4602      	mov	r2, r0
 800cab4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800cab8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800cabc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cac0:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800cac2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800cac6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800caca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d105      	bne.n	800cae0 <f_open+0x4f8>
 800cad4:	2302      	movs	r3, #2
 800cad6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cada:	f102 0217 	add.w	r2, r2, #23
 800cade:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800cae0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cae4:	f103 0317 	add.w	r3, r3, #23
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	2b00      	cmp	r3, #0
 800caec:	f040 8088 	bne.w	800cc00 <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 800caf0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800caf4:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800caf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cafc:	461a      	mov	r2, r3
 800cafe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800cb02:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800cb06:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 800cb08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800cb0c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800cb10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb14:	2200      	movs	r2, #0
 800cb16:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800cb18:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800cb1c:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800cb20:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cb24:	f102 0210 	add.w	r2, r2, #16
 800cb28:	6811      	ldr	r1, [r2, #0]
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7fe fae9 	bl	800b102 <ld_clust>
 800cb30:	4602      	mov	r2, r0
 800cb32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800cb36:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800cb3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb3e:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800cb40:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cb44:	f103 0310 	add.w	r3, r3, #16
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	331f      	adds	r3, #31
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	061a      	lsls	r2, r3, #24
 800cb50:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cb54:	f103 0310 	add.w	r3, r3, #16
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	331e      	adds	r3, #30
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	041b      	lsls	r3, r3, #16
 800cb60:	4313      	orrs	r3, r2
 800cb62:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cb66:	f102 0210 	add.w	r2, r2, #16
 800cb6a:	6812      	ldr	r2, [r2, #0]
 800cb6c:	321d      	adds	r2, #29
 800cb6e:	7812      	ldrb	r2, [r2, #0]
 800cb70:	0212      	lsls	r2, r2, #8
 800cb72:	4313      	orrs	r3, r2
 800cb74:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800cb78:	f102 0210 	add.w	r2, r2, #16
 800cb7c:	6812      	ldr	r2, [r2, #0]
 800cb7e:	321c      	adds	r2, #28
 800cb80:	7812      	ldrb	r2, [r2, #0]
 800cb82:	4313      	orrs	r3, r2
 800cb84:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800cb88:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800cb8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cb90:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 800cb92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800cb96:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800cb9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb9e:	461a      	mov	r2, r3
 800cba0:	2300      	movs	r3, #0
 800cba2:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 800cba4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800cba8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800cbac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800cbb6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800cbba:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800cbbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800cbc8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800cbcc:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800cbd0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800cbd4:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800cbd8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cbdc:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800cbde:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800cbe2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800cbe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbf0:	88da      	ldrh	r2, [r3, #6]
 800cbf2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800cbf6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800cbfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbfe:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800cc00:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800cc04:	f103 0317 	add.w	r3, r3, #23
 800cc08:	781b      	ldrb	r3, [r3, #0]
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800cc10:	3718      	adds	r7, #24
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}
 800cc16:	bf00      	nop

0800cc18 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b08a      	sub	sp, #40	; 0x28
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	60f8      	str	r0, [r7, #12]
 800cc20:	60b9      	str	r1, [r7, #8]
 800cc22:	607a      	str	r2, [r7, #4]
 800cc24:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800cc30:	68f8      	ldr	r0, [r7, #12]
 800cc32:	f7ff fc53 	bl	800c4dc <validate>
 800cc36:	4603      	mov	r3, r0
 800cc38:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800cc3a:	7dfb      	ldrb	r3, [r7, #23]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d001      	beq.n	800cc44 <f_write+0x2c>
 800cc40:	7dfb      	ldrb	r3, [r7, #23]
 800cc42:	e21e      	b.n	800d082 <f_write+0x46a>
	if (fp->err)							/* Check error */
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc4a:	79db      	ldrb	r3, [r3, #7]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d004      	beq.n	800cc5a <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc56:	79db      	ldrb	r3, [r3, #7]
 800cc58:	e213      	b.n	800d082 <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc60:	799b      	ldrb	r3, [r3, #6]
 800cc62:	f003 0302 	and.w	r3, r3, #2
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d101      	bne.n	800cc6e <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800cc6a:	2307      	movs	r3, #7
 800cc6c:	e209      	b.n	800d082 <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc74:	689a      	ldr	r2, [r3, #8]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	441a      	add	r2, r3
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc80:	689b      	ldr	r3, [r3, #8]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	f080 81d9 	bcs.w	800d03a <f_write+0x422>
 800cc88:	2300      	movs	r3, #0
 800cc8a:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800cc8c:	e1d5      	b.n	800d03a <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc94:	689b      	ldr	r3, [r3, #8]
 800cc96:	68fa      	ldr	r2, [r7, #12]
 800cc98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cc9c:	6812      	ldr	r2, [r2, #0]
 800cc9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cca2:	8952      	ldrh	r2, [r2, #10]
 800cca4:	fbb3 f1f2 	udiv	r1, r3, r2
 800cca8:	fb01 f202 	mul.w	r2, r1, r2
 800ccac:	1a9b      	subs	r3, r3, r2
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	f040 8169 	bne.w	800cf86 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccba:	689b      	ldr	r3, [r3, #8]
 800ccbc:	68fa      	ldr	r2, [r7, #12]
 800ccbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ccc2:	6812      	ldr	r2, [r2, #0]
 800ccc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ccc8:	8952      	ldrh	r2, [r2, #10]
 800ccca:	fbb3 f3f2 	udiv	r3, r3, r2
 800ccce:	b2da      	uxtb	r2, r3
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccdc:	789b      	ldrb	r3, [r3, #2]
 800ccde:	3b01      	subs	r3, #1
 800cce0:	b2db      	uxtb	r3, r3
 800cce2:	4013      	ands	r3, r2
 800cce4:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800cce6:	7dbb      	ldrb	r3, [r7, #22]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d15f      	bne.n	800cdac <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccf2:	689b      	ldr	r3, [r3, #8]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d111      	bne.n	800cd1c <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccfe:	691b      	ldr	r3, [r3, #16]
 800cd00:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800cd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d126      	bne.n	800cd56 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	2100      	movs	r1, #0
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7fd fea7 	bl	800aa66 <create_chain>
 800cd18:	6278      	str	r0, [r7, #36]	; 0x24
 800cd1a:	e01c      	b.n	800cd56 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d009      	beq.n	800cd3c <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd2e:	689b      	ldr	r3, [r3, #8]
 800cd30:	4619      	mov	r1, r3
 800cd32:	68f8      	ldr	r0, [r7, #12]
 800cd34:	f7fd ff3f 	bl	800abb6 <clmt_clust>
 800cd38:	6278      	str	r0, [r7, #36]	; 0x24
 800cd3a:	e00c      	b.n	800cd56 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd4a:	695b      	ldr	r3, [r3, #20]
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	4610      	mov	r0, r2
 800cd50:	f7fd fe89 	bl	800aa66 <create_chain>
 800cd54:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	f000 8173 	beq.w	800d044 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800cd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	d106      	bne.n	800cd72 <f_write+0x15a>
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd6a:	2202      	movs	r2, #2
 800cd6c:	71da      	strb	r2, [r3, #7]
 800cd6e:	2302      	movs	r3, #2
 800cd70:	e187      	b.n	800d082 <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800cd72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd78:	d106      	bne.n	800cd88 <f_write+0x170>
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd80:	2201      	movs	r2, #1
 800cd82:	71da      	strb	r2, [r3, #7]
 800cd84:	2301      	movs	r3, #1
 800cd86:	e17c      	b.n	800d082 <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd8e:	461a      	mov	r2, r3
 800cd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd92:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd9a:	691b      	ldr	r3, [r3, #16]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d105      	bne.n	800cdac <f_write+0x194>
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cda6:	461a      	mov	r2, r3
 800cda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdaa:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdb2:	799b      	ldrb	r3, [r3, #6]
 800cdb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d023      	beq.n	800ce04 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdc8:	7858      	ldrb	r0, [r3, #1]
 800cdca:	68f9      	ldr	r1, [r7, #12]
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdd2:	699a      	ldr	r2, [r3, #24]
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	f7fc ffbb 	bl	8009d50 <disk_write>
 800cdda:	4603      	mov	r3, r0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d006      	beq.n	800cdee <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cde6:	2201      	movs	r2, #1
 800cde8:	71da      	strb	r2, [r3, #7]
 800cdea:	2301      	movs	r3, #1
 800cdec:	e149      	b.n	800d082 <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdf4:	799b      	ldrb	r3, [r3, #6]
 800cdf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdfa:	b2da      	uxtb	r2, r3
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce02:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce12:	695b      	ldr	r3, [r3, #20]
 800ce14:	4619      	mov	r1, r3
 800ce16:	4610      	mov	r0, r2
 800ce18:	f7fd fb51 	bl	800a4be <clust2sect>
 800ce1c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d106      	bne.n	800ce32 <f_write+0x21a>
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce2a:	2202      	movs	r2, #2
 800ce2c:	71da      	strb	r2, [r3, #7]
 800ce2e:	2302      	movs	r3, #2
 800ce30:	e127      	b.n	800d082 <f_write+0x46a>
			sect += csect;
 800ce32:	7dbb      	ldrb	r3, [r7, #22]
 800ce34:	693a      	ldr	r2, [r7, #16]
 800ce36:	4413      	add	r3, r2
 800ce38:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce46:	895b      	ldrh	r3, [r3, #10]
 800ce48:	461a      	mov	r2, r3
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce50:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ce52:	69fb      	ldr	r3, [r7, #28]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d069      	beq.n	800cf2c <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800ce58:	7dba      	ldrb	r2, [r7, #22]
 800ce5a:	69fb      	ldr	r3, [r7, #28]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	68fa      	ldr	r2, [r7, #12]
 800ce60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ce64:	6812      	ldr	r2, [r2, #0]
 800ce66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ce6a:	7892      	ldrb	r2, [r2, #2]
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d90a      	bls.n	800ce86 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce7c:	789b      	ldrb	r3, [r3, #2]
 800ce7e:	461a      	mov	r2, r3
 800ce80:	7dbb      	ldrb	r3, [r7, #22]
 800ce82:	1ad3      	subs	r3, r2, r3
 800ce84:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce92:	7858      	ldrb	r0, [r3, #1]
 800ce94:	69fb      	ldr	r3, [r7, #28]
 800ce96:	693a      	ldr	r2, [r7, #16]
 800ce98:	69b9      	ldr	r1, [r7, #24]
 800ce9a:	f7fc ff59 	bl	8009d50 <disk_write>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d006      	beq.n	800ceb2 <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ceaa:	2201      	movs	r2, #1
 800ceac:	71da      	strb	r2, [r3, #7]
 800ceae:	2301      	movs	r3, #1
 800ceb0:	e0e7      	b.n	800d082 <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ceb8:	699a      	ldr	r2, [r3, #24]
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	1ad3      	subs	r3, r2, r3
 800cebe:	69fa      	ldr	r2, [r7, #28]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d926      	bls.n	800cf12 <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800cec4:	68f8      	ldr	r0, [r7, #12]
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cecc:	699a      	ldr	r2, [r3, #24]
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	1ad3      	subs	r3, r2, r3
 800ced2:	68fa      	ldr	r2, [r7, #12]
 800ced4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ced8:	6812      	ldr	r2, [r2, #0]
 800ceda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cede:	8952      	ldrh	r2, [r2, #10]
 800cee0:	fb02 f303 	mul.w	r3, r2, r3
 800cee4:	69ba      	ldr	r2, [r7, #24]
 800cee6:	18d1      	adds	r1, r2, r3
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cef4:	895b      	ldrh	r3, [r3, #10]
 800cef6:	461a      	mov	r2, r3
 800cef8:	f7fc ff68 	bl	8009dcc <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf02:	799b      	ldrb	r3, [r3, #6]
 800cf04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf08:	b2da      	uxtb	r2, r3
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf10:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf1e:	895b      	ldrh	r3, [r3, #10]
 800cf20:	461a      	mov	r2, r3
 800cf22:	69fb      	ldr	r3, [r7, #28]
 800cf24:	fb02 f303 	mul.w	r3, r2, r3
 800cf28:	623b      	str	r3, [r7, #32]
				continue;
 800cf2a:	e06e      	b.n	800d00a <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf32:	699b      	ldr	r3, [r3, #24]
 800cf34:	693a      	ldr	r2, [r7, #16]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d01f      	beq.n	800cf7a <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf40:	689a      	ldr	r2, [r3, #8]
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf48:	68db      	ldr	r3, [r3, #12]
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d215      	bcs.n	800cf7a <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf5a:	7858      	ldrb	r0, [r3, #1]
 800cf5c:	68f9      	ldr	r1, [r7, #12]
 800cf5e:	2301      	movs	r3, #1
 800cf60:	693a      	ldr	r2, [r7, #16]
 800cf62:	f7fc fed5 	bl	8009d10 <disk_read>
 800cf66:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d006      	beq.n	800cf7a <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf72:	2201      	movs	r2, #1
 800cf74:	71da      	strb	r2, [r3, #7]
 800cf76:	2301      	movs	r3, #1
 800cf78:	e083      	b.n	800d082 <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf80:	461a      	mov	r2, r3
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf92:	895b      	ldrh	r3, [r3, #10]
 800cf94:	4618      	mov	r0, r3
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf9c:	689b      	ldr	r3, [r3, #8]
 800cf9e:	68fa      	ldr	r2, [r7, #12]
 800cfa0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cfa4:	6812      	ldr	r2, [r2, #0]
 800cfa6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cfaa:	8952      	ldrh	r2, [r2, #10]
 800cfac:	fbb3 f1f2 	udiv	r1, r3, r2
 800cfb0:	fb01 f202 	mul.w	r2, r1, r2
 800cfb4:	1a9b      	subs	r3, r3, r2
 800cfb6:	1ac3      	subs	r3, r0, r3
 800cfb8:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800cfba:	6a3a      	ldr	r2, [r7, #32]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d901      	bls.n	800cfc6 <f_write+0x3ae>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfcc:	689b      	ldr	r3, [r3, #8]
 800cfce:	68fa      	ldr	r2, [r7, #12]
 800cfd0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cfd4:	6812      	ldr	r2, [r2, #0]
 800cfd6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cfda:	8952      	ldrh	r2, [r2, #10]
 800cfdc:	fbb3 f1f2 	udiv	r1, r3, r2
 800cfe0:	fb01 f202 	mul.w	r2, r1, r2
 800cfe4:	1a9b      	subs	r3, r3, r2
 800cfe6:	68fa      	ldr	r2, [r7, #12]
 800cfe8:	4413      	add	r3, r2
 800cfea:	6a3a      	ldr	r2, [r7, #32]
 800cfec:	69b9      	ldr	r1, [r7, #24]
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7fc feec 	bl	8009dcc <mem_cpy>
		fp->flag |= FA__DIRTY;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cffa:	799b      	ldrb	r3, [r3, #6]
 800cffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d000:	b2da      	uxtb	r2, r3
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d008:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800d00a:	69ba      	ldr	r2, [r7, #24]
 800d00c:	6a3b      	ldr	r3, [r7, #32]
 800d00e:	4413      	add	r3, r2
 800d010:	61bb      	str	r3, [r7, #24]
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d018:	689a      	ldr	r2, [r3, #8]
 800d01a:	6a3b      	ldr	r3, [r7, #32]
 800d01c:	4413      	add	r3, r2
 800d01e:	68fa      	ldr	r2, [r7, #12]
 800d020:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d024:	6093      	str	r3, [r2, #8]
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	6a3b      	ldr	r3, [r7, #32]
 800d02c:	441a      	add	r2, r3
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	601a      	str	r2, [r3, #0]
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	6a3b      	ldr	r3, [r7, #32]
 800d036:	1ad3      	subs	r3, r2, r3
 800d038:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	f47f ae26 	bne.w	800cc8e <f_write+0x76>
 800d042:	e000      	b.n	800d046 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d044:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d04c:	689a      	ldr	r2, [r3, #8]
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d054:	68db      	ldr	r3, [r3, #12]
 800d056:	429a      	cmp	r2, r3
 800d058:	d907      	bls.n	800d06a <f_write+0x452>
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d060:	689b      	ldr	r3, [r3, #8]
 800d062:	68fa      	ldr	r2, [r7, #12]
 800d064:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d068:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d070:	799b      	ldrb	r3, [r3, #6]
 800d072:	f043 0320 	orr.w	r3, r3, #32
 800d076:	b2da      	uxtb	r2, r3
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d07e:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800d080:	2300      	movs	r3, #0
}
 800d082:	4618      	mov	r0, r3
 800d084:	3728      	adds	r7, #40	; 0x28
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}

0800d08a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d08a:	b580      	push	{r7, lr}
 800d08c:	b086      	sub	sp, #24
 800d08e:	af00      	add	r7, sp, #0
 800d090:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f7ff fa22 	bl	800c4dc <validate>
 800d098:	4603      	mov	r3, r0
 800d09a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d09c:	7dfb      	ldrb	r3, [r7, #23]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	f040 80bc 	bne.w	800d21c <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0aa:	799b      	ldrb	r3, [r3, #6]
 800d0ac:	f003 0320 	and.w	r3, r3, #32
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	f000 80b3 	beq.w	800d21c <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0bc:	799b      	ldrb	r3, [r3, #6]
 800d0be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d01e      	beq.n	800d104 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0d2:	7858      	ldrb	r0, [r3, #1]
 800d0d4:	6879      	ldr	r1, [r7, #4]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0dc:	699a      	ldr	r2, [r3, #24]
 800d0de:	2301      	movs	r3, #1
 800d0e0:	f7fc fe36 	bl	8009d50 <disk_write>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d001      	beq.n	800d0ee <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	e097      	b.n	800d21e <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0f4:	799b      	ldrb	r3, [r3, #6]
 800d0f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d0fa:	b2da      	uxtb	r2, r3
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d102:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d10a:	681a      	ldr	r2, [r3, #0]
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d112:	69db      	ldr	r3, [r3, #28]
 800d114:	4619      	mov	r1, r3
 800d116:	4610      	mov	r0, r2
 800d118:	f7fd f8e0 	bl	800a2dc <move_window>
 800d11c:	4603      	mov	r3, r0
 800d11e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800d120:	7dfb      	ldrb	r3, [r7, #23]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d17a      	bne.n	800d21c <f_sync+0x192>
				dir = fp->dir_ptr;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d12c:	6a1b      	ldr	r3, [r3, #32]
 800d12e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	330b      	adds	r3, #11
 800d134:	781a      	ldrb	r2, [r3, #0]
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	330b      	adds	r3, #11
 800d13a:	f042 0220 	orr.w	r2, r2, #32
 800d13e:	b2d2      	uxtb	r2, r2
 800d140:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d148:	68da      	ldr	r2, [r3, #12]
 800d14a:	693b      	ldr	r3, [r7, #16]
 800d14c:	331c      	adds	r3, #28
 800d14e:	b2d2      	uxtb	r2, r2
 800d150:	701a      	strb	r2, [r3, #0]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d158:	68db      	ldr	r3, [r3, #12]
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	0a1b      	lsrs	r3, r3, #8
 800d15e:	b29a      	uxth	r2, r3
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	331d      	adds	r3, #29
 800d164:	b2d2      	uxtb	r2, r2
 800d166:	701a      	strb	r2, [r3, #0]
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d16e:	68db      	ldr	r3, [r3, #12]
 800d170:	0c1a      	lsrs	r2, r3, #16
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	331e      	adds	r3, #30
 800d176:	b2d2      	uxtb	r2, r2
 800d178:	701a      	strb	r2, [r3, #0]
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d180:	68db      	ldr	r3, [r3, #12]
 800d182:	0e1a      	lsrs	r2, r3, #24
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	331f      	adds	r3, #31
 800d188:	b2d2      	uxtb	r2, r2
 800d18a:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d192:	691b      	ldr	r3, [r3, #16]
 800d194:	4619      	mov	r1, r3
 800d196:	6938      	ldr	r0, [r7, #16]
 800d198:	f7fd ffe1 	bl	800b15e <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800d19c:	f7fa fa6e 	bl	800767c <get_fattime>
 800d1a0:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	3316      	adds	r3, #22
 800d1a6:	68fa      	ldr	r2, [r7, #12]
 800d1a8:	b2d2      	uxtb	r2, r2
 800d1aa:	701a      	strb	r2, [r3, #0]
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	b29b      	uxth	r3, r3
 800d1b0:	0a1b      	lsrs	r3, r3, #8
 800d1b2:	b29a      	uxth	r2, r3
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	3317      	adds	r3, #23
 800d1b8:	b2d2      	uxtb	r2, r2
 800d1ba:	701a      	strb	r2, [r3, #0]
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	0c1a      	lsrs	r2, r3, #16
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	3318      	adds	r3, #24
 800d1c4:	b2d2      	uxtb	r2, r2
 800d1c6:	701a      	strb	r2, [r3, #0]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	0e1a      	lsrs	r2, r3, #24
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	3319      	adds	r3, #25
 800d1d0:	b2d2      	uxtb	r2, r2
 800d1d2:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	3312      	adds	r3, #18
 800d1d8:	2200      	movs	r2, #0
 800d1da:	701a      	strb	r2, [r3, #0]
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	3313      	adds	r3, #19
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1ea:	799b      	ldrb	r3, [r3, #6]
 800d1ec:	f023 0320 	bic.w	r3, r3, #32
 800d1f0:	b2da      	uxtb	r2, r3
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1f8:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d206:	2201      	movs	r2, #1
 800d208:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	4618      	mov	r0, r3
 800d214:	f7fd f894 	bl	800a340 <sync_fs>
 800d218:	4603      	mov	r3, r0
 800d21a:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800d21c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3718      	adds	r7, #24
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}

0800d226 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800d226:	b580      	push	{r7, lr}
 800d228:	b084      	sub	sp, #16
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f7ff ff2b 	bl	800d08a <f_sync>
 800d234:	4603      	mov	r3, r0
 800d236:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d238:	7bfb      	ldrb	r3, [r7, #15]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d119      	bne.n	800d272 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f7ff f94c 	bl	800c4dc <validate>
 800d244:	4603      	mov	r3, r0
 800d246:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d248:	7bfb      	ldrb	r3, [r7, #15]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d111      	bne.n	800d272 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d256:	4618      	mov	r0, r3
 800d258:	f7fc ff80 	bl	800a15c <dec_lock>
 800d25c:	4603      	mov	r3, r0
 800d25e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d260:	7bfb      	ldrb	r3, [r7, #15]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d105      	bne.n	800d272 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d26c:	461a      	mov	r2, r3
 800d26e:	2300      	movs	r3, #0
 800d270:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d272:	7bfb      	ldrb	r3, [r7, #15]
}
 800d274:	4618      	mov	r0, r3
 800d276:	3710      	adds	r7, #16
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}

0800d27c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b090      	sub	sp, #64	; 0x40
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f7ff f928 	bl	800c4dc <validate>
 800d28c:	4603      	mov	r3, r0
 800d28e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800d292:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d296:	2b00      	cmp	r3, #0
 800d298:	d002      	beq.n	800d2a0 <f_lseek+0x24>
 800d29a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d29e:	e2da      	b.n	800d856 <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2a6:	79db      	ldrb	r3, [r3, #7]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d004      	beq.n	800d2b6 <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2b2:	79db      	ldrb	r3, [r3, #7]
 800d2b4:	e2cf      	b.n	800d856 <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	f000 8124 	beq.w	800d50c <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d2ca:	d16c      	bne.n	800d3a6 <f_lseek+0x12a>
			tbl = fp->cltbl;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2d4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d8:	1d1a      	adds	r2, r3, #4
 800d2da:	627a      	str	r2, [r7, #36]	; 0x24
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	617b      	str	r3, [r7, #20]
 800d2e0:	2302      	movs	r3, #2
 800d2e2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2ea:	691b      	ldr	r3, [r3, #16]
 800d2ec:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800d2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d046      	beq.n	800d382 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f6:	613b      	str	r3, [r7, #16]
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fe:	3302      	adds	r3, #2
 800d300:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800d302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d304:	60fb      	str	r3, [r7, #12]
 800d306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d308:	3301      	adds	r3, #1
 800d30a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d316:	4618      	mov	r0, r3
 800d318:	f7fd f8f5 	bl	800a506 <get_fat>
 800d31c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800d31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d320:	2b01      	cmp	r3, #1
 800d322:	d806      	bhi.n	800d332 <f_lseek+0xb6>
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d32a:	2202      	movs	r2, #2
 800d32c:	71da      	strb	r2, [r3, #7]
 800d32e:	2302      	movs	r3, #2
 800d330:	e291      	b.n	800d856 <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d338:	d106      	bne.n	800d348 <f_lseek+0xcc>
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d340:	2201      	movs	r2, #1
 800d342:	71da      	strb	r2, [r3, #7]
 800d344:	2301      	movs	r3, #1
 800d346:	e286      	b.n	800d856 <f_lseek+0x5da>
					} while (cl == pcl + 1);
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	3301      	adds	r3, #1
 800d34c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d34e:	429a      	cmp	r2, r3
 800d350:	d0d7      	beq.n	800d302 <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	429a      	cmp	r2, r3
 800d358:	d809      	bhi.n	800d36e <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 800d35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d35c:	1d1a      	adds	r2, r3, #4
 800d35e:	627a      	str	r2, [r7, #36]	; 0x24
 800d360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d362:	601a      	str	r2, [r3, #0]
 800d364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d366:	1d1a      	adds	r2, r3, #4
 800d368:	627a      	str	r2, [r7, #36]	; 0x24
 800d36a:	693a      	ldr	r2, [r7, #16]
 800d36c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d37a:	695b      	ldr	r3, [r3, #20]
 800d37c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d37e:	429a      	cmp	r2, r3
 800d380:	d3b8      	bcc.n	800d2f4 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d38a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d38c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800d38e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	429a      	cmp	r2, r3
 800d394:	d803      	bhi.n	800d39e <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 800d396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d398:	2200      	movs	r2, #0
 800d39a:	601a      	str	r2, [r3, #0]
 800d39c:	e259      	b.n	800d852 <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d39e:	2311      	movs	r3, #17
 800d3a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d3a4:	e255      	b.n	800d852 <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3ac:	68db      	ldr	r3, [r3, #12]
 800d3ae:	683a      	ldr	r2, [r7, #0]
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d904      	bls.n	800d3be <f_lseek+0x142>
				ofs = fp->fsize;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3ba:	68db      	ldr	r3, [r3, #12]
 800d3bc:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	6093      	str	r3, [r2, #8]
			if (ofs) {
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	f000 8240 	beq.w	800d852 <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	3b01      	subs	r3, #1
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f7fd fbec 	bl	800abb6 <clmt_clust>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3e6:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3ee:	681a      	ldr	r2, [r3, #0]
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3f6:	695b      	ldr	r3, [r3, #20]
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	4610      	mov	r0, r2
 800d3fc:	f7fd f85f 	bl	800a4be <clust2sect>
 800d400:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800d402:	69bb      	ldr	r3, [r7, #24]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d106      	bne.n	800d416 <f_lseek+0x19a>
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d40e:	2202      	movs	r2, #2
 800d410:	71da      	strb	r2, [r3, #7]
 800d412:	2302      	movs	r3, #2
 800d414:	e21f      	b.n	800d856 <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	3b01      	subs	r3, #1
 800d41a:	687a      	ldr	r2, [r7, #4]
 800d41c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d420:	6812      	ldr	r2, [r2, #0]
 800d422:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d426:	8952      	ldrh	r2, [r2, #10]
 800d428:	fbb3 f3f2 	udiv	r3, r3, r2
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d432:	6812      	ldr	r2, [r2, #0]
 800d434:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d438:	7892      	ldrb	r2, [r2, #2]
 800d43a:	3a01      	subs	r2, #1
 800d43c:	4013      	ands	r3, r2
 800d43e:	69ba      	ldr	r2, [r7, #24]
 800d440:	4413      	add	r3, r2
 800d442:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d44a:	689b      	ldr	r3, [r3, #8]
 800d44c:	687a      	ldr	r2, [r7, #4]
 800d44e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d452:	6812      	ldr	r2, [r2, #0]
 800d454:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d458:	8952      	ldrh	r2, [r2, #10]
 800d45a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d45e:	fb01 f202 	mul.w	r2, r1, r2
 800d462:	1a9b      	subs	r3, r3, r2
 800d464:	2b00      	cmp	r3, #0
 800d466:	f000 81f4 	beq.w	800d852 <f_lseek+0x5d6>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d470:	699b      	ldr	r3, [r3, #24]
 800d472:	69ba      	ldr	r2, [r7, #24]
 800d474:	429a      	cmp	r2, r3
 800d476:	f000 81ec 	beq.w	800d852 <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d480:	799b      	ldrb	r3, [r3, #6]
 800d482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d486:	2b00      	cmp	r3, #0
 800d488:	d023      	beq.n	800d4d2 <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d496:	7858      	ldrb	r0, [r3, #1]
 800d498:	6879      	ldr	r1, [r7, #4]
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4a0:	699a      	ldr	r2, [r3, #24]
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	f7fc fc54 	bl	8009d50 <disk_write>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d006      	beq.n	800d4bc <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	71da      	strb	r2, [r3, #7]
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	e1cc      	b.n	800d856 <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4c2:	799b      	ldrb	r3, [r3, #6]
 800d4c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4c8:	b2da      	uxtb	r2, r3
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4d0:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4de:	7858      	ldrb	r0, [r3, #1]
 800d4e0:	6879      	ldr	r1, [r7, #4]
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	69ba      	ldr	r2, [r7, #24]
 800d4e6:	f7fc fc13 	bl	8009d10 <disk_read>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d006      	beq.n	800d4fe <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	71da      	strb	r2, [r3, #7]
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	e1ab      	b.n	800d856 <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d504:	461a      	mov	r2, r3
 800d506:	69bb      	ldr	r3, [r7, #24]
 800d508:	6193      	str	r3, [r2, #24]
 800d50a:	e1a2      	b.n	800d852 <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d512:	68db      	ldr	r3, [r3, #12]
 800d514:	683a      	ldr	r2, [r7, #0]
 800d516:	429a      	cmp	r2, r3
 800d518:	d90c      	bls.n	800d534 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d520:	799b      	ldrb	r3, [r3, #6]
 800d522:	f003 0302 	and.w	r3, r3, #2
 800d526:	2b00      	cmp	r3, #0
 800d528:	d104      	bne.n	800d534 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d530:	68db      	ldr	r3, [r3, #12]
 800d532:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d53a:	689b      	ldr	r3, [r3, #8]
 800d53c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d53e:	2300      	movs	r3, #0
 800d540:	637b      	str	r3, [r7, #52]	; 0x34
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d548:	461a      	mov	r2, r3
 800d54a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d54c:	6093      	str	r3, [r2, #8]
		if (ofs) {
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	2b00      	cmp	r3, #0
 800d552:	f000 8100 	beq.w	800d756 <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d562:	789b      	ldrb	r3, [r3, #2]
 800d564:	461a      	mov	r2, r3
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d572:	895b      	ldrh	r3, [r3, #10]
 800d574:	fb02 f303 	mul.w	r3, r2, r3
 800d578:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d57a:	6a3b      	ldr	r3, [r7, #32]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d021      	beq.n	800d5c4 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	1e5a      	subs	r2, r3, #1
 800d584:	69fb      	ldr	r3, [r7, #28]
 800d586:	fbb2 f2f3 	udiv	r2, r2, r3
 800d58a:	6a3b      	ldr	r3, [r7, #32]
 800d58c:	1e59      	subs	r1, r3, #1
 800d58e:	69fb      	ldr	r3, [r7, #28]
 800d590:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d594:	429a      	cmp	r2, r3
 800d596:	d315      	bcc.n	800d5c4 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800d598:	6a3b      	ldr	r3, [r7, #32]
 800d59a:	1e5a      	subs	r2, r3, #1
 800d59c:	69fb      	ldr	r3, [r7, #28]
 800d59e:	425b      	negs	r3, r3
 800d5a0:	4013      	ands	r3, r2
 800d5a2:	687a      	ldr	r2, [r7, #4]
 800d5a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d5a8:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5b0:	689b      	ldr	r3, [r3, #8]
 800d5b2:	683a      	ldr	r2, [r7, #0]
 800d5b4:	1ad3      	subs	r3, r2, r3
 800d5b6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5be:	695b      	ldr	r3, [r3, #20]
 800d5c0:	63bb      	str	r3, [r7, #56]	; 0x38
 800d5c2:	e031      	b.n	800d628 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5ca:	691b      	ldr	r3, [r3, #16]
 800d5cc:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d123      	bne.n	800d61c <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	2100      	movs	r1, #0
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f7fd fa41 	bl	800aa66 <create_chain>
 800d5e4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800d5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e8:	2b01      	cmp	r3, #1
 800d5ea:	d106      	bne.n	800d5fa <f_lseek+0x37e>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5f2:	2202      	movs	r2, #2
 800d5f4:	71da      	strb	r2, [r3, #7]
 800d5f6:	2302      	movs	r3, #2
 800d5f8:	e12d      	b.n	800d856 <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d600:	d106      	bne.n	800d610 <f_lseek+0x394>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d608:	2201      	movs	r2, #1
 800d60a:	71da      	strb	r2, [r3, #7]
 800d60c:	2301      	movs	r3, #1
 800d60e:	e122      	b.n	800d856 <f_lseek+0x5da>
					fp->sclust = clst;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d616:	461a      	mov	r2, r3
 800d618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d61a:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d622:	461a      	mov	r2, r3
 800d624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d626:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 800d628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	f000 8093 	beq.w	800d756 <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 800d630:	e052      	b.n	800d6d8 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d638:	799b      	ldrb	r3, [r3, #6]
 800d63a:	f003 0302 	and.w	r3, r3, #2
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d00e      	beq.n	800d660 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d64c:	4618      	mov	r0, r3
 800d64e:	f7fd fa0a 	bl	800aa66 <create_chain>
 800d652:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800d654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d656:	2b00      	cmp	r3, #0
 800d658:	d10b      	bne.n	800d672 <f_lseek+0x3f6>
							ofs = bcs; break;
 800d65a:	69fb      	ldr	r3, [r7, #28]
 800d65c:	603b      	str	r3, [r7, #0]
 800d65e:	e03f      	b.n	800d6e0 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7fc ff4b 	bl	800a506 <get_fat>
 800d670:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d678:	d106      	bne.n	800d688 <f_lseek+0x40c>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d680:	2201      	movs	r2, #1
 800d682:	71da      	strb	r2, [r3, #7]
 800d684:	2301      	movs	r3, #1
 800d686:	e0e6      	b.n	800d856 <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800d688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d68a:	2b01      	cmp	r3, #1
 800d68c:	d909      	bls.n	800d6a2 <f_lseek+0x426>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d69a:	695b      	ldr	r3, [r3, #20]
 800d69c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d306      	bcc.n	800d6b0 <f_lseek+0x434>
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6a8:	2202      	movs	r2, #2
 800d6aa:	71da      	strb	r2, [r3, #7]
 800d6ac:	2302      	movs	r3, #2
 800d6ae:	e0d2      	b.n	800d856 <f_lseek+0x5da>
					fp->clust = clst;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6b6:	461a      	mov	r2, r3
 800d6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ba:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6c2:	689a      	ldr	r2, [r3, #8]
 800d6c4:	69fb      	ldr	r3, [r7, #28]
 800d6c6:	4413      	add	r3, r2
 800d6c8:	687a      	ldr	r2, [r7, #4]
 800d6ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d6ce:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 800d6d0:	683a      	ldr	r2, [r7, #0]
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	1ad3      	subs	r3, r2, r3
 800d6d6:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800d6d8:	683a      	ldr	r2, [r7, #0]
 800d6da:	69fb      	ldr	r3, [r7, #28]
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d8a8      	bhi.n	800d632 <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6e6:	689a      	ldr	r2, [r3, #8]
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	4413      	add	r3, r2
 800d6ec:	687a      	ldr	r2, [r7, #4]
 800d6ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d6f2:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d700:	895b      	ldrh	r3, [r3, #10]
 800d702:	461a      	mov	r2, r3
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	fbb3 f1f2 	udiv	r1, r3, r2
 800d70a:	fb01 f202 	mul.w	r2, r1, r2
 800d70e:	1a9b      	subs	r3, r3, r2
 800d710:	2b00      	cmp	r3, #0
 800d712:	d020      	beq.n	800d756 <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d71e:	4618      	mov	r0, r3
 800d720:	f7fc fecd 	bl	800a4be <clust2sect>
 800d724:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800d726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d106      	bne.n	800d73a <f_lseek+0x4be>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d732:	2202      	movs	r2, #2
 800d734:	71da      	strb	r2, [r3, #7]
 800d736:	2302      	movs	r3, #2
 800d738:	e08d      	b.n	800d856 <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d746:	895b      	ldrh	r3, [r3, #10]
 800d748:	461a      	mov	r2, r3
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d750:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d752:	4413      	add	r3, r2
 800d754:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d75c:	689b      	ldr	r3, [r3, #8]
 800d75e:	687a      	ldr	r2, [r7, #4]
 800d760:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d764:	6812      	ldr	r2, [r2, #0]
 800d766:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d76a:	8952      	ldrh	r2, [r2, #10]
 800d76c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d770:	fb01 f202 	mul.w	r2, r1, r2
 800d774:	1a9b      	subs	r3, r3, r2
 800d776:	2b00      	cmp	r3, #0
 800d778:	d04e      	beq.n	800d818 <f_lseek+0x59c>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d780:	699b      	ldr	r3, [r3, #24]
 800d782:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d784:	429a      	cmp	r2, r3
 800d786:	d047      	beq.n	800d818 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d78e:	799b      	ldrb	r3, [r3, #6]
 800d790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d794:	2b00      	cmp	r3, #0
 800d796:	d023      	beq.n	800d7e0 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7a4:	7858      	ldrb	r0, [r3, #1]
 800d7a6:	6879      	ldr	r1, [r7, #4]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7ae:	699a      	ldr	r2, [r3, #24]
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	f7fc facd 	bl	8009d50 <disk_write>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d006      	beq.n	800d7ca <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	71da      	strb	r2, [r3, #7]
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	e045      	b.n	800d856 <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7d0:	799b      	ldrb	r3, [r3, #6]
 800d7d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d7d6:	b2da      	uxtb	r2, r3
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7de:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7ec:	7858      	ldrb	r0, [r3, #1]
 800d7ee:	6879      	ldr	r1, [r7, #4]
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d7f4:	f7fc fa8c 	bl	8009d10 <disk_read>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d006      	beq.n	800d80c <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d804:	2201      	movs	r2, #1
 800d806:	71da      	strb	r2, [r3, #7]
 800d808:	2301      	movs	r3, #1
 800d80a:	e024      	b.n	800d856 <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d812:	461a      	mov	r2, r3
 800d814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d816:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d81e:	689a      	ldr	r2, [r3, #8]
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d826:	68db      	ldr	r3, [r3, #12]
 800d828:	429a      	cmp	r2, r3
 800d82a:	d912      	bls.n	800d852 <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d832:	689b      	ldr	r3, [r3, #8]
 800d834:	687a      	ldr	r2, [r7, #4]
 800d836:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d83a:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d842:	799b      	ldrb	r3, [r3, #6]
 800d844:	f043 0320 	orr.w	r3, r3, #32
 800d848:	b2da      	uxtb	r2, r3
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d850:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800d852:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d856:	4618      	mov	r0, r3
 800d858:	3740      	adds	r7, #64	; 0x40
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}

0800d85e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d85e:	b580      	push	{r7, lr}
 800d860:	b08e      	sub	sp, #56	; 0x38
 800d862:	af00      	add	r7, sp, #0
 800d864:	60f8      	str	r0, [r7, #12]
 800d866:	60b9      	str	r1, [r7, #8]
 800d868:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 800d86a:	f107 030c 	add.w	r3, r7, #12
 800d86e:	2200      	movs	r2, #0
 800d870:	4619      	mov	r1, r3
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f7fe fb00 	bl	800be78 <find_volume>
 800d878:	4603      	mov	r3, r0
 800d87a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800d884:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d888:	2b00      	cmp	r3, #0
 800d88a:	f040 80bc 	bne.w	800da06 <f_getfree+0x1a8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 800d88e:	69fb      	ldr	r3, [r7, #28]
 800d890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d894:	691a      	ldr	r2, [r3, #16]
 800d896:	69fb      	ldr	r3, [r7, #28]
 800d898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d89c:	695b      	ldr	r3, [r3, #20]
 800d89e:	3b02      	subs	r3, #2
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d806      	bhi.n	800d8b2 <f_getfree+0x54>
			*nclst = fs->free_clust;
 800d8a4:	69fb      	ldr	r3, [r7, #28]
 800d8a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8aa:	691a      	ldr	r2, [r3, #16]
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	601a      	str	r2, [r3, #0]
 800d8b0:	e0a9      	b.n	800da06 <f_getfree+0x1a8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800d8b2:	69fb      	ldr	r3, [r7, #28]
 800d8b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	76fb      	strb	r3, [r7, #27]
			n = 0;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800d8c0:	7efb      	ldrb	r3, [r7, #27]
 800d8c2:	2b01      	cmp	r3, #1
 800d8c4:	d126      	bne.n	800d914 <f_getfree+0xb6>
				clst = 2;
 800d8c6:	2302      	movs	r3, #2
 800d8c8:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 800d8ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8cc:	69f8      	ldr	r0, [r7, #28]
 800d8ce:	f7fc fe1a 	bl	800a506 <get_fat>
 800d8d2:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8da:	d103      	bne.n	800d8e4 <f_getfree+0x86>
 800d8dc:	2301      	movs	r3, #1
 800d8de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d8e2:	e07c      	b.n	800d9de <f_getfree+0x180>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	d103      	bne.n	800d8f2 <f_getfree+0x94>
 800d8ea:	2302      	movs	r3, #2
 800d8ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d8f0:	e075      	b.n	800d9de <f_getfree+0x180>
					if (stat == 0) n++;
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d102      	bne.n	800d8fe <f_getfree+0xa0>
 800d8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800d8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d900:	3301      	adds	r3, #1
 800d902:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d904:	69fb      	ldr	r3, [r7, #28]
 800d906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d90a:	695b      	ldr	r3, [r3, #20]
 800d90c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d90e:	429a      	cmp	r2, r3
 800d910:	d3db      	bcc.n	800d8ca <f_getfree+0x6c>
 800d912:	e064      	b.n	800d9de <f_getfree+0x180>
			} else {
				clst = fs->n_fatent;
 800d914:	69fb      	ldr	r3, [r7, #28]
 800d916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d91a:	695b      	ldr	r3, [r3, #20]
 800d91c:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800d91e:	69fb      	ldr	r3, [r7, #28]
 800d920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d924:	6a1b      	ldr	r3, [r3, #32]
 800d926:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800d928:	2300      	movs	r3, #0
 800d92a:	627b      	str	r3, [r7, #36]	; 0x24
 800d92c:	2300      	movs	r3, #0
 800d92e:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800d930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d932:	2b00      	cmp	r3, #0
 800d934:	d114      	bne.n	800d960 <f_getfree+0x102>
						res = move_window(fs, sect++);
 800d936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d938:	1c5a      	adds	r2, r3, #1
 800d93a:	62ba      	str	r2, [r7, #40]	; 0x28
 800d93c:	4619      	mov	r1, r3
 800d93e:	69f8      	ldr	r0, [r7, #28]
 800d940:	f7fc fccc 	bl	800a2dc <move_window>
 800d944:	4603      	mov	r3, r0
 800d946:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800d94a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d144      	bne.n	800d9dc <f_getfree+0x17e>
						p = fs->win.d8;
 800d952:	69fb      	ldr	r3, [r7, #28]
 800d954:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800d956:	69fb      	ldr	r3, [r7, #28]
 800d958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d95c:	895b      	ldrh	r3, [r3, #10]
 800d95e:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800d960:	7efb      	ldrb	r3, [r7, #27]
 800d962:	2b02      	cmp	r3, #2
 800d964:	d115      	bne.n	800d992 <f_getfree+0x134>
						if (LD_WORD(p) == 0) n++;
 800d966:	6a3b      	ldr	r3, [r7, #32]
 800d968:	3301      	adds	r3, #1
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	021b      	lsls	r3, r3, #8
 800d96e:	b21a      	sxth	r2, r3
 800d970:	6a3b      	ldr	r3, [r7, #32]
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	b21b      	sxth	r3, r3
 800d976:	4313      	orrs	r3, r2
 800d978:	b21b      	sxth	r3, r3
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d102      	bne.n	800d984 <f_getfree+0x126>
 800d97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d980:	3301      	adds	r3, #1
 800d982:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 800d984:	6a3b      	ldr	r3, [r7, #32]
 800d986:	3302      	adds	r3, #2
 800d988:	623b      	str	r3, [r7, #32]
 800d98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d98c:	3b02      	subs	r3, #2
 800d98e:	627b      	str	r3, [r7, #36]	; 0x24
 800d990:	e01d      	b.n	800d9ce <f_getfree+0x170>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800d992:	6a3b      	ldr	r3, [r7, #32]
 800d994:	3303      	adds	r3, #3
 800d996:	781b      	ldrb	r3, [r3, #0]
 800d998:	061a      	lsls	r2, r3, #24
 800d99a:	6a3b      	ldr	r3, [r7, #32]
 800d99c:	3302      	adds	r3, #2
 800d99e:	781b      	ldrb	r3, [r3, #0]
 800d9a0:	041b      	lsls	r3, r3, #16
 800d9a2:	4313      	orrs	r3, r2
 800d9a4:	6a3a      	ldr	r2, [r7, #32]
 800d9a6:	3201      	adds	r2, #1
 800d9a8:	7812      	ldrb	r2, [r2, #0]
 800d9aa:	0212      	lsls	r2, r2, #8
 800d9ac:	4313      	orrs	r3, r2
 800d9ae:	6a3a      	ldr	r2, [r7, #32]
 800d9b0:	7812      	ldrb	r2, [r2, #0]
 800d9b2:	4313      	orrs	r3, r2
 800d9b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d102      	bne.n	800d9c2 <f_getfree+0x164>
 800d9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9be:	3301      	adds	r3, #1
 800d9c0:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 800d9c2:	6a3b      	ldr	r3, [r7, #32]
 800d9c4:	3304      	adds	r3, #4
 800d9c6:	623b      	str	r3, [r7, #32]
 800d9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ca:	3b04      	subs	r3, #4
 800d9cc:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800d9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d0:	3b01      	subs	r3, #1
 800d9d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d1aa      	bne.n	800d930 <f_getfree+0xd2>
 800d9da:	e000      	b.n	800d9de <f_getfree+0x180>
						if (res != FR_OK) break;
 800d9dc:	bf00      	nop
			}
			fs->free_clust = n;
 800d9de:	69fb      	ldr	r3, [r7, #28]
 800d9e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9e4:	461a      	mov	r2, r3
 800d9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e8:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 800d9ea:	69fb      	ldr	r3, [r7, #28]
 800d9ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9f0:	795b      	ldrb	r3, [r3, #5]
 800d9f2:	f043 0301 	orr.w	r3, r3, #1
 800d9f6:	b2da      	uxtb	r2, r3
 800d9f8:	69fb      	ldr	r3, [r7, #28]
 800d9fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9fe:	715a      	strb	r2, [r3, #5]
			*nclst = n;
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da04:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800da06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3738      	adds	r7, #56	; 0x38
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}

0800da12 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800da12:	b580      	push	{r7, lr}
 800da14:	b084      	sub	sp, #16
 800da16:	af00      	add	r7, sp, #0
 800da18:	6078      	str	r0, [r7, #4]
 800da1a:	460b      	mov	r3, r1
 800da1c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800da1e:	78fb      	ldrb	r3, [r7, #3]
 800da20:	2b0a      	cmp	r3, #10
 800da22:	d103      	bne.n	800da2c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800da24:	210d      	movs	r1, #13
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	f7ff fff3 	bl	800da12 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	685b      	ldr	r3, [r3, #4]
 800da30:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2b00      	cmp	r3, #0
 800da36:	db25      	blt.n	800da84 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	1c5a      	adds	r2, r3, #1
 800da3c:	60fa      	str	r2, [r7, #12]
 800da3e:	687a      	ldr	r2, [r7, #4]
 800da40:	4413      	add	r3, r2
 800da42:	78fa      	ldrb	r2, [r7, #3]
 800da44:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	2b3c      	cmp	r3, #60	; 0x3c
 800da4a:	dd12      	ble.n	800da72 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6818      	ldr	r0, [r3, #0]
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f103 010c 	add.w	r1, r3, #12
 800da56:	68fa      	ldr	r2, [r7, #12]
 800da58:	f107 0308 	add.w	r3, r7, #8
 800da5c:	f7ff f8dc 	bl	800cc18 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800da60:	68ba      	ldr	r2, [r7, #8]
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	429a      	cmp	r2, r3
 800da66:	d101      	bne.n	800da6c <putc_bfd+0x5a>
 800da68:	2300      	movs	r3, #0
 800da6a:	e001      	b.n	800da70 <putc_bfd+0x5e>
 800da6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da70:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	68fa      	ldr	r2, [r7, #12]
 800da76:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	689b      	ldr	r3, [r3, #8]
 800da7c:	1c5a      	adds	r2, r3, #1
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	609a      	str	r2, [r3, #8]
 800da82:	e000      	b.n	800da86 <putc_bfd+0x74>
	if (i < 0) return;
 800da84:	bf00      	nop
}
 800da86:	3710      	adds	r7, #16
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800da8c:	b590      	push	{r4, r7, lr}
 800da8e:	b097      	sub	sp, #92	; 0x5c
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800da9a:	2300      	movs	r3, #0
 800da9c:	613b      	str	r3, [r7, #16]
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800daa2:	e009      	b.n	800dab8 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	1c5a      	adds	r2, r3, #1
 800daa8:	607a      	str	r2, [r7, #4]
 800daaa:	781a      	ldrb	r2, [r3, #0]
 800daac:	f107 030c 	add.w	r3, r7, #12
 800dab0:	4611      	mov	r1, r2
 800dab2:	4618      	mov	r0, r3
 800dab4:	f7ff ffad 	bl	800da12 <putc_bfd>
	while (*str)			/* Put the string */
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d1f1      	bne.n	800daa4 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	db15      	blt.n	800daf2 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800dac6:	68f8      	ldr	r0, [r7, #12]
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	461c      	mov	r4, r3
 800dacc:	f107 0208 	add.w	r2, r7, #8
 800dad0:	f107 030c 	add.w	r3, r7, #12
 800dad4:	f103 010c 	add.w	r1, r3, #12
 800dad8:	4613      	mov	r3, r2
 800dada:	4622      	mov	r2, r4
 800dadc:	f7ff f89c 	bl	800cc18 <f_write>
 800dae0:	4603      	mov	r3, r0
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d105      	bne.n	800daf2 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	68ba      	ldr	r2, [r7, #8]
 800daea:	4293      	cmp	r3, r2
 800daec:	d101      	bne.n	800daf2 <f_puts+0x66>
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	e001      	b.n	800daf6 <f_puts+0x6a>
	return EOF;
 800daf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	375c      	adds	r7, #92	; 0x5c
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd90      	pop	{r4, r7, pc}
	...

0800db00 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800db00:	b480      	push	{r7}
 800db02:	b087      	sub	sp, #28
 800db04:	af00      	add	r7, sp, #0
 800db06:	60f8      	str	r0, [r7, #12]
 800db08:	60b9      	str	r1, [r7, #8]
 800db0a:	4613      	mov	r3, r2
 800db0c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800db0e:	2301      	movs	r3, #1
 800db10:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800db12:	2300      	movs	r3, #0
 800db14:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800db16:	4b1e      	ldr	r3, [pc, #120]	; (800db90 <FATFS_LinkDriverEx+0x90>)
 800db18:	7a5b      	ldrb	r3, [r3, #9]
 800db1a:	b2db      	uxtb	r3, r3
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d831      	bhi.n	800db84 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800db20:	4b1b      	ldr	r3, [pc, #108]	; (800db90 <FATFS_LinkDriverEx+0x90>)
 800db22:	7a5b      	ldrb	r3, [r3, #9]
 800db24:	b2db      	uxtb	r3, r3
 800db26:	461a      	mov	r2, r3
 800db28:	4b19      	ldr	r3, [pc, #100]	; (800db90 <FATFS_LinkDriverEx+0x90>)
 800db2a:	2100      	movs	r1, #0
 800db2c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800db2e:	4b18      	ldr	r3, [pc, #96]	; (800db90 <FATFS_LinkDriverEx+0x90>)
 800db30:	7a5b      	ldrb	r3, [r3, #9]
 800db32:	b2db      	uxtb	r3, r3
 800db34:	4a16      	ldr	r2, [pc, #88]	; (800db90 <FATFS_LinkDriverEx+0x90>)
 800db36:	009b      	lsls	r3, r3, #2
 800db38:	4413      	add	r3, r2
 800db3a:	68fa      	ldr	r2, [r7, #12]
 800db3c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800db3e:	4b14      	ldr	r3, [pc, #80]	; (800db90 <FATFS_LinkDriverEx+0x90>)
 800db40:	7a5b      	ldrb	r3, [r3, #9]
 800db42:	b2db      	uxtb	r3, r3
 800db44:	461a      	mov	r2, r3
 800db46:	4b12      	ldr	r3, [pc, #72]	; (800db90 <FATFS_LinkDriverEx+0x90>)
 800db48:	4413      	add	r3, r2
 800db4a:	79fa      	ldrb	r2, [r7, #7]
 800db4c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800db4e:	4b10      	ldr	r3, [pc, #64]	; (800db90 <FATFS_LinkDriverEx+0x90>)
 800db50:	7a5b      	ldrb	r3, [r3, #9]
 800db52:	b2db      	uxtb	r3, r3
 800db54:	1c5a      	adds	r2, r3, #1
 800db56:	b2d1      	uxtb	r1, r2
 800db58:	4a0d      	ldr	r2, [pc, #52]	; (800db90 <FATFS_LinkDriverEx+0x90>)
 800db5a:	7251      	strb	r1, [r2, #9]
 800db5c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800db5e:	7dbb      	ldrb	r3, [r7, #22]
 800db60:	3330      	adds	r3, #48	; 0x30
 800db62:	b2da      	uxtb	r2, r3
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	3301      	adds	r3, #1
 800db6c:	223a      	movs	r2, #58	; 0x3a
 800db6e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	3302      	adds	r3, #2
 800db74:	222f      	movs	r2, #47	; 0x2f
 800db76:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	3303      	adds	r3, #3
 800db7c:	2200      	movs	r2, #0
 800db7e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800db80:	2300      	movs	r3, #0
 800db82:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800db84:	7dfb      	ldrb	r3, [r7, #23]
}
 800db86:	4618      	mov	r0, r3
 800db88:	371c      	adds	r7, #28
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bc80      	pop	{r7}
 800db8e:	4770      	bx	lr
 800db90:	20002450 	.word	0x20002450

0800db94 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800db9e:	2200      	movs	r2, #0
 800dba0:	6839      	ldr	r1, [r7, #0]
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f7ff ffac 	bl	800db00 <FATFS_LinkDriverEx>
 800dba8:	4603      	mov	r3, r0
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3708      	adds	r7, #8
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}
	...

0800dbb4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b085      	sub	sp, #20
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	4603      	mov	r3, r0
 800dbbc:	6039      	str	r1, [r7, #0]
 800dbbe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800dbc0:	88fb      	ldrh	r3, [r7, #6]
 800dbc2:	2b7f      	cmp	r3, #127	; 0x7f
 800dbc4:	d802      	bhi.n	800dbcc <ff_convert+0x18>
		c = chr;
 800dbc6:	88fb      	ldrh	r3, [r7, #6]
 800dbc8:	81fb      	strh	r3, [r7, #14]
 800dbca:	e025      	b.n	800dc18 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d00b      	beq.n	800dbea <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800dbd2:	88fb      	ldrh	r3, [r7, #6]
 800dbd4:	2bff      	cmp	r3, #255	; 0xff
 800dbd6:	d805      	bhi.n	800dbe4 <ff_convert+0x30>
 800dbd8:	88fb      	ldrh	r3, [r7, #6]
 800dbda:	3b80      	subs	r3, #128	; 0x80
 800dbdc:	4a11      	ldr	r2, [pc, #68]	; (800dc24 <ff_convert+0x70>)
 800dbde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dbe2:	e000      	b.n	800dbe6 <ff_convert+0x32>
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	81fb      	strh	r3, [r7, #14]
 800dbe8:	e016      	b.n	800dc18 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800dbea:	2300      	movs	r3, #0
 800dbec:	81fb      	strh	r3, [r7, #14]
 800dbee:	e009      	b.n	800dc04 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800dbf0:	89fb      	ldrh	r3, [r7, #14]
 800dbf2:	4a0c      	ldr	r2, [pc, #48]	; (800dc24 <ff_convert+0x70>)
 800dbf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dbf8:	88fa      	ldrh	r2, [r7, #6]
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	d006      	beq.n	800dc0c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800dbfe:	89fb      	ldrh	r3, [r7, #14]
 800dc00:	3301      	adds	r3, #1
 800dc02:	81fb      	strh	r3, [r7, #14]
 800dc04:	89fb      	ldrh	r3, [r7, #14]
 800dc06:	2b7f      	cmp	r3, #127	; 0x7f
 800dc08:	d9f2      	bls.n	800dbf0 <ff_convert+0x3c>
 800dc0a:	e000      	b.n	800dc0e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800dc0c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800dc0e:	89fb      	ldrh	r3, [r7, #14]
 800dc10:	3380      	adds	r3, #128	; 0x80
 800dc12:	b29b      	uxth	r3, r3
 800dc14:	b2db      	uxtb	r3, r3
 800dc16:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800dc18:	89fb      	ldrh	r3, [r7, #14]
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	3714      	adds	r7, #20
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bc80      	pop	{r7}
 800dc22:	4770      	bx	lr
 800dc24:	0800e744 	.word	0x0800e744

0800dc28 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b085      	sub	sp, #20
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	4603      	mov	r3, r0
 800dc30:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800dc32:	2300      	movs	r3, #0
 800dc34:	60fb      	str	r3, [r7, #12]
 800dc36:	e002      	b.n	800dc3e <ff_wtoupper+0x16>
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	3301      	adds	r3, #1
 800dc3c:	60fb      	str	r3, [r7, #12]
 800dc3e:	4a0f      	ldr	r2, [pc, #60]	; (800dc7c <ff_wtoupper+0x54>)
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d006      	beq.n	800dc58 <ff_wtoupper+0x30>
 800dc4a:	4a0c      	ldr	r2, [pc, #48]	; (800dc7c <ff_wtoupper+0x54>)
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc52:	88fa      	ldrh	r2, [r7, #6]
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d1ef      	bne.n	800dc38 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800dc58:	4a08      	ldr	r2, [pc, #32]	; (800dc7c <ff_wtoupper+0x54>)
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d004      	beq.n	800dc6e <ff_wtoupper+0x46>
 800dc64:	4a06      	ldr	r2, [pc, #24]	; (800dc80 <ff_wtoupper+0x58>)
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc6c:	e000      	b.n	800dc70 <ff_wtoupper+0x48>
 800dc6e:	88fb      	ldrh	r3, [r7, #6]
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3714      	adds	r7, #20
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bc80      	pop	{r7}
 800dc78:	4770      	bx	lr
 800dc7a:	bf00      	nop
 800dc7c:	0800e844 	.word	0x0800e844
 800dc80:	0800ea24 	.word	0x0800ea24

0800dc84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dc88:	2200      	movs	r2, #0
 800dc8a:	4912      	ldr	r1, [pc, #72]	; (800dcd4 <MX_USB_DEVICE_Init+0x50>)
 800dc8c:	4812      	ldr	r0, [pc, #72]	; (800dcd8 <MX_USB_DEVICE_Init+0x54>)
 800dc8e:	f7fa ff83 	bl	8008b98 <USBD_Init>
 800dc92:	4603      	mov	r3, r0
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d001      	beq.n	800dc9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dc98:	f7f3 fb9e 	bl	80013d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800dc9c:	490f      	ldr	r1, [pc, #60]	; (800dcdc <MX_USB_DEVICE_Init+0x58>)
 800dc9e:	480e      	ldr	r0, [pc, #56]	; (800dcd8 <MX_USB_DEVICE_Init+0x54>)
 800dca0:	f7fa ffa5 	bl	8008bee <USBD_RegisterClass>
 800dca4:	4603      	mov	r3, r0
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d001      	beq.n	800dcae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dcaa:	f7f3 fb95 	bl	80013d8 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800dcae:	490c      	ldr	r1, [pc, #48]	; (800dce0 <MX_USB_DEVICE_Init+0x5c>)
 800dcb0:	4809      	ldr	r0, [pc, #36]	; (800dcd8 <MX_USB_DEVICE_Init+0x54>)
 800dcb2:	f7f9 ff51 	bl	8007b58 <USBD_MSC_RegisterStorage>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d001      	beq.n	800dcc0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800dcbc:	f7f3 fb8c 	bl	80013d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800dcc0:	4805      	ldr	r0, [pc, #20]	; (800dcd8 <MX_USB_DEVICE_Init+0x54>)
 800dcc2:	f7fa ffad 	bl	8008c20 <USBD_Start>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d001      	beq.n	800dcd0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800dccc:	f7f3 fb84 	bl	80013d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dcd0:	bf00      	nop
 800dcd2:	bd80      	pop	{r7, pc}
 800dcd4:	200000c8 	.word	0x200000c8
 800dcd8:	2000245c 	.word	0x2000245c
 800dcdc:	20000024 	.word	0x20000024
 800dce0:	20000118 	.word	0x20000118

0800dce4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dce4:	b480      	push	{r7}
 800dce6:	b083      	sub	sp, #12
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	4603      	mov	r3, r0
 800dcec:	6039      	str	r1, [r7, #0]
 800dcee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	2212      	movs	r2, #18
 800dcf4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dcf6:	4b03      	ldr	r3, [pc, #12]	; (800dd04 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	370c      	adds	r7, #12
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bc80      	pop	{r7}
 800dd00:	4770      	bx	lr
 800dd02:	bf00      	nop
 800dd04:	200000e4 	.word	0x200000e4

0800dd08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b083      	sub	sp, #12
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	4603      	mov	r3, r0
 800dd10:	6039      	str	r1, [r7, #0]
 800dd12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	2204      	movs	r2, #4
 800dd18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dd1a:	4b03      	ldr	r3, [pc, #12]	; (800dd28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	370c      	adds	r7, #12
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bc80      	pop	{r7}
 800dd24:	4770      	bx	lr
 800dd26:	bf00      	nop
 800dd28:	200000f8 	.word	0x200000f8

0800dd2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b082      	sub	sp, #8
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	4603      	mov	r3, r0
 800dd34:	6039      	str	r1, [r7, #0]
 800dd36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dd38:	79fb      	ldrb	r3, [r7, #7]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d105      	bne.n	800dd4a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd3e:	683a      	ldr	r2, [r7, #0]
 800dd40:	4907      	ldr	r1, [pc, #28]	; (800dd60 <USBD_FS_ProductStrDescriptor+0x34>)
 800dd42:	4808      	ldr	r0, [pc, #32]	; (800dd64 <USBD_FS_ProductStrDescriptor+0x38>)
 800dd44:	f7fb fee4 	bl	8009b10 <USBD_GetString>
 800dd48:	e004      	b.n	800dd54 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd4a:	683a      	ldr	r2, [r7, #0]
 800dd4c:	4904      	ldr	r1, [pc, #16]	; (800dd60 <USBD_FS_ProductStrDescriptor+0x34>)
 800dd4e:	4805      	ldr	r0, [pc, #20]	; (800dd64 <USBD_FS_ProductStrDescriptor+0x38>)
 800dd50:	f7fb fede 	bl	8009b10 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd54:	4b02      	ldr	r3, [pc, #8]	; (800dd60 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3708      	adds	r7, #8
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}
 800dd5e:	bf00      	nop
 800dd60:	20002720 	.word	0x20002720
 800dd64:	0800e648 	.word	0x0800e648

0800dd68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	4603      	mov	r3, r0
 800dd70:	6039      	str	r1, [r7, #0]
 800dd72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dd74:	683a      	ldr	r2, [r7, #0]
 800dd76:	4904      	ldr	r1, [pc, #16]	; (800dd88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dd78:	4804      	ldr	r0, [pc, #16]	; (800dd8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dd7a:	f7fb fec9 	bl	8009b10 <USBD_GetString>
  return USBD_StrDesc;
 800dd7e:	4b02      	ldr	r3, [pc, #8]	; (800dd88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3708      	adds	r7, #8
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}
 800dd88:	20002720 	.word	0x20002720
 800dd8c:	0800e65c 	.word	0x0800e65c

0800dd90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b082      	sub	sp, #8
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	4603      	mov	r3, r0
 800dd98:	6039      	str	r1, [r7, #0]
 800dd9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	221a      	movs	r2, #26
 800dda0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dda2:	f000 f843 	bl	800de2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dda6:	4b02      	ldr	r3, [pc, #8]	; (800ddb0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3708      	adds	r7, #8
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}
 800ddb0:	200000fc 	.word	0x200000fc

0800ddb4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b082      	sub	sp, #8
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	4603      	mov	r3, r0
 800ddbc:	6039      	str	r1, [r7, #0]
 800ddbe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ddc0:	79fb      	ldrb	r3, [r7, #7]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d105      	bne.n	800ddd2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ddc6:	683a      	ldr	r2, [r7, #0]
 800ddc8:	4907      	ldr	r1, [pc, #28]	; (800dde8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ddca:	4808      	ldr	r0, [pc, #32]	; (800ddec <USBD_FS_ConfigStrDescriptor+0x38>)
 800ddcc:	f7fb fea0 	bl	8009b10 <USBD_GetString>
 800ddd0:	e004      	b.n	800dddc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ddd2:	683a      	ldr	r2, [r7, #0]
 800ddd4:	4904      	ldr	r1, [pc, #16]	; (800dde8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ddd6:	4805      	ldr	r0, [pc, #20]	; (800ddec <USBD_FS_ConfigStrDescriptor+0x38>)
 800ddd8:	f7fb fe9a 	bl	8009b10 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dddc:	4b02      	ldr	r3, [pc, #8]	; (800dde8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3708      	adds	r7, #8
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}
 800dde6:	bf00      	nop
 800dde8:	20002720 	.word	0x20002720
 800ddec:	0800e670 	.word	0x0800e670

0800ddf0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b082      	sub	sp, #8
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	6039      	str	r1, [r7, #0]
 800ddfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ddfc:	79fb      	ldrb	r3, [r7, #7]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d105      	bne.n	800de0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800de02:	683a      	ldr	r2, [r7, #0]
 800de04:	4907      	ldr	r1, [pc, #28]	; (800de24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800de06:	4808      	ldr	r0, [pc, #32]	; (800de28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800de08:	f7fb fe82 	bl	8009b10 <USBD_GetString>
 800de0c:	e004      	b.n	800de18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800de0e:	683a      	ldr	r2, [r7, #0]
 800de10:	4904      	ldr	r1, [pc, #16]	; (800de24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800de12:	4805      	ldr	r0, [pc, #20]	; (800de28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800de14:	f7fb fe7c 	bl	8009b10 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de18:	4b02      	ldr	r3, [pc, #8]	; (800de24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3708      	adds	r7, #8
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}
 800de22:	bf00      	nop
 800de24:	20002720 	.word	0x20002720
 800de28:	0800e67c 	.word	0x0800e67c

0800de2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b084      	sub	sp, #16
 800de30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800de32:	4b0f      	ldr	r3, [pc, #60]	; (800de70 <Get_SerialNum+0x44>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800de38:	4b0e      	ldr	r3, [pc, #56]	; (800de74 <Get_SerialNum+0x48>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800de3e:	4b0e      	ldr	r3, [pc, #56]	; (800de78 <Get_SerialNum+0x4c>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800de44:	68fa      	ldr	r2, [r7, #12]
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	4413      	add	r3, r2
 800de4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d009      	beq.n	800de66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800de52:	2208      	movs	r2, #8
 800de54:	4909      	ldr	r1, [pc, #36]	; (800de7c <Get_SerialNum+0x50>)
 800de56:	68f8      	ldr	r0, [r7, #12]
 800de58:	f000 f814 	bl	800de84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800de5c:	2204      	movs	r2, #4
 800de5e:	4908      	ldr	r1, [pc, #32]	; (800de80 <Get_SerialNum+0x54>)
 800de60:	68b8      	ldr	r0, [r7, #8]
 800de62:	f000 f80f 	bl	800de84 <IntToUnicode>
  }
}
 800de66:	bf00      	nop
 800de68:	3710      	adds	r7, #16
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
 800de6e:	bf00      	nop
 800de70:	1ffff7e8 	.word	0x1ffff7e8
 800de74:	1ffff7ec 	.word	0x1ffff7ec
 800de78:	1ffff7f0 	.word	0x1ffff7f0
 800de7c:	200000fe 	.word	0x200000fe
 800de80:	2000010e 	.word	0x2000010e

0800de84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800de84:	b480      	push	{r7}
 800de86:	b087      	sub	sp, #28
 800de88:	af00      	add	r7, sp, #0
 800de8a:	60f8      	str	r0, [r7, #12]
 800de8c:	60b9      	str	r1, [r7, #8]
 800de8e:	4613      	mov	r3, r2
 800de90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800de92:	2300      	movs	r3, #0
 800de94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800de96:	2300      	movs	r3, #0
 800de98:	75fb      	strb	r3, [r7, #23]
 800de9a:	e027      	b.n	800deec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	0f1b      	lsrs	r3, r3, #28
 800dea0:	2b09      	cmp	r3, #9
 800dea2:	d80b      	bhi.n	800debc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	0f1b      	lsrs	r3, r3, #28
 800dea8:	b2da      	uxtb	r2, r3
 800deaa:	7dfb      	ldrb	r3, [r7, #23]
 800deac:	005b      	lsls	r3, r3, #1
 800deae:	4619      	mov	r1, r3
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	440b      	add	r3, r1
 800deb4:	3230      	adds	r2, #48	; 0x30
 800deb6:	b2d2      	uxtb	r2, r2
 800deb8:	701a      	strb	r2, [r3, #0]
 800deba:	e00a      	b.n	800ded2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	0f1b      	lsrs	r3, r3, #28
 800dec0:	b2da      	uxtb	r2, r3
 800dec2:	7dfb      	ldrb	r3, [r7, #23]
 800dec4:	005b      	lsls	r3, r3, #1
 800dec6:	4619      	mov	r1, r3
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	440b      	add	r3, r1
 800decc:	3237      	adds	r2, #55	; 0x37
 800dece:	b2d2      	uxtb	r2, r2
 800ded0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	011b      	lsls	r3, r3, #4
 800ded6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ded8:	7dfb      	ldrb	r3, [r7, #23]
 800deda:	005b      	lsls	r3, r3, #1
 800dedc:	3301      	adds	r3, #1
 800dede:	68ba      	ldr	r2, [r7, #8]
 800dee0:	4413      	add	r3, r2
 800dee2:	2200      	movs	r2, #0
 800dee4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dee6:	7dfb      	ldrb	r3, [r7, #23]
 800dee8:	3301      	adds	r3, #1
 800deea:	75fb      	strb	r3, [r7, #23]
 800deec:	7dfa      	ldrb	r2, [r7, #23]
 800deee:	79fb      	ldrb	r3, [r7, #7]
 800def0:	429a      	cmp	r2, r3
 800def2:	d3d3      	bcc.n	800de9c <IntToUnicode+0x18>
  }
}
 800def4:	bf00      	nop
 800def6:	bf00      	nop
 800def8:	371c      	adds	r7, #28
 800defa:	46bd      	mov	sp, r7
 800defc:	bc80      	pop	{r7}
 800defe:	4770      	bx	lr

0800df00 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800df00:	b480      	push	{r7}
 800df02:	b083      	sub	sp, #12
 800df04:	af00      	add	r7, sp, #0
 800df06:	4603      	mov	r3, r0
 800df08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800df0a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	370c      	adds	r7, #12
 800df10:	46bd      	mov	sp, r7
 800df12:	bc80      	pop	{r7}
 800df14:	4770      	bx	lr
	...

0800df18 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800df18:	b480      	push	{r7}
 800df1a:	b085      	sub	sp, #20
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	4603      	mov	r3, r0
 800df20:	60b9      	str	r1, [r7, #8]
 800df22:	607a      	str	r2, [r7, #4]
 800df24:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	4a05      	ldr	r2, [pc, #20]	; (800df40 <STORAGE_GetCapacity_FS+0x28>)
 800df2a:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800df32:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800df34:	2300      	movs	r3, #0
//	*block_num = info.LogBlockNbr - 1;
//	*block_size = info.LogBlockSize;
//	ret = 0;
//	return ret;
  /* USER CODE END 3 */
}
 800df36:	4618      	mov	r0, r3
 800df38:	3714      	adds	r7, #20
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bc80      	pop	{r7}
 800df3e:	4770      	bx	lr
 800df40:	0039d400 	.word	0x0039d400

0800df44 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800df44:	b480      	push	{r7}
 800df46:	b083      	sub	sp, #12
 800df48:	af00      	add	r7, sp, #0
 800df4a:	4603      	mov	r3, r0
 800df4c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800df4e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800df50:	4618      	mov	r0, r3
 800df52:	370c      	adds	r7, #12
 800df54:	46bd      	mov	sp, r7
 800df56:	bc80      	pop	{r7}
 800df58:	4770      	bx	lr

0800df5a <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800df5a:	b480      	push	{r7}
 800df5c:	b083      	sub	sp, #12
 800df5e:	af00      	add	r7, sp, #0
 800df60:	4603      	mov	r3, r0
 800df62:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800df64:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800df66:	4618      	mov	r0, r3
 800df68:	370c      	adds	r7, #12
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bc80      	pop	{r7}
 800df6e:	4770      	bx	lr

0800df70 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800df70:	b480      	push	{r7}
 800df72:	b085      	sub	sp, #20
 800df74:	af00      	add	r7, sp, #0
 800df76:	60b9      	str	r1, [r7, #8]
 800df78:	607a      	str	r2, [r7, #4]
 800df7a:	461a      	mov	r2, r3
 800df7c:	4603      	mov	r3, r0
 800df7e:	73fb      	strb	r3, [r7, #15]
 800df80:	4613      	mov	r3, r2
 800df82:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	//memcpy(buf, &buffer[blk_addr * STORAGE_BLK_SIZ], blk_len * STORAGE_BLK_SIZ);
  return (USBD_OK);
 800df84:	2300      	movs	r3, #0
//	HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
//	while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
//	ret = 0;
//	return ret;
  /* USER CODE END 6 */
}
 800df86:	4618      	mov	r0, r3
 800df88:	3714      	adds	r7, #20
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bc80      	pop	{r7}
 800df8e:	4770      	bx	lr

0800df90 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800df90:	b480      	push	{r7}
 800df92:	b085      	sub	sp, #20
 800df94:	af00      	add	r7, sp, #0
 800df96:	60b9      	str	r1, [r7, #8]
 800df98:	607a      	str	r2, [r7, #4]
 800df9a:	461a      	mov	r2, r3
 800df9c:	4603      	mov	r3, r0
 800df9e:	73fb      	strb	r3, [r7, #15]
 800dfa0:	4613      	mov	r3, r2
 800dfa2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	//memcpy(&buffer[blk_addr * STORAGE_BLK_SIZ], buf, blk_len * STORAGE_BLK_SIZ);
  return (USBD_OK);
 800dfa4:	2300      	movs	r3, #0
//	HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
//	while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
//	ret = 0;
//	return ret;
  /* USER CODE END 7 */
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3714      	adds	r7, #20
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bc80      	pop	{r7}
 800dfae:	4770      	bx	lr

0800dfb0 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800dfb4:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bc80      	pop	{r7}
 800dfbc:	4770      	bx	lr
	...

0800dfc0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b084      	sub	sp, #16
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	4a11      	ldr	r2, [pc, #68]	; (800e014 <HAL_PCD_MspInit+0x54>)
 800dfce:	4293      	cmp	r3, r2
 800dfd0:	d11b      	bne.n	800e00a <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800dfd2:	4b11      	ldr	r3, [pc, #68]	; (800e018 <HAL_PCD_MspInit+0x58>)
 800dfd4:	69db      	ldr	r3, [r3, #28]
 800dfd6:	4a10      	ldr	r2, [pc, #64]	; (800e018 <HAL_PCD_MspInit+0x58>)
 800dfd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800dfdc:	61d3      	str	r3, [r2, #28]
 800dfde:	4b0e      	ldr	r3, [pc, #56]	; (800e018 <HAL_PCD_MspInit+0x58>)
 800dfe0:	69db      	ldr	r3, [r3, #28]
 800dfe2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dfe6:	60fb      	str	r3, [r7, #12]
 800dfe8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800dfea:	2200      	movs	r2, #0
 800dfec:	2100      	movs	r1, #0
 800dfee:	2013      	movs	r0, #19
 800dff0:	f7f3 fc53 	bl	800189a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800dff4:	2013      	movs	r0, #19
 800dff6:	f7f3 fc6c 	bl	80018d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800dffa:	2200      	movs	r2, #0
 800dffc:	2100      	movs	r1, #0
 800dffe:	2014      	movs	r0, #20
 800e000:	f7f3 fc4b 	bl	800189a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800e004:	2014      	movs	r0, #20
 800e006:	f7f3 fc64 	bl	80018d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e00a:	bf00      	nop
 800e00c:	3710      	adds	r7, #16
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}
 800e012:	bf00      	nop
 800e014:	40005c00 	.word	0x40005c00
 800e018:	40021000 	.word	0x40021000

0800e01c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800e030:	4619      	mov	r1, r3
 800e032:	4610      	mov	r0, r2
 800e034:	f7fa fe3c 	bl	8008cb0 <USBD_LL_SetupStage>
}
 800e038:	bf00      	nop
 800e03a:	3708      	adds	r7, #8
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b082      	sub	sp, #8
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	460b      	mov	r3, r1
 800e04a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800e052:	78fa      	ldrb	r2, [r7, #3]
 800e054:	6879      	ldr	r1, [r7, #4]
 800e056:	4613      	mov	r3, r2
 800e058:	009b      	lsls	r3, r3, #2
 800e05a:	4413      	add	r3, r2
 800e05c:	00db      	lsls	r3, r3, #3
 800e05e:	440b      	add	r3, r1
 800e060:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	78fb      	ldrb	r3, [r7, #3]
 800e068:	4619      	mov	r1, r3
 800e06a:	f7fa fe6e 	bl	8008d4a <USBD_LL_DataOutStage>
}
 800e06e:	bf00      	nop
 800e070:	3708      	adds	r7, #8
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}

0800e076 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e076:	b580      	push	{r7, lr}
 800e078:	b082      	sub	sp, #8
 800e07a:	af00      	add	r7, sp, #0
 800e07c:	6078      	str	r0, [r7, #4]
 800e07e:	460b      	mov	r3, r1
 800e080:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800e088:	78fa      	ldrb	r2, [r7, #3]
 800e08a:	6879      	ldr	r1, [r7, #4]
 800e08c:	4613      	mov	r3, r2
 800e08e:	009b      	lsls	r3, r3, #2
 800e090:	4413      	add	r3, r2
 800e092:	00db      	lsls	r3, r3, #3
 800e094:	440b      	add	r3, r1
 800e096:	333c      	adds	r3, #60	; 0x3c
 800e098:	681a      	ldr	r2, [r3, #0]
 800e09a:	78fb      	ldrb	r3, [r7, #3]
 800e09c:	4619      	mov	r1, r3
 800e09e:	f7fa fec5 	bl	8008e2c <USBD_LL_DataInStage>
}
 800e0a2:	bf00      	nop
 800e0a4:	3708      	adds	r7, #8
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}

0800e0aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0aa:	b580      	push	{r7, lr}
 800e0ac:	b082      	sub	sp, #8
 800e0ae:	af00      	add	r7, sp, #0
 800e0b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7fa ffd5 	bl	8009068 <USBD_LL_SOF>
}
 800e0be:	bf00      	nop
 800e0c0:	3708      	adds	r7, #8
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}

0800e0c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0c6:	b580      	push	{r7, lr}
 800e0c8:	b084      	sub	sp, #16
 800e0ca:	af00      	add	r7, sp, #0
 800e0cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	689b      	ldr	r3, [r3, #8]
 800e0d6:	2b02      	cmp	r3, #2
 800e0d8:	d001      	beq.n	800e0de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e0da:	f7f3 f97d 	bl	80013d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e0e4:	7bfa      	ldrb	r2, [r7, #15]
 800e0e6:	4611      	mov	r1, r2
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f7fa ff85 	bl	8008ff8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7fa ff3e 	bl	8008f76 <USBD_LL_Reset>
}
 800e0fa:	bf00      	nop
 800e0fc:	3710      	adds	r7, #16
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}
	...

0800e104 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b082      	sub	sp, #8
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e112:	4618      	mov	r0, r3
 800e114:	f7fa ff7f 	bl	8009016 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	699b      	ldr	r3, [r3, #24]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d005      	beq.n	800e12c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e120:	4b04      	ldr	r3, [pc, #16]	; (800e134 <HAL_PCD_SuspendCallback+0x30>)
 800e122:	691b      	ldr	r3, [r3, #16]
 800e124:	4a03      	ldr	r2, [pc, #12]	; (800e134 <HAL_PCD_SuspendCallback+0x30>)
 800e126:	f043 0306 	orr.w	r3, r3, #6
 800e12a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e12c:	bf00      	nop
 800e12e:	3708      	adds	r7, #8
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}
 800e134:	e000ed00 	.word	0xe000ed00

0800e138 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b082      	sub	sp, #8
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e146:	4618      	mov	r0, r3
 800e148:	f7fa ff79 	bl	800903e <USBD_LL_Resume>
}
 800e14c:	bf00      	nop
 800e14e:	3708      	adds	r7, #8
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b082      	sub	sp, #8
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800e15c:	4a23      	ldr	r2, [pc, #140]	; (800e1ec <USBD_LL_Init+0x98>)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	4a21      	ldr	r2, [pc, #132]	; (800e1ec <USBD_LL_Init+0x98>)
 800e168:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800e16c:	4b1f      	ldr	r3, [pc, #124]	; (800e1ec <USBD_LL_Init+0x98>)
 800e16e:	4a20      	ldr	r2, [pc, #128]	; (800e1f0 <USBD_LL_Init+0x9c>)
 800e170:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e172:	4b1e      	ldr	r3, [pc, #120]	; (800e1ec <USBD_LL_Init+0x98>)
 800e174:	2208      	movs	r2, #8
 800e176:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e178:	4b1c      	ldr	r3, [pc, #112]	; (800e1ec <USBD_LL_Init+0x98>)
 800e17a:	2202      	movs	r2, #2
 800e17c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e17e:	4b1b      	ldr	r3, [pc, #108]	; (800e1ec <USBD_LL_Init+0x98>)
 800e180:	2200      	movs	r2, #0
 800e182:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e184:	4b19      	ldr	r3, [pc, #100]	; (800e1ec <USBD_LL_Init+0x98>)
 800e186:	2200      	movs	r2, #0
 800e188:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e18a:	4b18      	ldr	r3, [pc, #96]	; (800e1ec <USBD_LL_Init+0x98>)
 800e18c:	2200      	movs	r2, #0
 800e18e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e190:	4816      	ldr	r0, [pc, #88]	; (800e1ec <USBD_LL_Init+0x98>)
 800e192:	f7f3 fde4 	bl	8001d5e <HAL_PCD_Init>
 800e196:	4603      	mov	r3, r0
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d001      	beq.n	800e1a0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800e19c:	f7f3 f91c 	bl	80013d8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e1a6:	2318      	movs	r3, #24
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	2100      	movs	r1, #0
 800e1ac:	f7f5 fa85 	bl	80036ba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e1b6:	2358      	movs	r3, #88	; 0x58
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	2180      	movs	r1, #128	; 0x80
 800e1bc:	f7f5 fa7d 	bl	80036ba <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e1c6:	2398      	movs	r3, #152	; 0x98
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	2181      	movs	r1, #129	; 0x81
 800e1cc:	f7f5 fa75 	bl	80036ba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e1d6:	23d8      	movs	r3, #216	; 0xd8
 800e1d8:	2200      	movs	r2, #0
 800e1da:	2101      	movs	r1, #1
 800e1dc:	f7f5 fa6d 	bl	80036ba <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 800e1e0:	2300      	movs	r3, #0
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3708      	adds	r7, #8
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}
 800e1ea:	bf00      	nop
 800e1ec:	20002920 	.word	0x20002920
 800e1f0:	40005c00 	.word	0x40005c00

0800e1f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b084      	sub	sp, #16
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e200:	2300      	movs	r3, #0
 800e202:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7f3 feb2 	bl	8001f74 <HAL_PCD_Start>
 800e210:	4603      	mov	r3, r0
 800e212:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e214:	7bfb      	ldrb	r3, [r7, #15]
 800e216:	4618      	mov	r0, r3
 800e218:	f000 f96e 	bl	800e4f8 <USBD_Get_USB_Status>
 800e21c:	4603      	mov	r3, r0
 800e21e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e220:	7bbb      	ldrb	r3, [r7, #14]
}
 800e222:	4618      	mov	r0, r3
 800e224:	3710      	adds	r7, #16
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}

0800e22a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e22a:	b580      	push	{r7, lr}
 800e22c:	b084      	sub	sp, #16
 800e22e:	af00      	add	r7, sp, #0
 800e230:	6078      	str	r0, [r7, #4]
 800e232:	4608      	mov	r0, r1
 800e234:	4611      	mov	r1, r2
 800e236:	461a      	mov	r2, r3
 800e238:	4603      	mov	r3, r0
 800e23a:	70fb      	strb	r3, [r7, #3]
 800e23c:	460b      	mov	r3, r1
 800e23e:	70bb      	strb	r3, [r7, #2]
 800e240:	4613      	mov	r3, r2
 800e242:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e244:	2300      	movs	r3, #0
 800e246:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e248:	2300      	movs	r3, #0
 800e24a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e252:	78bb      	ldrb	r3, [r7, #2]
 800e254:	883a      	ldrh	r2, [r7, #0]
 800e256:	78f9      	ldrb	r1, [r7, #3]
 800e258:	f7f4 f82a 	bl	80022b0 <HAL_PCD_EP_Open>
 800e25c:	4603      	mov	r3, r0
 800e25e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e260:	7bfb      	ldrb	r3, [r7, #15]
 800e262:	4618      	mov	r0, r3
 800e264:	f000 f948 	bl	800e4f8 <USBD_Get_USB_Status>
 800e268:	4603      	mov	r3, r0
 800e26a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e26c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3710      	adds	r7, #16
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}

0800e276 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e276:	b580      	push	{r7, lr}
 800e278:	b084      	sub	sp, #16
 800e27a:	af00      	add	r7, sp, #0
 800e27c:	6078      	str	r0, [r7, #4]
 800e27e:	460b      	mov	r3, r1
 800e280:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e282:	2300      	movs	r3, #0
 800e284:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e286:	2300      	movs	r3, #0
 800e288:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e290:	78fa      	ldrb	r2, [r7, #3]
 800e292:	4611      	mov	r1, r2
 800e294:	4618      	mov	r0, r3
 800e296:	f7f4 f871 	bl	800237c <HAL_PCD_EP_Close>
 800e29a:	4603      	mov	r3, r0
 800e29c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e29e:	7bfb      	ldrb	r3, [r7, #15]
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f000 f929 	bl	800e4f8 <USBD_Get_USB_Status>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3710      	adds	r7, #16
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b084      	sub	sp, #16
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	460b      	mov	r3, r1
 800e2be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e2ce:	78fa      	ldrb	r2, [r7, #3]
 800e2d0:	4611      	mov	r1, r2
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f7f4 f9e5 	bl	80026a2 <HAL_PCD_EP_Flush>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2dc:	7bfb      	ldrb	r3, [r7, #15]
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f000 f90a 	bl	800e4f8 <USBD_Get_USB_Status>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3710      	adds	r7, #16
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}

0800e2f2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2f2:	b580      	push	{r7, lr}
 800e2f4:	b084      	sub	sp, #16
 800e2f6:	af00      	add	r7, sp, #0
 800e2f8:	6078      	str	r0, [r7, #4]
 800e2fa:	460b      	mov	r3, r1
 800e2fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2fe:	2300      	movs	r3, #0
 800e300:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e302:	2300      	movs	r3, #0
 800e304:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e30c:	78fa      	ldrb	r2, [r7, #3]
 800e30e:	4611      	mov	r1, r2
 800e310:	4618      	mov	r0, r3
 800e312:	f7f4 f912 	bl	800253a <HAL_PCD_EP_SetStall>
 800e316:	4603      	mov	r3, r0
 800e318:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e31a:	7bfb      	ldrb	r3, [r7, #15]
 800e31c:	4618      	mov	r0, r3
 800e31e:	f000 f8eb 	bl	800e4f8 <USBD_Get_USB_Status>
 800e322:	4603      	mov	r3, r0
 800e324:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e326:	7bbb      	ldrb	r3, [r7, #14]
}
 800e328:	4618      	mov	r0, r3
 800e32a:	3710      	adds	r7, #16
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}

0800e330 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b084      	sub	sp, #16
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	460b      	mov	r3, r1
 800e33a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e33c:	2300      	movs	r3, #0
 800e33e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e340:	2300      	movs	r3, #0
 800e342:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e34a:	78fa      	ldrb	r2, [r7, #3]
 800e34c:	4611      	mov	r1, r2
 800e34e:	4618      	mov	r0, r3
 800e350:	f7f4 f953 	bl	80025fa <HAL_PCD_EP_ClrStall>
 800e354:	4603      	mov	r3, r0
 800e356:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e358:	7bfb      	ldrb	r3, [r7, #15]
 800e35a:	4618      	mov	r0, r3
 800e35c:	f000 f8cc 	bl	800e4f8 <USBD_Get_USB_Status>
 800e360:	4603      	mov	r3, r0
 800e362:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e364:	7bbb      	ldrb	r3, [r7, #14]
}
 800e366:	4618      	mov	r0, r3
 800e368:	3710      	adds	r7, #16
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}

0800e36e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e36e:	b480      	push	{r7}
 800e370:	b085      	sub	sp, #20
 800e372:	af00      	add	r7, sp, #0
 800e374:	6078      	str	r0, [r7, #4]
 800e376:	460b      	mov	r3, r1
 800e378:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e380:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e382:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e386:	2b00      	cmp	r3, #0
 800e388:	da0c      	bge.n	800e3a4 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e38a:	78fb      	ldrb	r3, [r7, #3]
 800e38c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e390:	68f9      	ldr	r1, [r7, #12]
 800e392:	1c5a      	adds	r2, r3, #1
 800e394:	4613      	mov	r3, r2
 800e396:	009b      	lsls	r3, r3, #2
 800e398:	4413      	add	r3, r2
 800e39a:	00db      	lsls	r3, r3, #3
 800e39c:	440b      	add	r3, r1
 800e39e:	3302      	adds	r3, #2
 800e3a0:	781b      	ldrb	r3, [r3, #0]
 800e3a2:	e00b      	b.n	800e3bc <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e3a4:	78fb      	ldrb	r3, [r7, #3]
 800e3a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e3aa:	68f9      	ldr	r1, [r7, #12]
 800e3ac:	4613      	mov	r3, r2
 800e3ae:	009b      	lsls	r3, r3, #2
 800e3b0:	4413      	add	r3, r2
 800e3b2:	00db      	lsls	r3, r3, #3
 800e3b4:	440b      	add	r3, r1
 800e3b6:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800e3ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3714      	adds	r7, #20
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bc80      	pop	{r7}
 800e3c4:	4770      	bx	lr

0800e3c6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e3c6:	b580      	push	{r7, lr}
 800e3c8:	b084      	sub	sp, #16
 800e3ca:	af00      	add	r7, sp, #0
 800e3cc:	6078      	str	r0, [r7, #4]
 800e3ce:	460b      	mov	r3, r1
 800e3d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3e0:	78fa      	ldrb	r2, [r7, #3]
 800e3e2:	4611      	mov	r1, r2
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7f3 ff3e 	bl	8002266 <HAL_PCD_SetAddress>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3ee:	7bfb      	ldrb	r3, [r7, #15]
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f000 f881 	bl	800e4f8 <USBD_Get_USB_Status>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	3710      	adds	r7, #16
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}

0800e404 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b086      	sub	sp, #24
 800e408:	af00      	add	r7, sp, #0
 800e40a:	60f8      	str	r0, [r7, #12]
 800e40c:	607a      	str	r2, [r7, #4]
 800e40e:	461a      	mov	r2, r3
 800e410:	460b      	mov	r3, r1
 800e412:	72fb      	strb	r3, [r7, #11]
 800e414:	4613      	mov	r3, r2
 800e416:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e418:	2300      	movs	r3, #0
 800e41a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e41c:	2300      	movs	r3, #0
 800e41e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e426:	893b      	ldrh	r3, [r7, #8]
 800e428:	7af9      	ldrb	r1, [r7, #11]
 800e42a:	687a      	ldr	r2, [r7, #4]
 800e42c:	f7f4 f842 	bl	80024b4 <HAL_PCD_EP_Transmit>
 800e430:	4603      	mov	r3, r0
 800e432:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e434:	7dfb      	ldrb	r3, [r7, #23]
 800e436:	4618      	mov	r0, r3
 800e438:	f000 f85e 	bl	800e4f8 <USBD_Get_USB_Status>
 800e43c:	4603      	mov	r3, r0
 800e43e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e440:	7dbb      	ldrb	r3, [r7, #22]
}
 800e442:	4618      	mov	r0, r3
 800e444:	3718      	adds	r7, #24
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}

0800e44a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e44a:	b580      	push	{r7, lr}
 800e44c:	b086      	sub	sp, #24
 800e44e:	af00      	add	r7, sp, #0
 800e450:	60f8      	str	r0, [r7, #12]
 800e452:	607a      	str	r2, [r7, #4]
 800e454:	461a      	mov	r2, r3
 800e456:	460b      	mov	r3, r1
 800e458:	72fb      	strb	r3, [r7, #11]
 800e45a:	4613      	mov	r3, r2
 800e45c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e45e:	2300      	movs	r3, #0
 800e460:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e462:	2300      	movs	r3, #0
 800e464:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e46c:	893b      	ldrh	r3, [r7, #8]
 800e46e:	7af9      	ldrb	r1, [r7, #11]
 800e470:	687a      	ldr	r2, [r7, #4]
 800e472:	f7f3 ffcb 	bl	800240c <HAL_PCD_EP_Receive>
 800e476:	4603      	mov	r3, r0
 800e478:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e47a:	7dfb      	ldrb	r3, [r7, #23]
 800e47c:	4618      	mov	r0, r3
 800e47e:	f000 f83b 	bl	800e4f8 <USBD_Get_USB_Status>
 800e482:	4603      	mov	r3, r0
 800e484:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e486:	7dbb      	ldrb	r3, [r7, #22]
}
 800e488:	4618      	mov	r0, r3
 800e48a:	3718      	adds	r7, #24
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}

0800e490 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b082      	sub	sp, #8
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	460b      	mov	r3, r1
 800e49a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e4a2:	78fa      	ldrb	r2, [r7, #3]
 800e4a4:	4611      	mov	r1, r2
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7f3 ffed 	bl	8002486 <HAL_PCD_EP_GetRxCount>
 800e4ac:	4603      	mov	r3, r0
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3708      	adds	r7, #8
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}
	...

0800e4b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e4b8:	b480      	push	{r7}
 800e4ba:	b083      	sub	sp, #12
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e4c0:	4b02      	ldr	r3, [pc, #8]	; (800e4cc <USBD_static_malloc+0x14>)
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	370c      	adds	r7, #12
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bc80      	pop	{r7}
 800e4ca:	4770      	bx	lr
 800e4cc:	20002c0c 	.word	0x20002c0c

0800e4d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	b083      	sub	sp, #12
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]

}
 800e4d8:	bf00      	nop
 800e4da:	370c      	adds	r7, #12
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bc80      	pop	{r7}
 800e4e0:	4770      	bx	lr

0800e4e2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4e2:	b480      	push	{r7}
 800e4e4:	b083      	sub	sp, #12
 800e4e6:	af00      	add	r7, sp, #0
 800e4e8:	6078      	str	r0, [r7, #4]
 800e4ea:	460b      	mov	r3, r1
 800e4ec:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800e4ee:	bf00      	nop
 800e4f0:	370c      	adds	r7, #12
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bc80      	pop	{r7}
 800e4f6:	4770      	bx	lr

0800e4f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b085      	sub	sp, #20
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	4603      	mov	r3, r0
 800e500:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e502:	2300      	movs	r3, #0
 800e504:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e506:	79fb      	ldrb	r3, [r7, #7]
 800e508:	2b03      	cmp	r3, #3
 800e50a:	d817      	bhi.n	800e53c <USBD_Get_USB_Status+0x44>
 800e50c:	a201      	add	r2, pc, #4	; (adr r2, 800e514 <USBD_Get_USB_Status+0x1c>)
 800e50e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e512:	bf00      	nop
 800e514:	0800e525 	.word	0x0800e525
 800e518:	0800e52b 	.word	0x0800e52b
 800e51c:	0800e531 	.word	0x0800e531
 800e520:	0800e537 	.word	0x0800e537
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e524:	2300      	movs	r3, #0
 800e526:	73fb      	strb	r3, [r7, #15]
    break;
 800e528:	e00b      	b.n	800e542 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e52a:	2302      	movs	r3, #2
 800e52c:	73fb      	strb	r3, [r7, #15]
    break;
 800e52e:	e008      	b.n	800e542 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e530:	2301      	movs	r3, #1
 800e532:	73fb      	strb	r3, [r7, #15]
    break;
 800e534:	e005      	b.n	800e542 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e536:	2302      	movs	r3, #2
 800e538:	73fb      	strb	r3, [r7, #15]
    break;
 800e53a:	e002      	b.n	800e542 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e53c:	2302      	movs	r3, #2
 800e53e:	73fb      	strb	r3, [r7, #15]
    break;
 800e540:	bf00      	nop
  }
  return usb_status;
 800e542:	7bfb      	ldrb	r3, [r7, #15]
}
 800e544:	4618      	mov	r0, r3
 800e546:	3714      	adds	r7, #20
 800e548:	46bd      	mov	sp, r7
 800e54a:	bc80      	pop	{r7}
 800e54c:	4770      	bx	lr
 800e54e:	bf00      	nop

0800e550 <__libc_init_array>:
 800e550:	b570      	push	{r4, r5, r6, lr}
 800e552:	2600      	movs	r6, #0
 800e554:	4d0c      	ldr	r5, [pc, #48]	; (800e588 <__libc_init_array+0x38>)
 800e556:	4c0d      	ldr	r4, [pc, #52]	; (800e58c <__libc_init_array+0x3c>)
 800e558:	1b64      	subs	r4, r4, r5
 800e55a:	10a4      	asrs	r4, r4, #2
 800e55c:	42a6      	cmp	r6, r4
 800e55e:	d109      	bne.n	800e574 <__libc_init_array+0x24>
 800e560:	f000 f822 	bl	800e5a8 <_init>
 800e564:	2600      	movs	r6, #0
 800e566:	4d0a      	ldr	r5, [pc, #40]	; (800e590 <__libc_init_array+0x40>)
 800e568:	4c0a      	ldr	r4, [pc, #40]	; (800e594 <__libc_init_array+0x44>)
 800e56a:	1b64      	subs	r4, r4, r5
 800e56c:	10a4      	asrs	r4, r4, #2
 800e56e:	42a6      	cmp	r6, r4
 800e570:	d105      	bne.n	800e57e <__libc_init_array+0x2e>
 800e572:	bd70      	pop	{r4, r5, r6, pc}
 800e574:	f855 3b04 	ldr.w	r3, [r5], #4
 800e578:	4798      	blx	r3
 800e57a:	3601      	adds	r6, #1
 800e57c:	e7ee      	b.n	800e55c <__libc_init_array+0xc>
 800e57e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e582:	4798      	blx	r3
 800e584:	3601      	adds	r6, #1
 800e586:	e7f2      	b.n	800e56e <__libc_init_array+0x1e>
 800e588:	0800ec28 	.word	0x0800ec28
 800e58c:	0800ec28 	.word	0x0800ec28
 800e590:	0800ec28 	.word	0x0800ec28
 800e594:	0800ec2c 	.word	0x0800ec2c

0800e598 <memset>:
 800e598:	4603      	mov	r3, r0
 800e59a:	4402      	add	r2, r0
 800e59c:	4293      	cmp	r3, r2
 800e59e:	d100      	bne.n	800e5a2 <memset+0xa>
 800e5a0:	4770      	bx	lr
 800e5a2:	f803 1b01 	strb.w	r1, [r3], #1
 800e5a6:	e7f9      	b.n	800e59c <memset+0x4>

0800e5a8 <_init>:
 800e5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5aa:	bf00      	nop
 800e5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5ae:	bc08      	pop	{r3}
 800e5b0:	469e      	mov	lr, r3
 800e5b2:	4770      	bx	lr

0800e5b4 <_fini>:
 800e5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5b6:	bf00      	nop
 800e5b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5ba:	bc08      	pop	{r3}
 800e5bc:	469e      	mov	lr, r3
 800e5be:	4770      	bx	lr
